<?xml version="1.0" encoding="UTF-8"?>
<specificationSet xmlns="http://www.citi.qut.edu.au/yawl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="Beta 6" xsi:schemaLocation="http://www.citi.qut.edu.au/yawl d:/yawl/schema/YAWL_SchemaBeta6.xsd">
  <specification uri="makeTrip2_1.3.ywl">
    <metaData>
      <title>make trip 2 process</title>
      <creator>C Ouyang</creator>
      <description>A more complicate process that provides a trip booking service with multiple legs</description>
      <version>0.2</version>
    </metaData>
    <schema xmlns="http://www.w3.org/2001/XMLSchema">
      <complexType name="itineraryType">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="1" name="itinerarySegment">
            <complexType>
              <sequence maxOccurs="1" minOccurs="1">
                <element name="departure_location" type="string" />
                <element name="destination" type="string" />
                <element name="startDate" type="date" />
                <element name="endDate" type="date" />
                <element name="flightDetails" type="string" />
                <element name="hotelDetails" type="string" />
                <element name="carDetails" type="string" />
                <element name="subTotal" type="double" />
              </sequence>
            </complexType>
          </element>
        </sequence>
      </complexType>
      <complexType name="legsType">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="1" name="leg">
            <complexType>
              <sequence maxOccurs="1" minOccurs="1">
                <element name="departure_location" type="string" />
                <element name="destination" type="string" />
              </sequence>
            </complexType>
          </element>
        </sequence>
      </complexType>
      <complexType name="legType">
        <sequence maxOccurs="1" minOccurs="1">
          <element name="departure_location" type="string" />
          <element name="destination" type="string" />
        </sequence>
      </complexType>
      <complexType name="serviceType">
        <sequence maxOccurs="1" minOccurs="1">
          <element name="want_flight" type="boolean" />
          <element name="want_hotel" type="boolean" />
          <element name="want_car" type="boolean" />
        </sequence>
      </complexType>
    </schema>
    <decomposition id="make_trip" isRootNet="true" xsi:type="NetFactsType">
      <localVariable>
        <name>carDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue>n/a</initialValue>
      </localVariable>
      <localVariable>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue>Type name of customer</initialValue>
      </localVariable>
      <localVariable>
        <name>endDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue>2000-01-01</initialValue>
      </localVariable>
      <localVariable>
        <name>flightDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue>n/a</initialValue>
      </localVariable>
      <localVariable>
        <name>hotelDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue>n/a</initialValue>
      </localVariable>
      <localVariable>
        <name>itinerary</name>
        <type>itineraryType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue />
      </localVariable>
      <localVariable>
        <name>legs</name>
        <type>legsType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue />
      </localVariable>
      <localVariable>
        <name>payAccNumber</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue />
      </localVariable>
      <localVariable>
        <name>startDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue>2000-01-01</initialValue>
      </localVariable>
      <localVariable>
        <name>subTotal</name>
        <type>double</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue>0.00</initialValue>
      </localVariable>
      <processControlElements>
        <inputCondition id="InputCondition_14">
          <flowsInto>
            <nextElementRef id="register_16" />
          </flowsInto>
        </inputCondition>
        <task id="register_16">
          <flowsInto>
            <nextElementRef id="do_itinerary_segment_18" />
          </flowsInto>
          <join code="xor" />
          <split code="and" />
          <startingMappings>
            <mapping>
              <expression query="&lt;customer&gt;{/make_trip/customer/text()}&lt;/customer&gt;" />
              <mapsTo>customer</mapsTo>
            </mapping>
          </startingMappings>
          <completedMappings>
            <mapping>
              <expression query="&lt;payAccNumber&gt;{/register/payAccNumber/text()}&lt;/payAccNumber&gt;" />
              <mapsTo>payAccNumber</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;customer&gt;{/register/customer/text()}&lt;/customer&gt;" />
              <mapsTo>customer</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;legs&gt;{/register/legs/*}&lt;/legs&gt;" />
              <mapsTo>legs</mapsTo>
            </mapping>
          </completedMappings>
          <decomposesTo id="register" />
        </task>
        <task id="do_itinerary_segment_18" xsi:type="MultipleInstanceExternalTaskFactsType">
          <flowsInto>
            <nextElementRef id="pay_17" />
          </flowsInto>
          <join code="xor" />
          <split code="and" />
          <startingMappings>
            <mapping>
              <expression query="&lt;flightDetails&gt;{/make_trip/flightDetails/text()}&lt;/flightDetails&gt;" />
              <mapsTo>flightDetails</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;startDate&gt;{/make_trip/startDate/text()}&lt;/startDate&gt;" />
              <mapsTo>startDate</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;subTotal&gt;{number(/make_trip/subTotal/text())}&lt;/subTotal&gt;" />
              <mapsTo>subTotal</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;customer&gt;{/make_trip/customer/text()}&lt;/customer&gt;" />
              <mapsTo>customer</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;endDate&gt;{/make_trip/endDate/text()}&lt;/endDate&gt;" />
              <mapsTo>endDate</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;hotelDetails&gt;{/make_trip/hotelDetails/text()}&lt;/hotelDetails&gt;" />
              <mapsTo>hotelDetails</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;carDetails&gt;{/make_trip/carDetails/text()}&lt;/carDetails&gt;" />
              <mapsTo>carDetails</mapsTo>
            </mapping>
          </startingMappings>
          <decomposesTo id="do_itinerary_segment" />
          <minimum>1</minimum>
          <maximum>10</maximum>
          <threshold>10</threshold>
          <creationMode code="static" />
          <miDataInput>
            <expression query="/make_trip/legs" />
            <splittingExpression query="for $d in /legs/* return $d" />
            <formalInputParam>leg</formalInputParam>
          </miDataInput>
          <miDataOutput>
            <formalOutputExpression query="&lt;itinerarySegment&gt; { /do_itinerary_segment/leg/departure_location } { /do_itinerary_segment/leg/destination } { /do_itinerary_segment/startDate } { /do_itinerary_segment/endDate } { if(/do_itinerary_segment/flightDetails/text())   then /do_itinerary_segment/flightDetails else ()} { if(/do_itinerary_segment/hotelDetails/text())   then /do_itinerary_segment/hotelDetails else() } { if(/do_itinerary_segment/carDetails/text())   then /do_itinerary_segment/carDetails else() } { /do_itinerary_segment/subTotal } &lt;/itinerarySegment&gt;" />
            <outputJoiningExpression query="&lt;itinerary&gt;{for $d in /do_itinerary_segment/itinerarySegment return $d}&lt;/itinerary&gt;" />
            <resultAppliedToLocalVariable>itinerary</resultAppliedToLocalVariable>
          </miDataOutput>
        </task>
        <task id="pay_17">
          <flowsInto>
            <nextElementRef id="OutputCondition_15" />
          </flowsInto>
          <join code="xor" />
          <split code="and" />
          <startingMappings>
            <mapping>
              <expression query="&lt;total&gt;{sum(/make_trip/itinerary/itinerarySegment/subTotal)} &lt;/total&gt;" />
              <mapsTo>total</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;customer&gt;{/make_trip/customer/text()}&lt;/customer&gt;" />
              <mapsTo>customer</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;payAccNumber&gt;{/make_trip/payAccNumber/text()}&lt;/payAccNumber&gt;" />
              <mapsTo>payAccNumber</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;itinerary&gt;{/make_trip/itinerary/*}&lt;/itinerary&gt;" />
              <mapsTo>itinerary</mapsTo>
            </mapping>
          </startingMappings>
          <decomposesTo id="pay" />
        </task>
        <outputCondition id="OutputCondition_15" />
      </processControlElements>
    </decomposition>
    <decomposition id="do_itinerary_segment" xsi:type="NetFactsType">
      <inputParam>
        <name>flightDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>startDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>leg</name>
        <type>legType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>subTotal</name>
        <type>double</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>endDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>hotelDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>carDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <outputParam>
        <name>flightDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>startDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>leg</name>
        <type>legType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>subTotal</name>
        <type>double</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>endDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>hotelDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>carDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <localVariable>
        <name>serviceRequired</name>
        <type>serviceType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <initialValue />
      </localVariable>
      <processControlElements>
        <inputCondition id="InputCondition_1">
          <flowsInto>
            <nextElementRef id="register_itinerary_3" />
          </flowsInto>
        </inputCondition>
        <task id="register_itinerary_3">
          <flowsInto>
            <nextElementRef id="book_flight_6" />
            <predicate>/do_itinerary_segment/serviceRequired/want_flight='true'</predicate>
          </flowsInto>
          <flowsInto>
            <nextElementRef id="book_car_7" />
            <predicate>/do_itinerary_segment/serviceRequired/want_car='true'</predicate>
            <isDefaultFlow />
          </flowsInto>
          <flowsInto>
            <nextElementRef id="book_hotel_4" />
            <predicate>/do_itinerary_segment/serviceRequired/want_hotel='true'</predicate>
          </flowsInto>
          <join code="xor" />
          <split code="or" />
          <startingMappings>
            <mapping>
              <expression query="&lt;leg&gt;{/do_itinerary_segment/leg/*}&lt;/leg&gt;" />
              <mapsTo>leg</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;customer&gt;{/do_itinerary_segment/customer/text()}&lt;/customer&gt;" />
              <mapsTo>customer</mapsTo>
            </mapping>
          </startingMappings>
          <completedMappings>
            <mapping>
              <expression query="&lt;endDate&gt;{/register_itinerary/endDate/text()}&lt;/endDate&gt;" />
              <mapsTo>endDate</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;serviceRequired&gt;{/register_itinerary/serviceRequired/*}&lt;/serviceRequired&gt;" />
              <mapsTo>serviceRequired</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;startDate&gt;{/register_itinerary/startDate/text()}&lt;/startDate&gt;" />
              <mapsTo>startDate</mapsTo>
            </mapping>
          </completedMappings>
          <decomposesTo id="register_itinerary" />
        </task>
        <task id="book_car_7">
          <flowsInto>
            <nextElementRef id="prepare_pay_5" />
          </flowsInto>
          <join code="xor" />
          <split code="and" />
          <startingMappings>
            <mapping>
              <expression query="&lt;startDate&gt;{/do_itinerary_segment/startDate/text()}&lt;/startDate&gt;" />
              <mapsTo>startDate</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;leg&gt;{/do_itinerary_segment/leg/*}&lt;/leg&gt;" />
              <mapsTo>leg</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;customer&gt;{/do_itinerary_segment/customer/text()}&lt;/customer&gt;" />
              <mapsTo>customer</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;endDate&gt;{/do_itinerary_segment/endDate/text()}&lt;/endDate&gt;" />
              <mapsTo>endDate</mapsTo>
            </mapping>
          </startingMappings>
          <completedMappings>
            <mapping>
              <expression query="&lt;carDetails&gt;{/book_car/carDetails/text()}&lt;/carDetails&gt;" />
              <mapsTo>carDetails</mapsTo>
            </mapping>
          </completedMappings>
          <decomposesTo id="book_car" />
        </task>
        <task id="book_flight_6">
          <flowsInto>
            <nextElementRef id="prepare_pay_5" />
          </flowsInto>
          <join code="xor" />
          <split code="and" />
          <startingMappings>
            <mapping>
              <expression query="&lt;startDate&gt;{/do_itinerary_segment/startDate/text()}&lt;/startDate&gt;" />
              <mapsTo>startDate</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;leg&gt;{/do_itinerary_segment/leg/*}&lt;/leg&gt;" />
              <mapsTo>leg</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;customer&gt;{/do_itinerary_segment/customer/text()}&lt;/customer&gt;" />
              <mapsTo>customer</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;endDate&gt;{/do_itinerary_segment/endDate/text()}&lt;/endDate&gt;" />
              <mapsTo>endDate</mapsTo>
            </mapping>
          </startingMappings>
          <completedMappings>
            <mapping>
              <expression query="&lt;flightDetails&gt;{/book_flight/flightDetails/text()}&lt;/flightDetails&gt;" />
              <mapsTo>flightDetails</mapsTo>
            </mapping>
          </completedMappings>
          <decomposesTo id="book_flight" />
        </task>
        <task id="book_hotel_4">
          <flowsInto>
            <nextElementRef id="prepare_pay_5" />
          </flowsInto>
          <join code="xor" />
          <split code="and" />
          <startingMappings>
            <mapping>
              <expression query="&lt;startDate&gt;{/do_itinerary_segment/startDate/text()}&lt;/startDate&gt;" />
              <mapsTo>startDate</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;leg&gt;{/do_itinerary_segment/leg/*}&lt;/leg&gt;" />
              <mapsTo>leg</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;customer&gt;{/do_itinerary_segment/customer/text()}&lt;/customer&gt;" />
              <mapsTo>customer</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;endDate&gt;{/do_itinerary_segment/endDate/text()}&lt;/endDate&gt;" />
              <mapsTo>endDate</mapsTo>
            </mapping>
          </startingMappings>
          <completedMappings>
            <mapping>
              <expression query="&lt;hotelDetails&gt;{/book_hotel/hotelDetails/text()}&lt;/hotelDetails&gt;" />
              <mapsTo>hotelDetails</mapsTo>
            </mapping>
          </completedMappings>
          <decomposesTo id="book_hotel" />
        </task>
        <task id="prepare_pay_5">
          <flowsInto>
            <nextElementRef id="OutputCondition_2" />
          </flowsInto>
          <join code="or" />
          <split code="and" />
          <startingMappings>
            <mapping>
              <expression query="&lt;flightDetails&gt;{/do_itinerary_segment/flightDetails/text()}&lt;/flightDetails&gt;" />
              <mapsTo>flightDetails</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;customer&gt;{/do_itinerary_segment/customer/text()}&lt;/customer&gt;" />
              <mapsTo>customer</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;hotelDetails&gt;{/do_itinerary_segment/hotelDetails/text()}&lt;/hotelDetails&gt;" />
              <mapsTo>hotelDetails</mapsTo>
            </mapping>
            <mapping>
              <expression query="&lt;carDetails&gt;{/do_itinerary_segment/carDetails/text()}&lt;/carDetails&gt;" />
              <mapsTo>carDetails</mapsTo>
            </mapping>
          </startingMappings>
          <completedMappings>
            <mapping>
              <expression query="&lt;subTotal&gt;{number(/prepare_pay/subTotal/text())}&lt;/subTotal&gt;" />
              <mapsTo>subTotal</mapsTo>
            </mapping>
          </completedMappings>
          <decomposesTo id="prepare_pay" />
        </task>
        <outputCondition id="OutputCondition_2" />
      </processControlElements>
    </decomposition>
    <decomposition id="pay" xsi:type="WebServiceGatewayFactsType">
      <inputParam>
        <name>total</name>
        <type>double</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>payAccNumber</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>itinerary</name>
        <type>itineraryType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
    </decomposition>
    <decomposition id="book_car" xsi:type="WebServiceGatewayFactsType">
      <inputParam>
        <name>startDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>leg</name>
        <type>legType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>endDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <outputParam>
        <name>carDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
    </decomposition>
    <decomposition id="register_itinerary" xsi:type="WebServiceGatewayFactsType">
      <inputParam>
        <name>leg</name>
        <type>legType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <outputParam>
        <name>startDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>endDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>serviceRequired</name>
        <type>serviceType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
    </decomposition>
    <decomposition id="book_flight" xsi:type="WebServiceGatewayFactsType">
      <inputParam>
        <name>startDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>leg</name>
        <type>legType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>endDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <outputParam>
        <name>flightDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
    </decomposition>
    <decomposition id="book_hotel" xsi:type="WebServiceGatewayFactsType">
      <inputParam>
        <name>startDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>leg</name>
        <type>legType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>endDate</name>
        <type>date</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <outputParam>
        <name>hotelDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
    </decomposition>
    <decomposition id="prepare_pay" xsi:type="WebServiceGatewayFactsType">
      <inputParam>
        <name>flightDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>hotelDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <inputParam>
        <name>carDetails</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <outputParam>
        <name>subTotal</name>
        <type>double</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
    </decomposition>
    <decomposition id="register" xsi:type="WebServiceGatewayFactsType">
      <inputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </inputParam>
      <outputParam>
        <name>legs</name>
        <type>legsType</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>customer</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
      <outputParam>
        <name>payAccNumber</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
      </outputParam>
    </decomposition>
  </specification>
</specificationSet>


