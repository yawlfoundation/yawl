<?xml version="1.0" encoding="UTF-8"?>
<specificationSet xmlns="http://www.yawl.fit.qut.edu.au/"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="Beta 7.1"
	xsi:schemaLocation="http://www.yawl.fit.qut.edu.au/ YAWL_SchemaBeta7.1.xsd">
	<specification uri="JythonSpecJaxb4.xml">
		<name>JythonSpec</name>
		<documentation>Specification that runs Jython code to get the quotes of the day.</documentation>
		<metaData/>
		<decomposition id="RootDecomp" isRootNet="true" xsi:type="NetFactsType">
			<localVariable>
				<name>one__ServiceName</name>
				<isUntyped/>
				<initialValue>Jython</initialValue>
			</localVariable>
			<localVariable>
				<name>one__code</name>
				<isUntyped/>
				<initialValue>text::from javax.xml.parsers import DocumentBuilder
from javax.xml.parsers import DocumentBuilderFactory
from com.sun.org.apache.xpath.internal import XPathAPI
from org.w3c.dom import Document
from org.w3c.dom import Node
from org.w3c.dom.traversal import NodeIterator
import time
import java.lang.String

today = time.strftime("%pm/%pd/%py",time.localtime(time.time()))
docBuilderFactory = DocumentBuilderFactory.newInstance()
docBuilder = docBuilderFactory.newDocumentBuilder()
doc = docBuilder.parse("http://feeds.feedburner.com/quotationspage/qotd")
doc.getDocumentElement().normalize()
nl = XPathAPI.selectNodeIterator(doc, "/rss/channel/item/title | /rss/channel/item/description")
csv = ""
for done in range(4):
	node = nl.nextNode()
	if node == None : break
	author = node.getTextContent()
	node = nl.nextNode()
	if node == None : break
	description = node.getTextContent()
	description = description[:description.find("%l") - 1]
	csv = csv + description + "\r\n--" + author + "\r\n\r\n"
print csv
data.setPlain("today",today)
data.setPlain("csv",csv)</initialValue>
			</localVariable>
			<localVariable>
				<name>one__output</name>
				<isUntyped/>
				<initialValue></initialValue>
			</localVariable>
			<localVariable>
				<name>one__error</name>
				<isUntyped/>
				<initialValue></initialValue>
			</localVariable>
			<localVariable>
				<name>one__today</name>
				<isUntyped/>
				<initialValue></initialValue>
			</localVariable>
			<localVariable>
				<name>one__csv</name>
				<isUntyped/>
				<initialValue></initialValue>
			</localVariable>
			<localVariable>
				<name>two__subject</name>
				<isUntyped/>
				<initialValue>text::Quotes of the Day %l%l%ltoday%r%r%r</initialValue>
			</localVariable>
			<localVariable>
				<name>two__body</name>
				<isUntyped/>
				<initialValue>text::Hello, fellow DSS'er, all my circuits are functioning imperfectly and I am fully operational.
It must be 5:00 PM, so it's time for the quotes of the day - enjoy...
-YAWL

%l%l%lcsv%r%r%r</initialValue>
			</localVariable>
			<localVariable>
				<name>two__toAddress</name>
				<isUntyped/>
				<initialValue>text::matthew.sandoz@ichotelsgroup.com</initialValue>
			</localVariable>
			<localVariable>
				<name>two__fromAddress</name>
				<isUntyped/>
				<initialValue>text::capsela@ichotelsgroup.com</initialValue>
			</localVariable>
			<localVariable>
				<name>two__ccAddress</name>
				<isUntyped/>
				<initialValue>text::</initialValue>
			</localVariable>
			<localVariable>
				<name>two__bccAddress</name>
				<isUntyped/>
				<initialValue>text::</initialValue>
			</localVariable>
			<localVariable>
				<name>two__host</name>
				<isUntyped/>
				<initialValue>text::capsela.hiw.com</initialValue>
			</localVariable>
			<processControlElements>
				<inputCondition id="input">
					<flowsInto>
						<nextElementRef id="one"/>
					</flowsInto>
				</inputCondition>
				<task id="one">
					<flowsInto>
						<nextElementRef id="two"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="&lt;code&gt;{/RootDecomp/one__code/text()}&lt;/code&gt;"/>
							<mapsTo>code</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;error&gt;{/RootDecomp/one__error/text()}&lt;/error&gt;"/>
							<mapsTo>error</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;output&gt;{/RootDecomp/one__output/text()}&lt;/output&gt;"/>
							<mapsTo>output</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;today&gt;{/RootDecomp/one__today/text()}&lt;/today&gt;"/>
							<mapsTo>today</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;csv&gt;{/RootDecomp/one__csv/text()}&lt;/csv&gt;"/>
							<mapsTo>csv</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;ServiceName&gt;{/RootDecomp/one__ServiceName/text()}&lt;/ServiceName&gt;"/>
							<mapsTo>ServiceName</mapsTo>
						</mapping>
					</startingMappings>
					<completedMappings>
						<mapping>
							<expression query="&lt;one__code&gt;{/DecompOne/code/text()}&lt;/one__code&gt;"/>
							<mapsTo>one__code</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;one__output&gt;{/DecompOne/output/text()}&lt;/one__output&gt;"/>
							<mapsTo>one__output</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;one__error&gt;{/DecompOne/error/text()}&lt;/one__error&gt;"/>
							<mapsTo>one__error</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;one__today&gt;{/DecompOne/today/text()}&lt;/one__today&gt;"/>
							<mapsTo>one__today</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;one__csv&gt;{/DecompOne/csv/text()}&lt;/one__csv&gt;"/>
							<mapsTo>one__csv</mapsTo>
						</mapping>
					</completedMappings>
					<decomposesTo id="DecompOne"/>
				</task>
				<task id="two">
					<flowsInto>
						<nextElementRef id="finis"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="&lt;toAddress&gt;{/RootDecomp/two__toAddress/text()}&lt;/toAddress&gt;"/>
							<mapsTo>toAddress</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;subject&gt;{/RootDecomp/two__subject/text()}&lt;/subject&gt;"/>
							<mapsTo>subject</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;fromAddress&gt;{/RootDecomp/two__fromAddress/text()}&lt;/fromAddress&gt;"/>
							<mapsTo>fromAddress</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;ccAddress&gt;{/RootDecomp/two__ccAddress/text()}&lt;/ccAddress&gt;"/>
							<mapsTo>ccAddress</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;bccAddress&gt;{/RootDecomp/two__bccAddress/text()}&lt;/bccAddress&gt;"/>
							<mapsTo>bccAddress</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;host&gt;{/RootDecomp/two__host/text()}&lt;/host&gt;"/>
							<mapsTo>host</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;body&gt;{/RootDecomp/two__body/text()}&lt;/body&gt;"/>
							<mapsTo>body</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;today&gt;{/RootDecomp/one__today/text()}&lt;/today&gt;"/>
							<mapsTo>today</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;csv&gt;{/RootDecomp/one__csv/text()}&lt;/csv&gt;"/>
							<mapsTo>csv</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;ServiceName&gt;EmailSender&lt;/ServiceName&gt;"/>
							<mapsTo>ServiceName</mapsTo>
						</mapping>
					</startingMappings>
					<decomposesTo id="DecompTwo"/>
				</task>
				<outputCondition id="finis">
					<name>Finished case</name>
				</outputCondition>
			</processControlElements>
		</decomposition>
		<decomposition id="DecompOne" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<name>code</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>output</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>error</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>today</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>csv</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>ServiceName</name>
				<isUntyped/>
			</inputParam>
			<outputParam>
				<name>code</name>
				<isUntyped/>
			</outputParam>
			<outputParam>
				<name>output</name>
				<isUntyped/>
			</outputParam>
			<outputParam>
				<name>error</name>
				<isUntyped/>
			</outputParam>
			<outputParam>
				<name>today</name>
				<isUntyped/>
			</outputParam>
			<outputParam>
				<name>csv</name>
				<isUntyped/>
			</outputParam>
			<yawlService id="http://localhost:8080/NexusServiceInvoker/"/>
		</decomposition>
		<decomposition id="DecompTwo" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<name>toAddress</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>subject</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>body</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>fromAddress</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>ccAddress</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>bccAddress</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>host</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>ServiceName</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>today</name>
				<isUntyped/>
			</inputParam>
			<inputParam>
				<name>csv</name>
				<isUntyped/>
			</inputParam>
			<yawlService id="http://localhost:8080/NexusServiceInvoker/"/>
		</decomposition>
	</specification>
</specificationSet>