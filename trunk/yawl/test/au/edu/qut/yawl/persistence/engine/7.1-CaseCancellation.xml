<?xml version="1.0" encoding="UTF-8"?>
<specificationSet xmlns="http://www.citi.qut.edu.au/yawl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="Beta 7.1" xsi:schemaLocation="http://www.citi.qut.edu.au/yawl d:/yawl/schema/YAWL_SchemaBeta7.1.xsd">
  <specification uri="CaseCancellation.xml">
    <metaData />
    <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    <decomposition id="make_initerary" isRootNet="true" xsi:type="NetFactsType">
      <localVariable>
        <name>stubList</name>
        <isUntyped />
        <initialValue>&lt;stub/&gt;&lt;stub/&gt;</initialValue>
      </localVariable>
      <processControlElements>
        <inputCondition id="start_make_itinerary">
          <flowsInto>
            <nextElementRef id="register" />
          </flowsInto>
        </inputCondition>
        <task id="register">
          <flowsInto>
            <nextElementRef id="ableToCancel" />
          </flowsInto>
          <flowsInto>
            <nextElementRef id="do_itinerary_segment" />
          </flowsInto>
          <join code="and" />
          <split code="and" />
          <decomposesTo id="register" />
        </task>
        <condition id="ableToCancel">
          <flowsInto>
            <nextElementRef id="cancel" />
          </flowsInto>
          <flowsInto>
            <nextElementRef id="pay" />
          </flowsInto>
        </condition>
        <task id="cancel">
          <flowsInto>
            <nextElementRef id="fin_make_itinerary" />
          </flowsInto>
          <join code="and" />
          <split code="and" />
          <removesTokens id="ableToCancel" />
          <removesTokens id="do_itinerary_segment" />
          <removesTokens id="pay" />
          <removesTokens id="register" />
          <decomposesTo id="cancel" />
        </task>
        <task id="pay">
          <flowsInto>
            <nextElementRef id="fin_make_itinerary" />
          </flowsInto>
          <join code="and" />
          <split code="and" />
          <decomposesTo id="pay" />
        </task>
        <task id="do_itinerary_segment" xsi:type="MultipleInstanceExternalTaskFactsType">
          <flowsInto>
            <nextElementRef id="pay" />
          </flowsInto>
          <join code="and" />
          <split code="and" />
          <decomposesTo id="do_itinerary_segment" />
          <minimum>1</minimum>
          <maximum>100</maximum>
          <threshold>100</threshold>
          <creationMode code="static" />
          <miDataInput>
            <expression query="/data/stubList" />
            <splittingExpression query=" for $d in /stubList/* return $d " />
            <formalInputParam>stub</formalInputParam>
          </miDataInput>
        </task>
        <outputCondition id="fin_make_itinerary" />
      </processControlElements>
    </decomposition>
    <decomposition id="do_itinerary_segment" xsi:type="NetFactsType">
      <inputParam name="stub">
        <name>stub</name>
        <type>string</type>
        <namespace>http://www.w3.org/2001/XMLSchema</namespace>
        <mandatory />
      </inputParam>
      <processControlElements>
        <inputCondition id="start">
          <name>Start</name>
          <flowsInto>
            <nextElementRef id="register_itinerary_segment" />
          </flowsInto>
        </inputCondition>
        <task id="register_itinerary_segment">
          <name />
          <flowsInto>
            <nextElementRef id="flight" />
            <predicate>/data/want_flight = 'true'</predicate>
            <isDefaultFlow />
          </flowsInto>
          <flowsInto>
            <nextElementRef id="car" />
            <predicate>/data/want_car = 'true'</predicate>
          </flowsInto>
          <flowsInto>
            <nextElementRef id="hotel" />
            <predicate>/data/want_hotel = 'true'</predicate>
          </flowsInto>
          <join code="and" />
          <split code="or" />
          <decomposesTo id="register_itinerary_segment" />
        </task>
        <task id="flight">
          <name>Book flight</name>
          <flowsInto>
            <nextElementRef id="prepare_payment_information" />
          </flowsInto>
          <join code="and" />
          <split code="and" />
          <decomposesTo id="flight" />
        </task>
        <task id="car">
          <name>Book car</name>
          <flowsInto>
            <nextElementRef id="prepare_payment_information" />
          </flowsInto>
          <join code="and" />
          <split code="and" />
          <decomposesTo id="car" />
        </task>
        <task id="hotel">
          <name>Book hotel</name>
          <flowsInto>
            <nextElementRef id="prepare_payment_information" />
          </flowsInto>
          <join code="and" />
          <split code="and" />
          <decomposesTo id="hotel" />
        </task>
        <task id="prepare_payment_information">
          <name>Book flight</name>
          <flowsInto>
            <nextElementRef id="end" />
          </flowsInto>
          <join code="or" />
          <split code="and" />
          <decomposesTo id="prepare_payment_information" />
        </task>
        <task id="prepare_payment_information">
          <name>Book flight</name>
          <flowsInto>
            <nextElementRef id="end" />
          </flowsInto>
          <join code="or" />
          <split code="and" />
          <decomposesTo id="prepare_payment_information" />
        </task>
        <task id="prepare_payment_information">
          <name>Book flight</name>
          <flowsInto>
            <nextElementRef id="end" />
          </flowsInto>
          <join code="or" />
          <split code="and" />
          <decomposesTo id="prepare_payment_information" />
        </task>
        <outputCondition id="end">
          <name>End</name>
        </outputCondition>
      </processControlElements>
    </decomposition>
    <decomposition id="register_itinerary_segment" xsi:type="WebServiceGatewayFactsType">
      <yawlService id="mock://mockedURL/bla/bla/bla" />
    </decomposition>
    <decomposition id="flight" xsi:type="WebServiceGatewayFactsType" />
    <decomposition id="hotel" xsi:type="WebServiceGatewayFactsType" />
    <decomposition id="car" xsi:type="WebServiceGatewayFactsType" />
    <decomposition id="pay" xsi:type="WebServiceGatewayFactsType" />
    <decomposition id="prepare_payment_information" xsi:type="WebServiceGatewayFactsType" />
    <decomposition id="register" xsi:type="WebServiceGatewayFactsType" />
    <decomposition id="cancel" xsi:type="WebServiceGatewayFactsType" />
  </specification>
</specificationSet>

