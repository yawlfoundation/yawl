<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>

    <!-- General description of your web application -->

    <display-name>YAWL Web Service Invoker Module</display-name>
    <description>
        This is the YAWL Web Service Invoker Interface.
        It performs invokations of previously specified web services by dynamically looking
        up and binding to them.   The web service needs to be described by WSDL.
        Copyright © 2003 Queensland University of Technology. All rights reserved.
        Author: Lachlan Aldred
        Date: 28/1/2004
        Time: 15:44:01
        This file remains the property of the YAWL team at the Queensland University of
        Technology (Wil van der Aalst, Arthur ter Hofstede, Lachlan Aldred, Lindsay Bradford,
        and Marlon Dumas).
        You do not have permission to use, view, execute or modify the source outside the terms
        of the YAWL SOFTWARE LICENCE.
        For more information about the YAWL SOFTWARE LICENCE refer to the 'downloads' section under
        http://www.yawl-system.com.
    </description>

    <!-- Context initialization parameters that define shared
         String constants used within your application, which
         can be customized by the system administrator who is
         installing your application.  The values actually
         assigned to these parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletContext().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of context initialization
         parameters, including zero.
    -->

    <context-param>
        <param-name>InterfaceB_BackEnd</param-name>
        <param-value>http://localhost:8080/yawl/ib</param-value>
        <description>
            The URL of the engine's interface B.
        </description>
    </context-param>

    <context-param>
        <param-name>InterfaceBWebSideController</param-name>
        <param-value>org.yawlfoundation.yawl.wsif.WSIFController</param-value>
        <description>
            The class name of the Interface B Server implementation.
        </description>
    </context-param>

    <context-param>
        <param-name>UserName</param-name>
        <param-value></param-value>
        <description>
            If you need to invoke a web service and this is deployed behind
            an authenticating proxy server then you ought to set this variable
            appropriately.
        </description>
    </context-param>

    <context-param>
        <param-name>Password</param-name>
        <param-value></param-value>
        <description>
            If you need to invoke a web service and this is deployed behind
            an authenticating proxy server then you ought to set this variable
            appropriately.
        </description>
    </context-param>

    <context-param>
        <param-name>ProxyHost</param-name>
        <param-value></param-value>
        <description>
            If you need to invoke a web service and this is deployed behind
            an authenticating proxy server then you ought to set this variable
            appropriately.
        </description>
    </context-param>

    <context-param>
        <param-name>ProxyPort</param-name>
        <param-value></param-value>
        <description>
            If you need to invoke a web service and this is deployed behind
            an authenticating proxy server then you ought to set this variable
            appropriately.
        </description>
    </context-param>

    <!-- Servlet definitions for the servlets that make up
         your web application, including initialization
         parameters.  With Tomcat, you can also send requests
         to servlets not listed here with a request like this:

           http://localhost:8080/{context-path}/servlet/{classname}

         but this usage is not guaranteed to be portable.  It also
         makes relative references to images and other resources
         required by your servlet more complicated, so defining
         all of your servlets (and defining a mapping to them with
         a servlet-mapping element) is recommended.

         Servlet initialization parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletConfig().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of servlets, including zero.
    -->

    <!--servlet>
        <servlet-name>ErrorServlet</servlet-name>
        <description>
            Reports that the URI request found nothing, hence the error report.
        </description>
        <servlet-class>org.yawlfoundation.yawl.engine.interfce.ErrorServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet-->

    <!--CharsetFilter -->

     <filter>
       <filter-name>CharsetFilter</filter-name>
       <filter-class>org.yawlfoundation.yawl.util.CharsetFilter</filter-class>
         <init-param>
           <param-name>requestEncoding</param-name>
           <param-value>UTF-8</param-value>
         </init-param>
     </filter>

     <filter-mapping>
       <filter-name>CharsetFilter</filter-name>
       <url-pattern>/*</url-pattern>
     </filter-mapping>

    
    <servlet>
        <servlet-name>InterfaceB_Servlet</servlet-name>
        <description>
            Listens to notification of work items from the engine.  Shouldn't need to change this.
        </description>
        <servlet-class>
            org.yawlfoundation.yawl.engine.interfce.interfaceB.InterfaceB_EnvironmentBasedServer
        </servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>

    <servlet>
        <servlet-name>AuthServlet</servlet-name>
        <description>
            Handles proxy server authentication.  Shouldn't need to change this.
        </description>
        <servlet-class>
            org.yawlfoundation.yawl.engine.interfce.AuthenticationResponseServlet
        </servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>


    <!-- Define mappings that are used by the servlet container to
         translate a particular request URI (context-relative) to a
         particular servlet.  The examples below correspond to the
         servlet descriptions above.  Thus, a request URI like:

           http://localhost:8080/{contextpath}/graph

         will be mapped to the "graph" servlet, while a request like:

           http://localhost:8080/{contextpath}/saveCustomer.do

         will be mapped to the "controller" servlet.

         You may define any number of servlet mappings, including zero.
         It is also legal to define more than one mapping for the same
         servlet, if you wish to.
    -->

    <servlet-mapping>
        <servlet-name>InterfaceB_Servlet</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>AuthServlet</servlet-name>
        <url-pattern>/authServlet</url-pattern>
    </servlet-mapping>


    <!--servlet-mapping>
        <servlet-name>ErrorServlet</servlet-name>
        <url-pattern>/ErrorPage</url-pattern>
    </servlet-mapping-->

    <!--
        Define the default session timeout for your application,
        in minutes.  From a servlet or JSP page, you can modify
        the timeout for a particular session dynamically by using
        HttpSession.getMaxInactiveInterval().
    -->

    <session-config>
        <session-timeout>30</session-timeout><!-- 30 minutes -->
    </session-config>

    <!--
        Define welcome file list.
    -->

    <!--error-page>
        <error-code>404</error-code>
        <location>/errorPage</location>
    </error-page-->

    <!--login-config>
        <auth-method>FORM</auth-method>
        <form-login-config>
            <form-login-page>/_Login.jsp</form-login-page>
            <form-error-page>/fail_login.html</form-error-page>
        </form-login-config>
    </login-config-->

</web-app>