                      YAWL Release 2.0 (beta) 30/05/2008
                      ==================================

This is the beta release of the YAWL Environment (version 2.0). A final 2.0 release
is expected in the short term, so this beta release should be considered a true 'beta':
released with a view to have any remaining issues, shortcomings and bugs identified and
resolved before the final release.

Please read through the list of new features and current known limitations below. More
detailed information will be released as it becomes available.

This release comes with a new installer package (for Windows installations) that easily
installs all the required software. Alternately, the install can be done manually by
copying the war files to tomcat/webapps directory as per previous versions.

QUICK START: After installation, start Tomcat and point a browser to
             http://localhost:8080/resourceService


1. MINIMUM REQUIREMENTS
-----------------------
  * Tomcat 5.5.25 or higher
  * Java 5 (1.5) or higher


2. NEW FEATURES
---------------
   ENGINE: The core YAWL engine is more robust, and supports several new features:

     - A task may be 'marked' as requiring human resources (a manual task - see the
       Resource Service below), or not (an automated task). When enabled, an automated
       task is immediately started and completed, with any XQueries on output parameters
       performed. The final release will include the ability for automated tasks to have
       'codelets' designated and executed during their processing.

     - A task may be extended with a timer, which can be set to be triggered either on
       enablement (ie. when a workitem is created) or on executing (ie. when a workitem
       is started), and to expire either after a specified duration or at a specified
       date and time. On expiry, a 'manual' task will auto-complete and an event will be
       generated by the engine for services to take action (if required). If the task
       is of 'automated' type, the timer will act as a delay (processing of an
       automated task is delayed until the timer expires). A net-level variable may
       be specified so that, at runtime, it receives a timer trigger type and expiry
       time or duration, which can be used by a later task (or tasks) to set its
       timer parameters - late binding of timer information.

     - A task or a decomposition may have 'extended attributes' added to its
       specification, which are passed through the engine to interested services to
       interpret as required. For example, attributes can be passed through to forms
       that describe how certain fields should be displayed.

     - A new interface, Interface E, has been created to provide a link to the engine's
       process logs, and contains a number of methods for interrogating the log tables.
       The structure of the log tables has been completely revamped to better capture
       process events.

     - For developers, the WorkItemRecord object has been expanded to provide much
       more information about a workitem to custom services.

     - A new specification schema has been developed to include the new features of
       YAWL 2.0, but the 2.0 engine is completely backwards-compatible and will execute
       process specifications developed under any and all previous YAWL versions.


   RESOURCE SERVICE: To support resourcing, a new Resource Service has been designed
   and implemented. The service has been created as a standard YAWL custom service, so
   that resourcing decisions are completely removed from the core engine - the engine
   has no knowledge of how a workitem is resourced. The service incorporates an
   integrated worklist handler and administrative tool, and provides direct support for
   38 of the 43 identified resource patterns (the remaining 5 refer to a 'case
   handling' paradigm). Full documentation will follow soon (but see the 'YAWL EDITOR
   v2.0 USER MANUAL' for some details). Features:

     - resources (participants and/or roles) can be allocated to tasks at design time,
       or can be late-bound at runtime, to form a 'distribution set' for each task.

     - certain filters and constraints may be applied to a distribution set, based on
       organisational groupings, positions and capabilities (or skillsets). Tasks can
       also be constrained so that they are allocated to the same user as a previous
       task (retain familiar), or not allocated to the same user as a previous task
       (four-eyes principle).

     - different allocation strategies may be applied to the set to choose a
       particular participant, including (by default) round robin, shortest queue,
       random choice, and historical (logged) data such as 'who hasn't done this for the
       longest time?'.

     - a user now has four workqueues: Offered, Allocated, Started and Suspended. Which
       queue a workitem arrives on depends on resourcing strategies applied to the
       workitem. Workitems can be manipulated via these queues (depending on 
       authorisations), for example a workitem may be delegated, reallocated (either
       with or without current data-state changes), skipped, chained, piled and so on.

     - a task may specify that it is to be displayed to the user via a 'custom form'
       designed specifically for the task, or be displayed via a dynamically
       generated form. The dynamic form generation is completely encapsulated within the
       resource service and does not rely on third party screen generation libraries
       (such as XForms). See 'customformtest.jsp' in the resourceService jsp files for
       an example of a simple custom form.

     - admin pages are provided to manipulate organisational data.

     - privileges (authorisations) can be applied to users and to particular tasks.

     - all resourcing actions are logged in process logs completely separate from
       those of the engine.

     - several 'pluggable' interfaces are provided:
         * org data can be provided from any data source through an 'OrgDataSouce'
           interface.
         * constraints, filters and allocation strategies can be added at any time.
         * a 'resource' interface provides resourcing data to (authorised) custom
           services.
         * a 'workqueue' interface provides full access to the work queue and routing
           framework to (authorised) services, so for example other worklist handlers
           can be implemented.


   YAWL PROCESS EDITOR: A new version of the YAWL Process Editor (2.0 beta) has been
   released and should be used to design new processes for the new engine version.


3. DEPRECATED SERVICES
----------------------
   A zip is provided in the distribution that contains 3 deprecated wars:

    - WORKLIST: Replaced by the resource service's integrated workist.
    - YAWLXFORMS: No longer required (the resource service generates its own forms).
    - TIMESERVICE: No longer required, since tasks can now have their own inbuilt timers.

   The deprecated services are still operational and may be used if desired. For
   example, the old worklist (which needs YawlXForms to run) can still be used to
   view and manage processes (but of course without any resourcing capabilities), and
   the time service can be used as before, especially where old process definitions
   rely on it.

   With the final 2.0 release, these services will be compiled one last time and
   released as deprecated services, and their source code will be moved from the
   YAWL codebase.

   Note: The old ADMINTOOL package has been superseded by the admin facilities of the
   Resource Service. AdminTool was no longer compatible with the engine and has been
   removed from the codebase.


4. CURRENT KNOWN LIMITATIONS
----------------------------
   This beta version ships with the current *known* limitations listed below. All will
   be resolved in the final release.

   - The resource service's worklist and admin pages render correctly in all tested
     browsers (Firefox, Opera and Safari on Win & OSX) *except* Microsoft Internet
     Explorer.

   - The dynamic forms generated for workitems in the resource service's worklist do not
     yet support data schema's with simple type enumerations and restrictions.

   - There is an occasional issue in dynamic forms containing complex types that allow
     users to dynamically the increase the number of instances, where fields are not
     replicated correctly if data has previously been input into some of the fields.

   - The 'New Instance' button on the Started work queue, which provides for the
     dynamic creation of new workitem instances for multiple atomic tasks that allow
     dynamic creation, is not currently operational (ie. it does nothing).


   The YAWL EDITOR currently has these known limitations:

   - late-binding of resourcing information to a net-level variable doesn't work
     correctly.

   - in the Resources Wizard if another application is maximized on the foreground, the
     dialogs for resource managing disappear, thus losing the data that has been
     currently inserted in the  dialogs.

   - in the Resources Wizard, permission to pile tasks cannot be given for a task.

   - once a decomposition for a task is set to manual, there is no way in the editor to
     set it back to automated.

   - timer expiry can only be expressed as a duration, but not as a specific date-time.

   - late-binding of timer data to a net variable is not supported.

   - the versioning of specifications does not work. It is not automatically increased
     in the Export Spec dialog box, and any change in the version number is not reflected
     in the exported specification.

   - if an org model does not feature any participants but only roles, the wizard does
     not work.

   - when "retain familiar" and "4-eye principle" are ticked in Step 3 of the wizard,
     they remain ticked, no matter if they are unticked, i.e. it is not possible to undo
     this choice

   - an exception is thrown in the editor if a name uses the "&" symbol. As a result, the
     resource wizard does not show up.

   - on export, an exception is thrown if the queries of a MI task are not specified.
     The XML is exported as an empty file (it only contains the word NULL).

   - when a net is created with one automated task (ie. Manage Resourcing is not
     selected). On exporting to xml, the xml correctly marked the decomposition as
     'automated'. If then a second task is added and set with some basic resourcing
     requirements, then exported, the decompositions for BOTH tasks are now set to
     'manual', even though the first task was not touched.

   - it is not possible to remove a decomposition from a task unless the task is removed
     from the net.

   - when a decomposition is changed, the label is not updated.


   Please report any bugs or problems via the YAWL sourceforge page:

                    http://sourceforge.net/projects/yawl


              /*************************************************/
