<!-- $Id$ -->
<project name="YAWL Runtime" default="buildWebApps" basedir="./..">

    <!-- ========================== Properties ================================= -->

    <property name="app.version" value="_2.1"/>
    <property name="developer.name" value="Michael Adams, Lachlan Aldred, Andrew Hastie,
                                           Mike Fowler et al."/>

    <!-- Tomcat properties -->
    <property name="manager.url" value="http://localhost:8080/manager"/>   <!-- Keep -->
    <property file="./build/build.properties"/>

    <!-- AJH - New lines for Tomcat/Ant iface -->
    <property name="tomcat_manager_url"
              value="${tomcat.protocol}://${tomcat.address}:${tomcat.port}/manager"/>

    <!-- Access the environment -->
    <property environment="env"/>

    <!-- Tomcat Root -->
    <condition property="CATALINA_HOME" value="${env.CATALINA_HOME}">
        <isset property="env.CATALINA_HOME"/>
    </condition>
    <condition property="CATALINA_HOME" value="${catalina.home}">
        <and>
            <not>
                <isset property="env.CATALINA_HOME"/>
            </not>
            <isset property="catalina.home"/>
        </and>
    </condition>

    <!-- Source and resource directories -->
    <property name="build.dir" value="build"/>
    <property name="classes.dir" value="classes"/>
    <property name="graphics.dir" value="graphics"/>
    <property name="output.dir" value="output"/>
    <property name="schema.dir" value="schema"/>
    <property name="src.dir" value="src"/>
    <property name="test.dir" value="test"/>
    <property name="lib.dir" value="${build.dir}/3rdParty/lib"/>
    <property name="properties.dir" value="${build.dir}/properties"/>     <!-- AJH -->
    <property name="javadoc.dir" value="${output.dir}/javadoc"/>
    <property name="webapps.dir" value="${CATALINA_HOME}/webapps"/>
    <property name="enumeratedClasses" value="${build.dir}/3rdParty/enumerated3rdPartyClasses"/>
    <property name="packageRoot" value="/org/yawlfoundation/yawl"/>
    <property name="webinf.dir" value="/WEB-INF/classes${packageRoot}"/>

    <!-- Application names -->
    <property name="yawl.eng.app.name" value="yawl"/>
    <property name="yawl.webService.app.name" value="yawlWSInvoker"/>
    <property name="yawl.smsService.app.name" value="yawlSMSInvoker"/>
    <property name="yawl.xforms.app.name" value="yawlXForms"/>
    <property name="yawl.worklet.app.name" value="workletService"/>
    <property name="yawl.resource.app.name" value="resourceService"/>
    <property name="yawl.monitor.app.name" value="monitorService"/>
    <property name="yawl.digitalSignature.app.name" value="digitalSignature"/>
    <property name="yawl.mailSender.app.name" value="mailSender"/>


    <!-- The various Hibernate database types. Set the property database.type to the
         required database type in build.properties -->
    <condition property="use_mysql" value="true">
        <equals arg1="${database.type}" arg2="mysql" />
    </condition>
    <condition property="use_hypersonic" value="true">
        <equals arg1="${database.type}" arg2="hypersonic" />
    </condition>
    <condition property="use_postgres7" value="true">
        <equals arg1="${database.type}" arg2="postgres7" />
    </condition>
    <condition property="use_postgres8" value="true">
        <or>
            <equals arg1="${database.type}" arg2="postgres8" />
            <equals arg1="${database.type}" arg2="postgres" />
            <not>
                <isset property="database.type"/>
            </not>
        </or>
    </condition>


    <!-- References to third party jars. NOTE: All updated or added jars should
         be listed here and referenced from here -->
    <property name="activation"            value="activation.jar"/>
    <property name="antlr"                 value="antlr-2.7.6.jar"/>
    <property name="apacheSoap"            value="apache_soap-2_3_1.jar"/>
    <property name="asm"                   value="asm.jar"/>
    <property name="axis"                  value="axis-1.1RC2.jar"/>
    <property name="axisAnt"               value="axis-1_1RC2-ant.jar"/>
    <property name="bcmail"                value="bcmail-jdk15-139.jar"/>
    <property name="bcprov"                value="bcprov-jdk15-139.jar"/>
    <property name="cglib"                 value="cglib-2.2.jar"/>
    <property name="common"                value="common.jar"/>
    <property name="commonsBeanutils"      value="commons-beanutils.jar"/>
    <property name="commonsCodec"          value="commons-codec-1.4.jar"/>
    <property name="commonsCollections"    value="commons-collections-3.2.jar"/>
    <property name="commonsDigester"       value="commons-digester.jar"/>
    <property name="commonsDiscovery"      value="commons-discovery.jar"/>
    <property name="commonsFileupload"     value="commons-fileupload-1.1.jar"/>
    <property name="commonsIO"             value="commons-io-1.1.jar"/>
    <property name="commonsLang"           value="commons-lang-2.3.jar"/>
    <property name="commonsLogging"        value="commons-logging-1.1.jar"/>
    <property name="dom4j"                 value="dom4j-1.6.1.jar"/>
    <property name="ecore"                 value="ecore.jar"/>
    <property name="ehcache"               value="ehcache-1.3.0.jar"/>
    <property name="hibernate"             value="hibernate3.jar"/>
    <property name="hsql"                  value="hsqldb.jar"/>
    <property name="itext"                 value="itext-1.4.jar"/>
    <property name="jaxenFull"             value="jaxen-full.jar"/>
    <property name="javaAssist"            value="javassist-3.9.0.GA.jar"/>
    <property name="jaxp-api"              value="jaxp-api.jar"/>
    <property name="jaxrpc"                value="jaxrpc.jar"/>
    <property name="jcommon"               value="jcommon-1.0.0-rc1.jar"/>
    <property name="jdom"                  value="jdom.jar"/>
    <property name="jfreechart"            value="jfreechart-1.0.0-rc1.jar"/>
    <property name="jsf-api"               value="jsf-api.jar"/>
    <property name="jsf-appbase"           value="appbase.jar"/>
    <property name="jsf-cl"                value="jsfcl.jar"/>
    <property name="jsf-dataprovider"      value="dataprovider.jar"/>
    <property name="jsf-defaulttheme-gray" value="defaulttheme-gray.jar"/>
    <property name="jsf-errorhandler"      value="errorhandler.jar"/>
    <property name="jsf-impl"              value="jsf-impl.jar"/>
    <property name="jstl"                  value="jstl.jar"/>
    <property name="jsf-rowset"            value="rowset.jar"/>
    <property name="jsf-standard"          value="standard.jar"/>
    <property name="jsf-webui"             value="webui.jar"/>
    <property name="jta"                   value="jta-1.1.jar"/>
    <property name="junit"                 value="junit-4.5.jar"/>
    <property name="log4j"                 value="log4j-1.2.16.jar"/>
    <property name="odmg"                  value="odmg-3.0.jar"/>
    <property name="optional"              value="optional-1_5_1.jar"/>
    <property name="postgres7"             value="postgresql-7.4.5.jdbc.jar"/>
    <property name="postgres8"             value="postgresql-8.3-603.jdbc3.jar"/>
    <property name="mail"                  value="mail.jar"/>
    <property name="mysql"                 value="mysql-connector-java-5.1.6-bin.jar"/>
    <property name="qname"                 value="qname-from-wsdl4j-20030807.jar"/>
    <property name="resolver"              value="resolver.jar"/>
    <property name="saaj"                  value="saaj.jar"/>
    <property name="sax"                   value="sax.jar"/>
    <property name="saxon"                 value="saxon9.jar"/>
    <property name="saxonapi"              value="saxon9-s9api.jar"/>
    <property name="saxondom"              value="saxon9-dom.jar"/>
    <property name="saxonjdom"             value="saxon9-jdom.jar"/>
    <property name="saxpath"               value="saxpath.jar"/>
    <property name="serializer"            value="serializer.jar"/>
    <property name="servlet"               value="servlet-api.jar"/>
    <property name="slf4j"                 value="slf4j-api-1.6.0.jar"/>
    <property name="slf4j-log4j"           value="slf4j-log4j12-1.6.0.jar"/>
    <property name="soaprmi"               value="soaprmi-1_1.jar"/>
    <property name="twitter4j"             value="twitter4j-2.0.8.jar"/>
    <property name="wsdl4j"                value="wsdl4j-20030807.jar"/>
    <property name="wsif"                  value="wsif.jar"/>
    <property name="wsif-j2c"              value="wsif-j2c.jar"/>
    <property name="xerces"                value="xercesImpl.jar"/>
    <property name="xml-apis"              value="xml-apis.jar"/>
    <property name="xmlParserAPIs"         value="xmlParserAPIs-2_2_1.jar"/>
    <property name="xsd"                   value="xsd.jar"/>
    <property name="xsd.resources"         value="xsd.resources.jar"/>

    <!-- jar groups -->
    <property name="persistence.libs"
              value="${antlr} ${commonsCollections} ${commonsLogging} ${dom4j}
                     ${ehcache} ${hibernate} hibernate.cfg.xml ${jta} ${odmg}
                     ${slf4j} ${javaAssist} ${slf4j-log4j}"/>
<!-- ${asm}  ${cglib} -->
	  <property name="xsd.libs"
                value="${common} ${ecore} ${xsd} ${xsd.resources}"/>

    <property name="jsf.libs"
              value="${jsf-appbase} ${jsf-api} ${jsf-impl} ${jsf-cl} ${jsf-webui}
                     ${commonsDigester} ${commonsBeanutils} ${commonsFileupload}
                     ${commonsIO} ${jsf-standard} ${jstl} ${jsf-rowset}
                     ${jsf-dataprovider} ${jsf-errorhandler} ${jsf-defaulttheme-gray}"/>

    <property name="wsif.libs"
              value="${wsif} ${axis} ${commonsDiscovery} ${commonsLogging}
                     ${jaxrpc} ${saaj} ${wsdl4j} ${xmlParserAPIs}"/>

    <property name="common.libs"
              value="${junit} ${saxon} ${jdom} ${servlet} ${log4j}"/>

    <property name="saxon.libs"
              value="${saxon} ${saxondom} ${saxonapi} ${saxonjdom}"/>

    <property name="xerces.libs"
              value="${xerces} ${resolver} ${xml-apis} ${serializer}" />


    <!-- ==================== Compilation Classpath =========================== -->

    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
    <path id="cp.compile">
        <pathelement location="${lib.dir}/${junit}"/>
        <pathelement location="${lib.dir}/${xerces}"/>
        <pathelement location="${lib.dir}/${xml-apis}"/>
        <pathelement location="${lib.dir}/${resolver}"/>
        <pathelement location="${lib.dir}/${serializer}"/>
        <pathelement location="${lib.dir}/${saxon}"/>
        <pathelement location="${lib.dir}/${saxonapi}"/>
        <pathelement location="${lib.dir}/${saxondom}"/>
        <pathelement location="${lib.dir}/${saxonjdom}"/>
        <pathelement location="${lib.dir}/${jdom}"/>
        <pathelement location="${lib.dir}/${servlet}"/>
        <pathelement location="${lib.dir}/${log4j}"/>

        <!-- Include all elements that Tomcat exposes to applications -->
        <pathelement location="${CATALINA_HOME}/lib"/>

        <!--<pathelement location="${CATALINA_HOME}/common/classes"/>-->
        <!--<fileset dir="${CATALINA_HOME}/common/endorsed">-->
            <!--<include name="*.jar"/>-->
        <!--</fileset>-->
        <!--<fileset dir="${CATALINA_HOME}/common/lib">-->
            <!--<include name="*.jar"/>-->
        <!--</fileset>-->
        <!--<pathelement location="${CATALINA_HOME}/shared/classes"/>-->
        <!--<fileset dir="${CATALINA_HOME}/shared/lib">-->
            <!--<include name="*.jar"/>-->
        <!--</fileset>-->
    </path>

    <path id="cp.standard">
        <pathelement path="${classes.dir}"/>
    </path>

    <path id="cp.wsif">
        <pathelement location="${lib.dir}/${wsif}"/>
        <pathelement location="${lib.dir}/${axis}"/>
        <pathelement location="${lib.dir}/${commonsDiscovery}"/>
        <pathelement location="${lib.dir}/${commonsLogging}"/>
        <pathelement location="${lib.dir}/${jaxrpc}"/>
        <pathelement location="${lib.dir}/${saaj}"/>
        <pathelement location="${lib.dir}/${wsdl4j}"/>
        <pathelement location="${lib.dir}/${xmlParserAPIs}"/>
    </path>

    <path id="cp.xsd">
        <pathelement location="${lib.dir}/${common}"/>
        <pathelement location="${lib.dir}/${ecore}"/>
        <pathelement location="${lib.dir}/${xsd}"/>
        <pathelement location="${lib.dir}/${xsd.resources}"/>
    </path>

    <path id="cp.persist">
        <pathelement location="${lib.dir}/${asm}"/>
        <pathelement location="${lib.dir}/${antlr}"/>
        <pathelement location="${lib.dir}/${cglib}"/>
        <pathelement location="${lib.dir}/${commonsCollections}"/>
        <pathelement location="${lib.dir}/${dom4j}"/>
        <pathelement location="${lib.dir}/${ehcache}"/>
        <pathelement location="${lib.dir}/${hibernate}"/>
        <pathelement location="${lib.dir}/${jta}"/>
        <pathelement location="${lib.dir}/${odmg}"/>
        <pathelement location="${lib.dir}/${hsql}"/>
        <pathelement location="${lib.dir}/${postgres7}"/>
        <pathelement location="${lib.dir}/${postgres8}"/>
        <pathelement location="${lib.dir}/${mysql}"/>
    </path>

    <path id="cp.apacheCommons">
        <pathelement location="${lib.dir}/${commonsBeanutils}"/>
        <pathelement location="${lib.dir}/${commonsLang}"/>
        <pathelement location="${lib.dir}/${commonsDigester}"/>
        <pathelement location="${lib.dir}/${commonsFileupload}"/>
        <pathelement location="${lib.dir}/${commonsIO}"/>
        <pathelement location="${lib.dir}/${commonsCodec}"/>
    </path>

    <path id="cp.jsf">
        <pathelement location="${lib.dir}/${jsf-appbase}"/>
        <pathelement location="${lib.dir}/${jsf-api}"/>
        <pathelement location="${lib.dir}/${jsf-cl}"/>
        <pathelement location="${lib.dir}/${jsf-impl}"/>
        <pathelement location="${lib.dir}/${jsf-webui}"/>
        <pathelement location="${lib.dir}/${jsf-standard}"/>
        <pathelement location="${lib.dir}/${jstl}"/>
        <pathelement location="${lib.dir}/${jsf-rowset}"/>
        <pathelement location="${lib.dir}/${jsf-dataprovider}"/>
        <pathelement location="${lib.dir}/${jsf-errorhandler}"/>
        <pathelement location="${lib.dir}/${jsf-defaulttheme-gray}"/>
    </path>

    <path id="cp.ds">
        <pathelement location="${lib.dir}/${bcmail}"/>
        <pathelement location="${lib.dir}/${bcprov}"/>
    </path>

    <path id="cp.mail">
            <pathelement location="${lib.dir}/${mail}"/>
            <pathelement location="${lib.dir}/${activation}"/>
    </path>

    <path id="cp.etc">
            <pathelement location="${lib.dir}/${twitter4j}"/>
    </path>

    <!-- ============================ Targets =================================== -->

    <!--
    Copying examples and schema files
    -->
    <target name="copy">
        <copy todir="./exampleSpecs/xml">
            <fileset dir="./schema" includes="*.xsd"/>
        </copy>
        <copy todir="${src.dir}${packageRoot}/unmarshal">
            <fileset dir="${schema.dir}" includes="*.xsd"/>
        </copy>
        <copy todir="${test.dir}${packageRoot}/unmarshal">
            <fileset dir="./exampleSpecs/xml" includes="MakeRecordings.xml"/>
        </copy>
        <copy todir="${test.dir}${packageRoot}/engine">
            <fileset dir="./exampleSpecs/xml" includes="MakeRecordings(Beta4).xml"/>
        </copy>
    </target>

    <!--
    Clean build environment
    Deletes directories and intermediate files.
    -->
    <target name="clean" depends="copy">
        <delete dir="${classes.dir}"/>
        <delete dir="${output.dir}"/>
    </target>

    <!--
  	Initialise build environment
    Creates necessary directories prior to building.
  	-->
    <target name="init" depends="clean">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${output.dir}"/>
        <mkdir dir="${javadoc.dir}"/>
    </target>

    <!--
    Compile all source
    Compiles main project source into ${classes.dir}.
    -->
    <target name="compile" depends="init">
        <javac srcdir="${src.dir}" debug="true" destdir="${classes.dir}"
               excludes="org/yawlfoundation/yawl/xformsupload/**">
            <classpath refid="cp.standard"/>
            <classpath refid="cp.compile"/>
            <classpath refid="cp.wsif"/>
            <classpath refid="cp.xsd"/>
            <classpath refid="cp.persist"/>
            <classpath refid="cp.apacheCommons"/>
            <classpath refid="cp.jsf"/>
            <classpath refid="cp.ds"/>
            <classpath refid="cp.mail"/>
            <classpath refid="cp.etc"/>
        </javac>

        <!-- copy in non-java files from source (ie. files that don't need compiling) -->
        <copy todir="${classes.dir}">
            <fileset dir="${src.dir}" excludes="**/*.java"/>
        </copy>

        <!-- Copy and patch Log4J properties file in for free-standing engine -->
        <copy file="${properties.dir}/log4j.properties"
              todir="${classes.dir}" overwrite="true" />
    </target>


    <!-- Ascertain which Hibernate properties file to deploy for persistence -->
    <target name="decideDatabaseType">
        <condition property="using_postgres7" value="true">
            <and>
                <contains string="${use_postgres7}" substring="true"/>
            </and>
        </condition>
        <condition property="using_postgres8" value="true">
            <and>
                <contains string="${use_postgres8}" substring="true"/>
            </and>
        </condition>
        <condition property="using_mysql" value="true">
            <and>
                <contains string="${use_mysql}" substring="true"/>
            </and>
        </condition>
        <condition property="using_hypersonic" value="true">
            <and>
                <contains string="${use_hypersonic}" substring="true"/>
            </and>
        </condition>

        <antcall target="hibernate_postgres7"/>
        <antcall target="hibernate_postgres8"/>
        <antcall target="hibernate_mysql"/>
    </target>


    <!--
    Build the application jar/war files
    Creates a jar file for the main application sources.
    -->
    <target name="build_Standalone" depends="compile">
        <mkdir dir="${enumeratedClasses}"/>
        <unzip dest="${enumeratedClasses}">
            <fileset dir="${lib.dir}"
                     includes="${persistence.libs} ${xsd.libs} ${common.libs} ${jcommon}
                               ${jfreechart} ${jaxenFull} ${postgres8} ${saxpath}
                               ${xml-apis} ${saxon.libs} ${xerces.libs} ${commonsLang}
                               ${commonsCodec}"
                     excludes="hibernate.cfg.xml ${servlet}"/>
        </unzip>

        <!-- Create a self contained jar of the YAWL library -->
        <antcall target="decideDatabaseType"/>
        <jar destfile="${output.dir}/YAWL${app.version}_Standalone.jar">
            <fileset dir="${classes.dir}"  excludes="junit junit3.8.1"/>
            <fileset dir="${enumeratedClasses}"/>
            <manifest>
                <attribute name="Created-By" value="${developer.name}"/>
                <attribute name="Main-Class"
                           value="org/yawlfoundation/yawl/engine/gui/TabbedEngineGUI"/>
            </manifest>
        </jar>
        <checksum file="${output.dir}/YAWL${app.version}_Standalone.jar"/>
        <delete dir="${enumeratedClasses}"/>
    </target>


    <!--
    Build the application jar/war files
    Creates a jar file for the main application sources.
    -->
    <target name="build_sourcecode" depends="compile">
        <copy todir="${classes.dir}">
            <fileset dir="${test.dir}" excludes="**/*.java"/>
        </copy>
        <copy todir="${output.dir}/engine/src">
            <fileset dir="${src.dir}"/>
        </copy>
        <copy todir="${output.dir}/engine/build">
            <fileset dir="${build.dir}"/>
        </copy>
        <copy todir="${output.dir}/engine/exampleSpecs">
            <fileset dir="exampleSpecs"/>
        </copy>
        <copy todir="${output.dir}/engine/graphics">
            <fileset dir="${graphics.dir}"/>
        </copy>
        <copy todir="${output.dir}/engine/schema">
            <fileset dir="${schema.dir}"/>
        </copy>
        <jar destfile="${output.dir}/YAWL${app.version}_SRC.zip" excludes="">
            <fileset dir="${output.dir}/engine"/>
        </jar>
        <copy todir="${output.dir}/engine/test">
            <fileset dir="${test.dir}"/>
        </copy>
        <jar destfile="${output.dir}/YAWL${app.version}_SourceAndTestCode.zip">
            <fileset dir="${output.dir}/engine"/>
        </jar>
        <checksum file="${output.dir}/YAWL${app.version}_SourceAndTestCode.zip"/>
        <delete dir="${output.dir}/engine"/>
    </target>


    <target name="BuildYawlStuff">
        <jar destfile="YAWLStuff.zip">
            <fileset dir="${output.dir}"/>
        </jar>
    </target>


    <!-- Build the engine (yawl.war) -->
    <target name="build_engine.war" depends="compile">
        <copy todir="${yawl.eng.app.name}${webinf.dir}/authentication">
            <fileset dir="${classes.dir}${packageRoot}/authentication"
                     includes="*.class *.hbm.xml"/>
        </copy>
        <copy todir="${yawl.eng.app.name}${webinf.dir}/elements">
            <fileset dir="${classes.dir}${packageRoot}/elements"
                     includes="**/*.class **/*.hbm.xml"/>
        </copy>
        <copy todir="${yawl.eng.app.name}${webinf.dir}/engine">
            <fileset dir="${classes.dir}${packageRoot}/engine"
                     includes="**/*.class **/*.hbm.xml *.properties"/>
        </copy>
        <copy todir="${yawl.eng.app.name}${webinf.dir}/exceptions">
            <fileset dir="${classes.dir}${packageRoot}/exceptions"
                     includes="*.class *.hbm.xml"/>
        </copy>
        <copy todir="${yawl.eng.app.name}${webinf.dir}/logging">
            <fileset dir="${classes.dir}${packageRoot}/logging"
                     includes="*.class *.hbm.xml"/>
        </copy>
        <copy todir="${yawl.eng.app.name}${webinf.dir}/logging/table">
            <fileset dir="${classes.dir}${packageRoot}/logging/table"
                     includes="*.class *.hbm.xml"/>
        </copy>
        <copy todir="${yawl.eng.app.name}${webinf.dir}/schema">
            <fileset dir="${classes.dir}${packageRoot}/schema"
                     includes="*.class"/>
        </copy>
        <copy todir="${yawl.eng.app.name}${webinf.dir}/unmarshal">
            <fileset dir="${classes.dir}${packageRoot}/unmarshal"
                     includes="*.class *.xsd"/>
        </copy>
        <copy todir="${yawl.eng.app.name}${webinf.dir}/util">
            <fileset dir="${classes.dir}${packageRoot}/util"
                     includes="*.class"/>
        </copy>

        <copy file="${properties.dir}/log4j.properties"
              todir="${yawl.eng.app.name}/WEB-INF/classes"/>
        <copy todir="${yawl.eng.app.name}/WEB-INF"
              file="${build.dir}/engine/web.xml"/>

        <copy todir="${yawl.eng.app.name}/WEB-INF/lib">
            <fileset dir="${lib.dir}"
                     includes="${persistence.libs} ${xsd.libs} ${common.libs} ${xerces.libs}
                     ${jaxenFull} ${jcommon} ${postgres8} ${saxpath} ${saxon.libs}
                     ${commonsLang} ${commonsCodec}"
                     excludes="${servlet}"/>
        </copy>

        <propertyfile file="${build.dir}/engine/version.properties">
            <entry key="Version" value="${app.version}"/>
            <entry key="BuiltBy" value="${user.name}"/>
            <entry key="BuildDate" type="date" value="now"/>
            <entry key="BuildNumber" default="0" type="int" operation="+" value="1"/>
            <entry key="JavaVersion" value="${java.version}"/>
            <entry key="OS" value="${os.name}"/>
            <entry key="OSVersion" value="${os.version}"/>
        </propertyfile>

        <copy file="${build.dir}/engine/version.properties"
            tofile="${yawl.eng.app.name}/WEB-INF/classes/version.properties"/>

        <antcall target="decideDatabaseType"/>
        <jar destfile="${output.dir}/yawl.war">
            <fileset dir="${yawl.eng.app.name}"/>
        </jar>
        <checksum file="${output.dir}/yawl.war"/>
        <delete dir="${yawl.eng.app.name}"/>
    </target>


    <target name="hibernate_postgres7" if="using_postgres7">
        <echo message="Copying Hibernate properties for PostgreSQL7"/>
        <copy file="${lib.dir}/${postgres7}" todir="${yawl.eng.app.name}/WEB-INF/lib"/>
        <copy file="${properties.dir}/hibernate.properties.postgres7"
              tofile="${yawl.eng.app.name}/WEB-INF/classes/hibernate.properties"/>
        <copy file="${properties.dir}/hibernate.properties.postgres7"
              tofile="${classes.dir}/hibernate.properties"/>
    </target>

    <target name="hibernate_postgres8" if="using_postgres8">
        <echo message="Copying Hibernate properties for PostgreSQL8"/>
        <copy file="${lib.dir}/${postgres8}" todir="${yawl.eng.app.name}/WEB-INF/lib"/>
        <copy file="${properties.dir}/hibernate.properties.postgres8"
              tofile="${yawl.eng.app.name}/WEB-INF/classes/hibernate.properties"/>
        <copy file="${properties.dir}/hibernate.properties.postgres8"
              tofile="${classes.dir}/hibernate.properties"/>
    </target>

    <target name="hibernate_mysql" if="using_mysql">
        <echo message="Copying Hibernate properties for MySQL"/>
        <copy file="${lib.dir}/${mysql}" todir="${yawl.eng.app.name}/WEB-INF/lib"/>
        <copy file="${properties.dir}/hibernate.properties.mysql"
              tofile="${yawl.eng.app.name}/WEB-INF/classes/hibernate.properties"/>
        <copy file="${properties.dir}/hibernate.properties.mysql"
              tofile="${classes.dir}/hibernate.properties"/>
    </target>


    <!-- Build the YAWL Web Service Invoker WebApplication -->
    <target name="build_yawlWSInvoker.war" depends="compile">
        <copy todir="${yawl.webService.app.name}${webinf.dir}/elements">
            <fileset dir="${classes.dir}${packageRoot}/elements" includes="**/*.class **/*.xsd"/>
        </copy>
        <copy todir="${yawl.webService.app.name}${webinf.dir}/engine"
              file="${classes.dir}${packageRoot}/engine/YSpecificationID.class"/>
        <copy todir="${yawl.webService.app.name}${webinf.dir}/util">
            <fileset dir="${classes.dir}${packageRoot}/util"
                     includes="JDOMUtil.class StringUtil.class
                               CharsetFilter.class PasswordEncryptor.class"/>
        </copy>
        <copy todir="${yawl.webService.app.name}${webinf.dir}/unmarshal">
            <fileset dir="${classes.dir}${packageRoot}/unmarshal"
                includes="YDecompositionParser.class"/>
            <fileset dir="${schema.dir}" includes="*.xsd"/>
        </copy>
        <copy todir="${yawl.webService.app.name}/WEB-INF/lib">
            <fileset dir="${lib.dir}"
                     includes="${wsif.libs} ${apacheSoap} ${axisAnt} ${jdom} ${log4j}
                               ${optional} ${qname} ${soaprmi} ${wsif-j2c} ${xerces}
                               ${commonsCodec} README.html"/>
        </copy>

        <copy file="${properties.dir}/log4j.properties"
              todir="${yawl.webService.app.name}/WEB-INF/classes"/>

        <copy todir="${yawl.webService.app.name}${webinf.dir}/engine/interfce">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce"/>
        </copy>

        <copy todir="${yawl.webService.app.name}${webinf.dir}/engine/interfce/interfaceA">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce/interfaceA"/>
        </copy>
        <copy todir="${yawl.webService.app.name}${webinf.dir}/engine/interfce/interfaceB">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce/interfaceB"/>
        </copy>

        <copy todir="${yawl.webService.app.name}${webinf.dir}/exceptions">
             <fileset dir="${classes.dir}${packageRoot}/exceptions"
                      includes="*.class *.hbm.xml"/>
        </copy>

        <!-- copy all major support classes into webapp -->
        <copy todir="${yawl.webService.app.name}${webinf.dir}/wsif">
            <fileset dir="${classes.dir}${packageRoot}/wsif">
                <include name="*.class"/>
            </fileset>
        </copy>
        <copy todir="${yawl.webService.app.name}">
            <fileset dir="${classes.dir}${packageRoot}/wsif">
                <include name="*.jsp"/>
            </fileset>
        </copy>
         <copy todir="${yawl.webService.app.name}/WEB-INF">
            <fileset file="${build.dir}/${yawl.webService.app.name}/web.xml"/>
        </copy>
        <!-- prepare Web ARchive file -->
        <jar destfile="${output.dir}/${yawl.webService.app.name}.war">
            <fileset dir="${yawl.webService.app.name}"/>
        </jar>
        <checksum file="${output.dir}/${yawl.webService.app.name}.war"/>
        <delete dir="${yawl.webService.app.name}"/>
    </target>


    <!-- Build the YAWL SMS Service Invoker WebApplication -->
    <target name="build_yawlSMSInvoker.war" depends="compile">
        <copy todir="${yawl.smsService.app.name}${webinf.dir}/elements">
            <fileset dir="${classes.dir}${packageRoot}/elements"
                     includes="**/*.class **/*.xsd"/>
        </copy>
        <copy todir="${yawl.smsService.app.name}${webinf.dir}/engine"
              file="${classes.dir}${packageRoot}/engine/YSpecificationID.class"/>
        <copy todir="${yawl.smsService.app.name}${webinf.dir}/util">
            <fileset dir="${classes.dir}${packageRoot}/util"
                     includes="JDOMUtil.class StringUtil.class
                               CharsetFilter.class PasswordEncryptor.class"/>
        </copy>
        <copy todir="${yawl.smsService.app.name}${webinf.dir}/unmarshal">
            <fileset
                dir="${classes.dir}${packageRoot}/unmarshal"
                includes="YDecompositionParser.class"/>
            <fileset dir="${schema.dir}" includes="*.xsd"/>
        </copy>
        <copy todir="${yawl.smsService.app.name}/WEB-INF/lib">
            <fileset dir="${lib.dir}" includes="${jdom} ${log4j} ${commonsCodec}"/>
        </copy>

        <copy file="${properties.dir}/log4j.properties"
              todir="${yawl.smsService.app.name}/WEB-INF/classes"/>

        <copy todir="${yawl.smsService.app.name}${webinf.dir}/engine/interfce">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce"/>
        </copy>
        <copy todir="${yawl.smsService.app.name}${webinf.dir}/engine/interfce/interfaceA">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce/interfaceA"/>
        </copy>
        <copy todir="${yawl.smsService.app.name}${webinf.dir}/engine/interfce/interfaceB">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce/interfaceB"/>
        </copy>

        <!-- copy all supportive jsps & graphis into webapp -->
        <copy todir="${yawl.smsService.app.name}">
            <fileset dir="${classes.dir}${packageRoot}/smsModule">
                <exclude name="*.class"/>
            </fileset>
        </copy>
        <copy todir="${yawl.smsService.app.name}/graphics">
            <fileset dir="${graphics.dir}"/>
        </copy>
        <!-- copy all major support classes into webapp -->
        <copy todir="${yawl.smsService.app.name}${webinf.dir}/smsModule">
            <fileset dir="${classes.dir}${packageRoot}/smsModule">
                <include name="*.class"/>
            </fileset>
        </copy>
        <copy todir="${yawl.smsService.app.name}${webinf.dir}/exceptions">
            <fileset dir="${classes.dir}${packageRoot}/exceptions"
                includes="YAWLException.class"/>
        </copy>
        <copy todir="${yawl.smsService.app.name}/WEB-INF">
            <fileset file="${build.dir}/${yawl.smsService.app.name}/web.xml"/>
        </copy>
        <!-- prepare Web Archive file -->
        <jar destfile="${output.dir}/${yawl.smsService.app.name}.war">
            <fileset dir="${yawl.smsService.app.name}"/>
        </jar>
        <checksum file="${output.dir}/${yawl.smsService.app.name}.war"/>
        <delete dir="${yawl.smsService.app.name}"/>
    </target>


	<!-- Build the WorkletService war file  -->
    <target name="build_workletService.war" depends="compile">

        <!-- 1. Copy required yawl classes into dir structure -->
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/authentication">
            <fileset dir="${classes.dir}${packageRoot}/authentication"
                     includes="YClient.class"/>
        </copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/engine/interfce">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce"/>
        </copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/engine"
              file="${classes.dir}${packageRoot}/engine/YSpecificationID.class"/>

        <copy todir="${yawl.worklet.app.name}${webinf.dir}/elements">
            <fileset dir="${classes.dir}${packageRoot}/elements"
                     includes="*.class" />
        </copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/elements/data">
            <fileset dir="${classes.dir}${packageRoot}/elements/data"
                     includes="YParameter.class YVariable.class"/>
        </copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/elements/state">
            <fileset dir="${classes.dir}${packageRoot}/elements/state"
                     includes="YIdentifier.class"/>
        </copy>
    	  <copy todir="${yawl.worklet.app.name}${webinf.dir}/exceptions">
    	   <fileset dir="${classes.dir}${packageRoot}/exceptions"
    	            includes="*.class" />
      	</copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/logging">
           <fileset dir="${classes.dir}${packageRoot}/logging"
                    includes="YLogDataItem.class YLogDataItemList.class YLogPredicate.class" />
        </copy>
      	<copy todir="${yawl.worklet.app.name}${webinf.dir}/schema">
      	   <fileset dir="${classes.dir}${packageRoot}/schema" includes="*.class" />
      	</copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/unmarshal">
            <fileset dir="${classes.dir}${packageRoot}/unmarshal"
                     includes="YDecompositionParser.class SchemaValidator.class
                               SchemaForSchemaValidator.class"/>
            <fileset dir="${schema.dir}" includes="*.xsd"/>
        </copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/util">
              <fileset dir="${classes.dir}${packageRoot}/util"
                       includes="JDOMUtil.class StringUtil.class
                                 CharsetFilter.class PasswordEncryptor.class
                                 HttpURLValidator.class"/>
        </copy>

        <!-- 2. copy worklet classes to relevant dirs -->
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/worklet"
              file="${classes.dir}${packageRoot}/worklet/WorkletService.class"/>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/worklet/rdr">
            <fileset dir="${classes.dir}${packageRoot}/worklet/rdr"
                     includes="*.class"/>
        </copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/worklet/selection">
            <fileset dir="${classes.dir}${packageRoot}/worklet/selection"
                     includes="*.class *.xml"/>
        </copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/worklet/support">
            <fileset dir="${classes.dir}${packageRoot}/worklet/support"
                     includes="*.class *.xml"/>
        </copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/worklet/exception">
            <fileset dir="${classes.dir}${packageRoot}/worklet/exception"
                     includes="*.class *.xml"/>
        </copy>
        <copy todir="${yawl.worklet.app.name}${webinf.dir}/worklet/admin">
            <fileset dir="${classes.dir}${packageRoot}/worklet/admin"
                     includes="*.class *.xml"/>
        </copy>

    	<!-- 2b. Copy required worklet support files into dir root -->
        <copy todir="${yawl.worklet.app.name}"
              file="${build.dir}/workletService/welcome/welcome.htm"/>
        <copy todir="${yawl.worklet.app.name}/repository">
        	<fileset dir="${build.dir}/workletService/repository"/>
        </copy>

        <!-- 2c. Copy in graphics for welcome page -->
        <copy todir="${yawl.worklet.app.name}/graphics">
        	<fileset dir="${build.dir}/workletService/welcome/graphics"/>
        </copy>
        <copy todir="${yawl.worklet.app.name}/graphics" file="${graphics.dir}/common.css"/>
        <copy todir="${yawl.worklet.app.name}/graphics" file="${graphics.dir}/subtext.jpg"/>
        <copy todir="${yawl.worklet.app.name}/graphics" file="${graphics.dir}/yawl.swf"/>

        <!-- 2d. Copy in jsps -->
        <copy todir="${yawl.worklet.app.name}/jsp">
             <fileset dir="${classes.dir}${packageRoot}/worklet/jsp"/>
        </copy>

        <!-- 2e. Copy log4j properties -->
        <copy file="${properties.dir}/log4j.properties"
              todir="${yawl.worklet.app.name}/WEB-INF/classes"/>

        <!-- 2f. Increment the build number -->
        <propertyfile file="${build.dir}/workletService/version.properties">
            <entry key="Version" value="${app.version}"/>
            <entry key="BuiltBy" value="${user.name}"/>
            <entry key="BuildDate" type="date" value="now"/>
            <entry key="BuildNumber" default="0" type="int" operation="+" value="1"/>
            <entry key="JavaVersion" value="${java.version}"/>
            <entry key="OS" value="${os.name}"/>
            <entry key="OSVersion" value="${os.version}"/>
        </propertyfile>

        <copy file="${build.dir}/workletService/version.properties"
            tofile="${yawl.worklet.app.name}/WEB-INF/classes/version.properties"/>


        <!-- 3. Copy required 3rd party libraries into dir structure -->
      	<copy todir="${yawl.worklet.app.name}/WEB-INF/lib">
    	    <fileset dir="${lib.dir}"
                   includes="${persistence.libs} ${xsd.libs} ${jdom} ${log4j}
                             ${postgres8} ${saxon.libs} ${commonsLang} ${commonsCodec}"/>
        </copy>

        <!-- 4. Copy hibernate & postgres files (assumes version 8) -->
        <copy file="${properties.dir}/hibernate.properties.postgres8"
            tofile="${yawl.worklet.app.name}/WEB-INF/classes/hibernate.properties"/>

        <!-- 5. Copy web.xml file into dir structure -->
        <copy todir="${yawl.worklet.app.name}/WEB-INF"
              file="${build.dir}/workletService/web.xml"/>

        <!-- 6. create Web Archive file -->
        <jar destfile="${output.dir}/workletService.war">
            <fileset dir="${yawl.worklet.app.name}"/>
        </jar>
        <checksum file="${output.dir}/workletService.war"/>

        <!-- 7. Remove temp build area -->
        <delete dir="${yawl.worklet.app.name}"/>

    </target>


    <!-- Build the resourceService war file  -->
    <target name="build_resourceService.war" depends="compile">

        <!-- 1. Copy required yawl classes into dir structure -->
        <copy todir="${yawl.resource.app.name}${webinf.dir}/authentication">
            <fileset dir="${classes.dir}${packageRoot}/authentication"
                     includes="YExternalClient.class YClient.class"/>
        </copy>
        <copy todir="${yawl.resource.app.name}${webinf.dir}/engine/interfce">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce"/>
        </copy>
        <copy todir="${yawl.resource.app.name}${webinf.dir}/engine"
              file="${classes.dir}${packageRoot}/engine/YSpecificationID.class"/>

        <copy todir="${yawl.resource.app.name}${webinf.dir}/elements">
            <fileset dir="${classes.dir}${packageRoot}/elements"
                     includes="*.class" />
        </copy>
        <copy todir="${yawl.resource.app.name}${webinf.dir}/elements/data">
            <fileset dir="${classes.dir}${packageRoot}/elements/data"
                     includes="YParameter.class YVariable.class"/>
        </copy>
        <copy todir="${yawl.resource.app.name}${webinf.dir}/elements/state">
            <fileset dir="${classes.dir}${packageRoot}/elements/state"
                     includes="YIdentifier.class"/>
        </copy>
        <copy todir="${yawl.resource.app.name}${webinf.dir}/exceptions">
           <fileset dir="${classes.dir}${packageRoot}/exceptions"
                    includes="YSchemaBuildingException.class YDataStateException.class
                              YSyntaxException.class YAWLException.class YDataQueryException.class
                              YStateException.class YQueryException.class
                              YPersistenceException.class YDataValidationException.class
                              YLogException.class YAuthenticationException.class"/>
        </copy>

        <copy todir="${yawl.resource.app.name}${webinf.dir}/logging">
           <fileset dir="${classes.dir}${packageRoot}/logging"
                    includes="YLogDataItem.class YLogDataItemList.class
                              YLogPredicate.class YLogPredicateParser.class
                              YXESBuilder.class" />
        </copy>

        <copy todir="${yawl.resource.app.name}${webinf.dir}/schema">
           <fileset dir="${classes.dir}${packageRoot}/schema" includes="*.class" />
        </copy>

        <copy todir="${yawl.resource.app.name}${webinf.dir}/unmarshal">
            <fileset dir="${classes.dir}${packageRoot}/unmarshal"
                     includes="YDecompositionParser.class SchemaValidator.class
                               SchemaForSchemaValidator.class XMLValidator.class"/>
            <fileset dir="${schema.dir}" includes="*.xsd"/>
        </copy>

        <copy todir="${yawl.resource.app.name}${webinf.dir}/util">
              <fileset dir="${classes.dir}${packageRoot}/util"
                       includes="JDOMUtil.class StringUtil.class HttpURLValidator.class
                                 CharsetFilter.class DOMUtil.class SaxonUtil.class
                                 InstanceBuilder.class PasswordEncryptor.class
                                 XNode*.class YPredicateParser.class
                                 YDataSchemaCache.class YBuildProperties.class"/>
        </copy>

        <!-- 2. copy resourcing classes to relevant dirs -->
        <copy todir="${yawl.resource.app.name}${webinf.dir}/resourcing">
            <fileset dir="${classes.dir}${packageRoot}/resourcing"
                     includes="**/*.class **/*.xml **/YawlUI.properties"/>
        </copy>

        <!-- 2b. Copy required resourcing support files into dir root -->
        <copy todir="${yawl.resource.app.name}"
              file="${build.dir}/${yawl.resource.app.name}/welcome/welcome.htm"/>

        <!-- 2c. Copy in graphics for welcome page -->
        <copy todir="${yawl.resource.app.name}/graphics">
            <fileset dir="${build.dir}/${yawl.resource.app.name}/welcome/graphics"/>
        </copy>
        <copy todir="${yawl.resource.app.name}/graphics" file="${graphics.dir}/common.css"/>
        <copy todir="${yawl.resource.app.name}/graphics" file="${graphics.dir}/subtext.jpg"/>
        <copy todir="${yawl.resource.app.name}/graphics" file="${graphics.dir}/yawl.swf"/>

        <!-- 2c(i). Copy in resources for jsps -->
        <copy todir="${yawl.resource.app.name}/resources">
            <fileset dir="${build.dir}/${yawl.resource.app.name}/resources"/>
        </copy>

        <!-- 2d. Copy in jsps -->
        <copy todir="${yawl.resource.app.name}">
            <fileset dir="${classes.dir}${packageRoot}/resourcing/jsf/jsp"
                     includes="*.jsp *.jspf *.html"/>
        </copy>

        <!-- 2e. Copy log4j & LDAP Source properties -->
        <copy file="${properties.dir}/log4j.properties"
              todir="${yawl.resource.app.name}/WEB-INF/classes"/>
        <copy file="${classes.dir}${packageRoot}/resourcing/datastore/orgdata/LDAPSource.properties"
              todir="${yawl.resource.app.name}/WEB-INF/classes"/>


        <!-- 3. Copy required 3rd party libraries into dir structure -->
        <copy todir="${yawl.resource.app.name}/WEB-INF/lib">
           <fileset dir="${lib.dir}"
                    includes="${persistence.libs} ${xsd.libs} ${jdom} ${log4j}
                    ${postgres8} ${jsf.libs} ${commonsLang} ${commonsCodec} ${xerces}
                    ${saxon.libs}"/>
        </copy>

        <copy todir="${yawl.resource.app.name}/WEB-INF">
           <fileset dir="${build.dir}/${yawl.resource.app.name}/jsf_xml" includes="*.xml"/>
        </copy>

        <!-- 4. Copy hibernate & postgres files (assumes version 8) -->
        <copy file="${properties.dir}/hibernate.properties.postgres8"
            tofile="${yawl.resource.app.name}/WEB-INF/classes/hibernate.properties"/>

        <!-- 4.5. Increment the build number -->
        <propertyfile file="${build.dir}/${yawl.resource.app.name}/version.properties">
            <entry key="Version" value="${app.version}"/>
            <entry key="BuiltBy" value="${user.name}"/>
            <entry key="BuildDate" type="date" value="now"/>
            <entry key="BuildNumber" default="0" type="int" operation="+" value="1"/>
            <entry key="JavaVersion" value="${java.version}"/>
            <entry key="OS" value="${os.name}"/>
            <entry key="OSVersion" value="${os.version}"/>
        </propertyfile>

        <copy file="${build.dir}/${yawl.resource.app.name}/version.properties"
            tofile="${yawl.resource.app.name}/WEB-INF/classes/version.properties"/>

        <!-- 5. Copy web.xml file into dir structure -->
        <copy todir="${yawl.resource.app.name}/WEB-INF"
              file="${build.dir}/${yawl.resource.app.name}/web.xml"/>

        <!-- 6. create Web Archive file -->
        <jar destfile="${output.dir}/${yawl.resource.app.name}.war">
            <fileset dir="${yawl.resource.app.name}"/>
        </jar>
        <checksum file="${output.dir}/${yawl.resource.app.name}.war"/>

        <!-- 7. Remove temp build area -->
        <delete dir="${yawl.resource.app.name}"/>

    </target>


    <target name="build_YResourceServiceClient.jar" depends="compile">
        <tstamp />
        <mkdir dir="${enumeratedClasses}"/>
        <unzip dest="${enumeratedClasses}">
            <fileset dir="${lib.dir}" includes="${commonsCodec}"/>
        </unzip>

        <jar destfile="${output.dir}/YResourceServiceClient.jar" basedir="${classes.dir}"
                includes="org/yawlfoundation/yawl/resourcing/rsInterface/WorkQueueGatewayClient.class
                          org/yawlfoundation/yawl/resourcing/rsInterface/ResourceGatewayClient.class
                          org/yawlfoundation/yawl/engine/interfce/Interface_Client.class
                          org/yawlfoundation/yawl/engine/interfce/WorkItemRecord.class
                          org/yawlfoundation/yawl/engine/interfce/ServletUtils.class
                          org/yawlfoundation/yawl/engine/YSpecificationID.class
                          org/yawlfoundation/yawl/elements/YSpecVersion.class
                          org/yawlfoundation/yawl/util/JDOMUtil.class
                          org/yawlfoundation/yawl/util/StringUtil.class
                          org/yawlfoundation/yawl/util/PasswordEncryptor.class">

            <fileset dir="${enumeratedClasses}"
                     includes="org/apache/commons/codec/BinaryEncoder.class
                               org/apache/commons/codec/BinaryDecoder.class
                               org/apache/commons/codec/Encoder.class
                               org/apache/commons/codec/Decoder.class
                               org/apache/commons/codec/EncoderException.class
                               org/apache/commons/codec/DecoderException.class
                               org/apache/commons/codec/binary/Base64.class
                               org/apache/commons/codec/binary/StringUtils.class" />
            <manifest>
                <attribute name="Created-By" value="${developer.name}"/>
                <attribute name="Implementation-Version" value="${app.version} ${TODAY}"/>
            </manifest>
        </jar>
        <checksum file="${output.dir}/YResourceServiceClient.jar"/>
    </target>




    <!-- Build the monitorService war file  -->
    <target name="build_monitorService.war" depends="compile">

        <!-- 1. Copy required yawl classes into dir structure -->
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/engine/interfce/interfaceB">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce/interfaceB"/>
        </copy>

        <copy todir="${yawl.monitor.app.name}${webinf.dir}/engine/interfce/interfaceE"
              file="${classes.dir}${packageRoot}/engine/interfce/interfaceE/YLogGatewayClient.class"/>

        <copy todir="${yawl.monitor.app.name}${webinf.dir}/engine/instance">
            <fileset dir="${classes.dir}${packageRoot}/engine/instance"
                     excludes="InstanceCache.class"/>
        </copy>
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/engine">
              <fileset dir="${classes.dir}${packageRoot}/engine"
                       includes="YWorkItem.class YSpecificationID.class"/>
        </copy>
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/elements">
            <fileset dir="${classes.dir}${packageRoot}/elements"
                     includes="*.class"/>
        </copy>
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/elements/data">
            <fileset dir="${classes.dir}${packageRoot}/elements/data"
                     includes="YParameter.class YVariable.class"/>
        </copy>
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/exceptions">
           <fileset dir="${classes.dir}${packageRoot}/exceptions"
                    includes="YSchemaBuildingException.class YDataStateException.class
                              YSyntaxException.class YAWLException.class
                              YStateException.class YQueryException.class" />
        </copy>
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/elements/state">
            <fileset dir="${classes.dir}${packageRoot}/elements/state"
                     includes="YIdentifier.class"/>
        </copy>
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/logging">
              <fileset dir="${classes.dir}${packageRoot}/logging"
                       includes="YLogDataItem.class YLogDataItemList.class"/>
        </copy>
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/logging/table"
              file="${classes.dir}${packageRoot}/logging/table/YLogEvent.class"/>

        <copy todir="${yawl.monitor.app.name}${webinf.dir}/util">
              <fileset dir="${classes.dir}${packageRoot}/util"
                       includes="JDOMUtil.class StringUtil.class CharsetFilter.class
                                 PasswordEncryptor.class"/>
        </copy>
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/engine/interfce">
              <fileset dir="${classes.dir}${packageRoot}/engine/interfce"
                       includes="ErrorServlet.class WorkItemRecord.class
                                 AuthenticationConfig.class
                                 Interface_Client.class ServletUtils.class"/>
        </copy>

        <copy todir="${yawl.monitor.app.name}${webinf.dir}/resourcing/jsf">
              <fileset dir="${classes.dir}${packageRoot}/resourcing/jsf"
                       includes="MessagePanel*.class Font*.class"/>
        </copy>

        <copy todir="${yawl.monitor.app.name}${webinf.dir}/resourcing/resource">
              <fileset dir="${classes.dir}${packageRoot}/resourcing/resource"
                       includes="AbstractResource.class Participant.class UserPrivileges.class"/>
        </copy>
        
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/resourcing/rsInterface">
              <fileset dir="${classes.dir}${packageRoot}/resourcing/rsInterface"
                       includes="ResourceGatewayException.class ResourceLogGatewayClient.class
                                 ResourceMarshaller.class ResourceGatewayClient.class
                                 ResourceGatewayClientAdapter.class"/>
        </copy>

        <copy todir="${yawl.monitor.app.name}${webinf.dir}/resourcing/datastore/eventlog">
              <fileset dir="${classes.dir}${packageRoot}/resourcing/datastore/eventlog"
                       includes="ResourceEvent.class BaseEvent.class"/>
        </copy>
        
        <!-- 2. copy resourcing classes to relevant dirs -->
        <copy todir="${yawl.monitor.app.name}${webinf.dir}/monitor">
            <fileset dir="${classes.dir}${packageRoot}/monitor"
                     includes="**/*.class"/>
        </copy>

        <!-- 2c(i). Copy in resources for jsps -->
        <copy todir="${yawl.monitor.app.name}/resources">
            <fileset dir="${build.dir}/${yawl.monitor.app.name}/resources"/>
        </copy>

        <!-- 2d. Copy in jsps -->
        <copy todir="${yawl.monitor.app.name}">
            <fileset dir="${classes.dir}${packageRoot}/monitor/jsf/jsp"
                     includes="*.jsp *.jspf *.html"/>
        </copy>

        <!-- 2e. Copy log4j properties -->
        <copy file="${properties.dir}/log4j.properties"
              todir="${yawl.monitor.app.name}/WEB-INF/classes"/>

        <!-- 3. Copy required 3rd party libraries into dir structure -->
        <copy todir="${yawl.monitor.app.name}/WEB-INF/lib">
           <fileset dir="${lib.dir}"
                    includes="${jdom} ${log4j} ${jsf.libs} ${commonsLang}
                              ${commonsLogging} ${commonsCollections} ${commonsCodec}"/>
        </copy>

        <copy todir="${yawl.monitor.app.name}/WEB-INF">
           <fileset dir="${build.dir}/${yawl.monitor.app.name}/jsf_xml" includes="*.xml"/>
        </copy>

        <!-- 4.5. Increment the build number -->
        <propertyfile file="${build.dir}/${yawl.monitor.app.name}/version.properties">
            <entry key="Version" value="${app.version}"/>
            <entry key="BuiltBy" value="${user.name}"/>
            <entry key="BuildDate" type="date" value="now"/>
            <entry key="BuildNumber" default="0" type="int" operation="+" value="1"/>
            <entry key="JavaVersion" value="${java.version}"/>
            <entry key="OS" value="${os.name}"/>
            <entry key="OSVersion" value="${os.version}"/>
        </propertyfile>

        <copy file="${build.dir}/${yawl.monitor.app.name}/version.properties"
            tofile="${yawl.monitor.app.name}/WEB-INF/classes/version.properties"/>

        <!-- 5. Copy web.xml file into dir structure -->
        <copy todir="${yawl.monitor.app.name}/WEB-INF"
              file="${build.dir}/${yawl.monitor.app.name}/web.xml"/>

        <!-- 6. create Web Archive file -->
        <jar destfile="${output.dir}/${yawl.monitor.app.name}.war">
            <fileset dir="${yawl.monitor.app.name}"/>
        </jar>
        <checksum file="${output.dir}/${yawl.monitor.app.name}.war"/>

        <!-- 7. Remove temp build area -->
        <delete dir="${yawl.monitor.app.name}"/>

    </target>

    <!-- Build the test service -->
    <target name="build_testService.war" depends="compile">
        <copy todir="testService${webinf.dir}/elements/data">
            <fileset dir="${classes.dir}${packageRoot}/elements/data"/>
        </copy>
        <!-- start copying files into war directory -->
        <copy todir="testService${webinf.dir}/elements">
            <fileset dir="${classes.dir}${packageRoot}/elements"
                     includes="**/*.class **/*.xsd"/>
        </copy>
        <copy todir="testService${webinf.dir}/unmarshal">
            <fileset
                dir="${classes.dir}${packageRoot}/unmarshal"
                includes="YDecompositionParser.class"/>
            <fileset dir="${schema.dir}" includes="*.xsd"/>
        </copy>
        <copy todir="testService${webinf.dir}/engine">
              <fileset dir="${classes.dir}${packageRoot}/engine"/>
        </copy>
        <copy todir="testService${webinf.dir}/schema">
              <fileset dir="${classes.dir}${packageRoot}/schema"
                      includes="XSDType.class YDataSchemaCache.class"/>
        </copy>
        <copy todir="testService${webinf.dir}/logging">
              <fileset dir="${classes.dir}${packageRoot}/logging"
                      includes="YLogPredicate.class YLogPredicateParser.class"/>
        </copy>
        <copy todir="testService${webinf.dir}/exceptions">
           <fileset dir="${classes.dir}${packageRoot}/exceptions"/>
        </copy>
        <copy todir="testService${webinf.dir}/resourcing/rsInterface">
            <fileset dir="${classes.dir}${packageRoot}/resourcing/rsInterface"/>
        </copy>
        <copy todir="testService${webinf.dir}/resourcing">
            <fileset dir="${classes.dir}${packageRoot}/resourcing"/>
        </copy>
        <copy todir="testService${webinf.dir}/resourcing/datastore">
            <fileset dir="${classes.dir}${packageRoot}/resourcing/datastore"/>
        </copy>
        <copy todir="testService${webinf.dir}/resourcing/allocators">
            <fileset dir="${classes.dir}${packageRoot}/resourcing/allocators"/>
        </copy>
        <copy todir="testService${webinf.dir}/resourcing/filters">
            <fileset dir="${classes.dir}${packageRoot}/resourcing/filters"/>
        </copy>
        <copy todir="testService${webinf.dir}/resourcing/constraints">
            <fileset dir="${classes.dir}${packageRoot}/resourcing/constraints"/>
        </copy>
        <copy todir="testService${webinf.dir}/resourcing/interactions">
            <fileset dir="${classes.dir}${packageRoot}/resourcing/interactions"/>
        </copy>
        <copy todir="testService${webinf.dir}/resourcing/resource">
            <fileset dir="${classes.dir}${packageRoot}/resourcing/resource"/>
        </copy>
        <copy todir="testService${webinf.dir}/resourcing/util"
              file="${classes.dir}${packageRoot}/util/PasswordEncryptor.class"/>
        <copy todir="testService${webinf.dir}/resourcing/jsf/dynform"
               file="${classes.dir}${packageRoot}/resourcing/jsf/dynform/DynTextParser.class"/>

        <copy todir="testService${webinf.dir}/util">
            <fileset dir="${classes.dir}${packageRoot}/util"/>
        </copy>
        <copy todir="testService/WEB-INF/lib">
            <fileset dir="${lib.dir}" includes="${jdom} ${log4j} ${twitter4j}
            ${commonsCodec} ${saxon.libs} ${commonsLang}"/>
        </copy>

        <copy file="${properties.dir}/log4j.properties"
              todir="testService/WEB-INF/classes"/>

        <copy todir="testService${webinf.dir}/engine/interfce">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce"/>
        </copy>
        <copy todir="testService${webinf.dir}/testService">
            <fileset dir="${classes.dir}${packageRoot}/testService"/>
        </copy>
        <copy todir="testService/graphics">
            <fileset dir="${graphics.dir}"/>
        </copy>
        <copy todir="testService/WEB-INF">
            <fileset file="${build.dir}/testService/web.xml"/>
        </copy>
        <!-- prepare Web Archive file -->
        <jar destfile="${output.dir}/testService.war">
            <fileset dir="testService"/>
        </jar>
        <delete dir="testService"/>
    </target>

    <!-- Build the twitter service -->
    <target name="build_twitterService.war" depends="compile">
        <copy todir="twitterService${webinf.dir}/elements/data">
            <fileset dir="${classes.dir}${packageRoot}/elements/data"/>
        </copy>
        <!-- start copying files into war directory -->
        <copy todir="twitterService${webinf.dir}/elements">
            <fileset dir="${classes.dir}${packageRoot}/elements"
                     includes="**/*.class **/*.xsd"/>
        </copy>
        <copy todir="twitterService${webinf.dir}/unmarshal">
            <fileset
                dir="${classes.dir}${packageRoot}/unmarshal"
                includes="YDecompositionParser.class"/>
            <fileset dir="${schema.dir}" includes="*.xsd"/>
        </copy>
        <copy todir="twitterService${webinf.dir}/engine">
              <fileset dir="${classes.dir}${packageRoot}/engine"/>
        </copy>
        <copy todir="twitterService${webinf.dir}/schema"
              file="${classes.dir}${packageRoot}/schema/XSDType.class"/>
        <copy todir="twitterService${webinf.dir}/exceptions">
           <fileset dir="${classes.dir}${packageRoot}/exceptions"/>
        </copy>

        <copy todir="twitterService${webinf.dir}/util">
            <fileset dir="${classes.dir}${packageRoot}/util"/>
        </copy>
        <copy todir="twitterService/WEB-INF/lib">
            <fileset dir="${lib.dir}" includes="${jdom} ${log4j} ${twitter4j} ${commonsCodec}"/>
        </copy>

        <copy file="${properties.dir}/log4j.properties"
              todir="twitterService/WEB-INF/classes"/>

        <copy todir="twitterService${webinf.dir}/engine/interfce">
            <fileset dir="${classes.dir}${packageRoot}/engine/interfce"/>
        </copy>
        <copy todir="twitterService${webinf.dir}/twitterService">
            <fileset dir="${classes.dir}${packageRoot}/twitterService"/>
        </copy>
        <copy todir="twitterService/graphics">
            <fileset dir="${graphics.dir}"/>
        </copy>
        <copy todir="twitterService/WEB-INF">
            <fileset file="${build.dir}/twitterService/web.xml"/>
        </copy>
        <!-- prepare Web Archive file -->
        <jar destfile="${output.dir}/twitterService.war">
            <fileset dir="twitterService"/>
        </jar>
        <delete dir="twitterService"/>
    </target>

     <!-- Build the YAWL Digital Signature Service WebApplication -->
        <target name="build_digitalSignature.war" depends="compile">
            <copy todir="${yawl.digitalSignature.app.name}${webinf.dir}/elements">
                <fileset dir="${classes.dir}${packageRoot}/elements" includes="**/*.class **/*.xsd"/>
            </copy>
            <copy todir="${yawl.digitalSignature.app.name}${webinf.dir}/unmarshal">
                <fileset dir="${classes.dir}${packageRoot}/unmarshal"
                    includes="YDecompositionParser.class"/>
                <fileset dir="${schema.dir}" includes="*.xsd"/>
            </copy>
            <copy todir="${yawl.digitalSignature.app.name}${webinf.dir}/exceptions">
                 <fileset dir="${classes.dir}${packageRoot}/exceptions"
                     includes="YAWLException.class"/>
            </copy>
            <copy todir="${yawl.digitalSignature.app.name}/WEB-INF/lib">
                <fileset dir="${lib.dir}"
                         includes="${jdom} ${log4j} ${commonsCodec} ${commonsIO}
                                   ${commonsFileupload} ${bcmail} ${bcprov}"/>
            </copy>

            <copy file="${properties.dir}/log4j.properties"
                  todir="${yawl.digitalSignature.app.name}/WEB-INF/classes"/>
            <copy todir="${yawl.digitalSignature.app.name}${webinf.dir}/engine"
                  file="${classes.dir}${packageRoot}/engine/YSpecificationID.class"/>

            <copy todir="${yawl.digitalSignature.app.name}${webinf.dir}/engine/interfce">
                <fileset dir="${classes.dir}${packageRoot}/engine/interfce"/>
            </copy>
            <copy todir="${yawl.digitalSignature.app.name}${webinf.dir}/engine/interfce/interfaceB">
                 <fileset dir="${classes.dir}${packageRoot}/engine/interfce/interfaceB"/>
             </copy>
            <copy todir="${yawl.digitalSignature.app.name}${webinf.dir}/util">
                  <fileset dir="${classes.dir}${packageRoot}/util"/>
            </copy>
            <copy todir="${yawl.digitalSignature.app.name}">
                <fileset dir="${classes.dir}${packageRoot}/digitalSignature">
                    <exclude name="*.class"/>
                </fileset>
            </copy>

            <!-- 2c(i). Copy in resources for jsps -->
            <copy todir="${yawl.digitalSignature.app.name}/resources">
                <fileset dir="${build.dir}/DigitalSignature/resources"/>
            </copy>

            <mkdir dir="DigitalSignature/files"/>
            <copy todir="${yawl.digitalSignature.app.name}${webinf.dir}/digitalSignature">
                <fileset dir="${classes.dir}${packageRoot}/digitalSignature">
                    <include name="*.class"/>
                </fileset>
            </copy>
            <copy todir="${yawl.digitalSignature.app.name}/WEB-INF">
                <fileset file="${build.dir}/${yawl.digitalSignature.app.name}/web.xml"/>
            </copy>
            <!-- prepare Web Archive file -->
            <jar destfile="${output.dir}/${yawl.digitalSignature.app.name}.war">
                <fileset dir="${yawl.digitalSignature.app.name}"/>
            </jar>
            <checksum file="${output.dir}/${yawl.digitalSignature.app.name}.war"/>
            <delete dir="${yawl.digitalSignature.app.name}"/>
        </target>

    <!-- Build the YAWL Mail Sender Service WebApplication -->
            <target name="build_mailSender.war" depends="compile">
                <copy todir="${yawl.mailSender.app.name}${webinf.dir}/elements">
                    <fileset dir="${classes.dir}${packageRoot}/elements" includes="**/*.class **/*.xsd"/>
                </copy>
                <copy todir="${yawl.mailSender.app.name}${webinf.dir}/unmarshal">
                    <fileset dir="${classes.dir}${packageRoot}/unmarshal"
                        includes="YDecompositionParser.class"/>
                    <fileset dir="${schema.dir}" includes="*.xsd"/>
                </copy>
                <copy todir="${yawl.mailSender.app.name}${webinf.dir}/exceptions">
                     <fileset dir="${classes.dir}${packageRoot}/exceptions"
                         includes="YAWLException.class"/>
                </copy>
                <copy todir="${yawl.mailSender.app.name}/WEB-INF/lib">
                    <fileset dir="${lib.dir}" includes="${jdom} ${log4j} mail.jar  ${activation}
                    commons-io-1.1.jar commons-fileupload-1.1.jar commons-codec-1.3.jar"/>
                </copy>

                <copy file="${properties.dir}/log4j.properties"
                      todir="${yawl.mailSender.app.name}/WEB-INF/classes"/>

                <copy todir="${yawl.mailSender.app.name}${webinf.dir}/engine/interfce">
                    <fileset dir="${classes.dir}${packageRoot}/engine/interfce"/>
                </copy>
                <copy todir="${yawl.mailSender.app.name}${webinf.dir}/engine/interfce/interfaceB">
                     <fileset dir="${classes.dir}${packageRoot}/engine/interfce/interfaceB"/>
                 </copy>
                <copy todir="${yawl.mailSender.app.name}${webinf.dir}/util">
                      <fileset dir="${classes.dir}${packageRoot}/util"/>
                </copy>
                <copy todir="${yawl.mailSender.app.name}">
                    <fileset dir="${classes.dir}${packageRoot}/mailSender">
                        <exclude name="*.class"/>
                    </fileset>
                </copy>
                  <!-- 2c(i). Copy in resources for jsps -->
                <copy todir="${yawl.mailSender.app.name}/resources">
                    <fileset dir="${build.dir}/MailSender/resources"/>
                </copy>

                <mkdir dir="MailSender/files"/>
                <copy todir="${yawl.mailSender.app.name}${webinf.dir}/mailSender">
                    <fileset dir="${classes.dir}${packageRoot}/mailSender">
                        <include name="*.class"/>
                    </fileset>
                </copy>
                <copy todir="${yawl.mailSender.app.name}/WEB-INF">
                    <fileset file="${build.dir}/${yawl.mailSender.app.name}/web.xml"/>
                </copy>
                <!-- prepare Web Archive file -->
                <jar destfile="${output.dir}/${yawl.mailSender.app.name}.war">
                    <fileset dir="${yawl.mailSender.app.name}"/>
                </jar>
                <checksum file="${output.dir}/${yawl.mailSender.app.name}.war"/>
                <delete dir="${yawl.mailSender.app.name}"/>
            </target>


    <!-- =========================================================================== -->
    <!--
    Build the application jar/war files
    -->
    <target name="buildWebApps"
        depends=
        "build_engine.war,
        build_yawlSMSInvoker.war,
        build_yawlWSInvoker.war,
        build_workletService.war,
        build_resourceService.war,
        build_monitorService.war,
        build_twitterService.war,
        build_digitalSignature.war,
        build_mailSender.war"
        description=
        "Builds a distribution version of all
        the YAWL runtime Web apps and copies to the output directory.">
        <antcall target="cleanup"/>
    </target>

    <target name="deployEngine" depends="build_engine.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/${yawl.eng.app.name}.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>

    <target name="deployWsInvoker" depends="build_yawlWSInvoker.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/${yawl.webService.app.name}.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>

    <target name="deploySMS" depends="build_yawlSMSInvoker.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/${yawl.smsService.app.name}.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>


    <target name="deployWorkletService" depends="build_workletService.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/${yawl.worklet.app.name}.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>

    <target name="deployResourceService" depends="build_resourceService.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/${yawl.resource.app.name}.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>

    <target name="deployMonitorService" depends="build_monitorService.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/${yawl.monitor.app.name}.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>

    <target name="deployTestService" depends="build_testService.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/testService.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>

    <target name="deployTwitterService" depends="build_twitterService.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/twitterService.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>

    <target name="deployDigitalSignature" depends="build_digitalSignature.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/${yawl.digitalSignature.app.name}.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>

    <target name="deployMailSender" depends="build_mailSender.war">
        <copy todir="${webapps.dir}">
            <fileset file="${output.dir}/${yawl.mailSender.app.name}.war"/>
        </copy>
        <antcall target="cleanup"/>
    </target>

    <target name="deployWebapps"
        depends=
        "deployEngine,
        deployWsInvoker,
        deploySMS,
        deployWorkletService,
        deployResourceService,
        deployMonitorService"
        description=
        "Deploys all of the web apps to Tomcat, and if tomcat is on it forces a reload.">
    </target>

    <target name="deployCoreWebapps"
        depends=
        "deployEngine,
        deployWorkletService,
        deployResourceService"
        description=
        "Deploys the core web apps to Tomcat, and if tomcat is on it forces a reload.">
    </target>

    <target name="cleanup">
        <delete dir="${yawl.eng.app.name}"/>
        <delete dir="${yawl.worklet.app.name}"/>
        <delete dir="${yawl.resource.app.name}"/>
        <delete dir="${yawl.monitor.app.name}"/>
    </target>

    <!--
    Build the application jar/war files
    Creates a jar file for the main application sources.
    -->
    <target name="buildAll"
        depends="build_Standalone,
        build_sourcecode,
        build_engine.war,
        build_yawlWSInvoker.war,
        build_yawlSMSInvoker.war,
        build_workletService.war,
        build_resourceService.war,
        build_monitorService.war,
        build_twitterService.war,
        build_digitalSignature.war,
        build_mailSender.war,
        build_YResourceServiceClient.jar,
        javadoc">
    </target>

    <!--
  	Compile test source code
    Compiles the source for test cases into the ${classes} directory.
  	-->
    <target name="compile-test" depends="compile">
        <copy todir="${classes.dir}">
            <fileset dir="${test.dir}" excludes="**/*.java"/>
        </copy>
        <javac srcdir="${test.dir}" destdir="${classes.dir}">
            <classpath refid="cp.standard"/>
            <classpath refid="cp.compile"/>
            <classpath refid="cp.wsif"/>
            <classpath refid="cp.xsd"/>
            <classpath refid="cp.persist"/>
        </javac>
    </target>

    <!--
    Run the unit tests
    Invokes the unit tests.
    -->
    <target name="test" depends="compile-test">
        <java classname="org.yawlfoundation.yawl.TestAllYAWLSuites" fork="true"
              failonerror="false">
            <classpath refid="cp.standard"/>
            <classpath refid="cp.compile"/>
            <classpath refid="cp.wsif"/>
            <classpath refid="cp.xsd"/>
            <classpath refid="cp.persist"/>
            <classpath refid="cp.apacheCommons"/>
            <classpath refid="cp.jsf"/>
            <classpath refid="cp.ds"/>
            <classpath refid="cp.mail"/>
        </java>
    </target>

    <target name="unitTest" depends="compile-test">
        <junit printsummary="yes" fork="yes">
            <classpath refid="cp.standard"/>
            <classpath refid="cp.compile"/>
            <classpath refid="cp.wsif"/>
            <classpath refid="cp.xsd"/>
            <classpath refid="cp.persist"/>
            <classpath refid="cp.apacheCommons"/>
            <classpath refid="cp.jsf"/>
            <classpath refid="cp.ds"/>
            <classpath refid="cp.mail"/>
            <classpath>
              <pathelement location="${lib.dir}/${junit}"/>
              <pathelement path="${java.class.path}"/>
              <pathelement path="${classes.dir}"/>
            </classpath>
            <formatter type="plain"/>
            <test name="org.yawlfoundation.yawl.TestAllYAWLSuites"/>
        </junit>
    </target>


    <target name="compile-test2" depends="build_engine.war">
         <copy todir="${classes.dir}">
             <fileset dir="${test.dir}" excludes="**/*.java"/>
         </copy>
         <javac srcdir="${test.dir}" destdir="${classes.dir}">
             <classpath refid="cp.standard"/>
             <classpath refid="cp.compile"/>
             <classpath refid="cp.wsif"/>
             <classpath refid="cp.xsd"/>
             <classpath refid="cp.persist"/>
         </javac>
     </target>


    <!--
    Run the resourcing unit tests
    -->
    <target name="resourcingtest" depends="compile-test">
        <java classname="org.yawlfoundation.yawl.resourcing.ResourcingTestSuite"
              fork="true" failonerror="false">
            <classpath refid="cp.standard"/>
            <classpath refid="cp.compile"/>
            <classpath refid="cp.wsif"/>
            <classpath refid="cp.xsd"/>
            <classpath refid="cp.persist"/>
            <classpath refid="cp.apacheCommons"/>
            <classpath refid="cp.jsf"/>
        </java>
    </target>


    <!--
    The "javadoc" target creates Javadoc API documentation for the Java
    classes included in your application.  Normally, this is only required
    when preparing a distribution release, but is available as a separate
    target in case the developer wants to create Javadocs independently.
    -->
    <target name="javadoc" depends="compile" description="Create Javadoc API documentation">
        <mkdir dir="${javadoc.dir}/docs/api"/>
        <javadoc sourcepath="${src.dir}" destdir="${javadoc.dir}/docs/api"
                 packagenames="org.yawlfoundation.yawl.*"
                 author="true" version="true"
                 windowtitle="YAWL Version${app.version}">

            <!-- titles, headers & footers -->
            <doctitle><![CDATA[<h1>YAWL Environment version 2.1</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2010 The YAWL Foundation.</i>]]></bottom>

            <!-- custom tags -->
            <tag name="date" scope="all" description="Created/Last Date:"/>
            <tag name="pre" scope="all" description="Precondition:"/>
            <tag name="post" scope="all" description="Postcondition:"/>

            <!-- links to 3rd party javadocs -->
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
            <link href="http://www.jdom.org/docs/apidocs/"/>
            <link href="http://www.bouncycastle.org/docs/mdocs1.5/"/>

            <!-- referenced class paths -->
            <classpath refid="cp.standard"/>
            <classpath refid="cp.compile"/>
            <classpath refid="cp.wsif"/>
            <classpath refid="cp.xsd"/>
            <classpath refid="cp.persist"/>
            <classpath refid="cp.apacheCommons"/>
            <classpath refid="cp.jsf"/>
            <classpath refid="cp.mail"/>
            <classpath refid="cp.ds"/>
            <classpath refid="cp.etc"/>
        </javadoc>
    </target>


    <!-- Deployment targets using the Tomcat Manager -->
    <!-- disabled -->

    <!-- AJH - Added Tomcat deployment target -->
    <!--
    <target name="deploy_tomcat_localhost"
        depends="buildWebApps"
        description="Deploy the web applications into Tomcat">
        <echo message="Deploying web applications via ${tomcat_manager_url}"/>

        <echo message="Deploying ${yawl.eng.app.name}"/>
        <deploy url="${tomcat_manager_url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${yawl.eng.app.name}"
            war="../${output.dir}/${yawl.eng.app.name}.war"
            update="true"/>

        <echo message="Deploying ${yawl.worklist.app.name}"/>
        <deploy url="${tomcat_manager_url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${yawl.worklist.app.name}"
            war="../${output.dir}/${yawl.worklist.app.name}.war"
            update="true"/>

        <echo message="Deploying ${yawl.webService.app.name}"/>
        <deploy url="${tomcat_manager_url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${yawl.webService.app.name}"
            war="../${output.dir}/${yawl.webService.app.name}.war"
            update="true"/>

        <echo message="Deploying ${yawl.smsService.app.name}"/>
        <deploy url="${tomcat_manager_url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${yawl.smsService.app.name}"
            war="../${output.dir}/${yawl.smsService.app.name}.war"
            update="true"/>

        <echo message="Deploying ${yawl.worklet.app.name}"/>
        <deploy url="${tomcat_manager_url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${yawl.worklet.app.name}"
            war="../${output.dir}/${yawl.worklet.app.name}.war"
            update="true"/>

        <echo message="Deploying ${yawl.resource.app.name}"/>
        <deploy url="${tomcat_manager_url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${yawl.resource.app.name}"
            war="../${output.dir}/${yawl.resource.app.name}.war"
            update="true"/>

        <echo>Deployed OK</echo>
    </target>
    -->
    <!-- Target which applies the changes required to Tomcat's common libraries -->
    <!-- <target name="deploy_tomcat_common_libs"
            description="Update the Tomcat common libraries for XML parsers etc.">
    </target>
    -->

    <!-- Configure the custom Ant tasks for the Manager application -->
    <!-- <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask"/>
    <taskdef name="list" classname="org.apache.catalina.ant.ListTask"/>
    <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask"/>
    <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask"/>
    <taskdef name="roles" classname="org.apache.catalina.ant.RolesTask"/>
    <taskdef name="start" classname="org.apache.catalina.ant.StartTask"/>
    <taskdef name="stop" classname="org.apache.catalina.ant.StopTask"/>
    <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"/-->


    <!-- ==================== Reload Target =================================== -->
    <!--
      The "reload" target tells the specified Tomcat 5 installation to dynamically
      reload this web application, to reflect changes in the underlying classes or
      the "web.xml" deployment descriptor.
    - - >
    <target name="reload" depends="build" description="Reload application on servlet container">
        <reload url="${manager.url}"
            username="${manager.username}"
            password="${manager.password}"
            path="${yawl.eng.app.name}"/>
        <reload url="${manager.url}"
            username="${manager.username}"
            password="${manager.password}"
            path="${yawl.worklist.app.name}"/>
        <!- -reload url="${manager.url}"
            username="${manager.username}"
            password="${manager.password}"
            path="${yawl.webService.app.name}"/- ->
    </target>

    <!- -
    Clean build environment
    Deletes directories and intermediate files.
    -->
    <target name="removeDependancyInfo"
        description="cleans out the intellij records of previous compiles forcing the ide to recompile">
        <delete dir="${classes.dir}/.dependency-info"/>
    </target>


    <!--target name="launch" depends="reload" description="launch engine application">
        <java classname="org.yawlfoundation.yawl.engine.gui.YAdminGUI"
            fork="true"
            spawn="true">
            <jvmarg value="-Djava.rmi.server.codebase=file:/d:\YAWL\engine\classes/"/>
            <jvmarg value="-Djava.security.policy=./classes/java.policy2"/>
            <classpath refid="cp.standard"/>
            <classpath refid="cp.compile"/>
        </java>
    </target-->


</project>
