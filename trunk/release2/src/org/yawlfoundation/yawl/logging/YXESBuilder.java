package org.yawlfoundation.yawl.logging;

import org.yawlfoundation.yawl.engine.YSpecificationID;
import org.yawlfoundation.yawl.engine.YWorkItemStatus;
import org.yawlfoundation.yawl.util.XNode;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Author: Michael Adams
 * Creation Date: 21/04/2010
 */
public class YXESBuilder {

    public YXESBuilder() { }

    public String buildLog(YSpecificationID specid, XNode events) {
        if (events != null) {
            XNode root = beginLogOutput(specid);
            processEvents(root, events);
            return root.toPrettyString(true);
        }
        return null;
    }


    protected void processEvents(XNode root, XNode yawlEvents) {
        for (XNode yawlEvent : yawlEvents.getChildren()) {
            XNode trace = root.addChild(traceNode(yawlEvent.getAttributeValue("id")));
            processCaseEvents(yawlEvent, trace);
        }
    }


    protected String translateEvent(String yawlEvent) {
        String xesEvent;
        if (yawlEvent.equals(YWorkItemStatus.statusEnabled.toString())) {
            xesEvent = "schedule";
        }
        else if (yawlEvent.equals(YWorkItemStatus.statusExecuting.toString())) {
            xesEvent = "start";
        }
        else if (yawlEvent.equals(YWorkItemStatus.statusComplete.toString())) {
            xesEvent = "complete";
        }
        else if (yawlEvent.equals(YEventLogger.CASE_CANCEL)) {
            xesEvent = "pi_abort";
        }
        else if (yawlEvent.equals(YEventLogger.NET_START)) {
            xesEvent = "schedule";
        }
        else if (yawlEvent.equals(YEventLogger.NET_COMPLETE)) {
            xesEvent = "complete";
        }
        else if (yawlEvent.equals(YWorkItemStatus.statusDeleted.toString())) {
            xesEvent = "ate_abort";
        }
        else if (yawlEvent.equals(YWorkItemStatus.statusFailed.toString())) {
            xesEvent = "ate_abort";
        }
        else if (yawlEvent.equals(YWorkItemStatus.statusForcedComplete.toString())) {
            xesEvent = "complete";
        }
        else if (yawlEvent.equals(YWorkItemStatus.statusSuspended.toString())) {
            xesEvent = "suspend";
        }
        else xesEvent = "unknown";

        return xesEvent;
    }


    protected XNode traceNode(String id) {
        XNode trace = new XNode("trace");
        trace.addChild(stringNode("concept:name", id));
        return trace;
    }


    protected XNode stringNode(String key, String value) {
        return entryNode("string", key, value);
    }


    protected XNode dateNode(String key, String value) {
        return entryNode("date", key, value);
    }


    protected String getComment() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
        return "Generated by the YAWL Engine " + df.format(new Date(System.currentTimeMillis()));
    }


    /*************************************************************************/

    private XNode beginLogOutput(YSpecificationID specid) {
        XNode log = new XNode("log");

        log.addComment(getComment());

        log.addAttribute("xes.version", "1.0");
        log.addAttribute("xes.features", "arbitrary-depth");
        log.addAttribute("openxes.version", "1.0RC7");
        log.addAttribute("xmlns", "http://code.deckfour.org/xes");

        log.addChild(extensionNode("Lifecycle", "lifecycle",
                "http://code.fluxicon.com/xes/lifecycle.xesext"));
        log.addChild(extensionNode("Time", "time",
                "http://code.fluxicon.com/xes/time.xesext"));
        log.addChild(extensionNode("Concept", "concept",
                "http://code.fluxicon.com/xes/concept.xesext"));
        log.addChild(extensionNode("Semantic", "semantic",
                "http://code.fluxicon.com/xes/semantic.xesext"));
        log.addChild(extensionNode("Organizational", "org",
                "http://code.fluxicon.com/xes/org.xesext"));

        XNode gTrace = log.addChild(globalNode("trace"));
        gTrace.addChild(stringNode("concept:name", "UNKNOWN"));

        XNode gEvent = log.addChild(globalNode("event"));
        gEvent.addChild(stringNode("org:resource", "UNKNOWN"));
        gEvent.addChild(dateNode("time:timestamp", "0"));
        gEvent.addChild(stringNode("concept:name", "UNKNOWN"));
        gEvent.addChild(stringNode("lifecycle:transition", "UNKNOWN"));

        XNode classifier = log.addChild(new XNode("classifier"));
        classifier.addAttribute("name", "Activity classifier");
        classifier.addAttribute("Keys", "concept:name lifecycle:transition");

        log.addChild(stringNode("concept:name", specid.toString()));

        return log;
    }


    private XNode extensionNode(String name, String prefix, String uri) {
        XNode extn = new XNode("extension");
        extn.addAttribute("name", name);
        extn.addAttribute("prefix", prefix);
        extn.addAttribute("uri", uri);
        return extn;
    }


    private XNode globalNode(String scope) {
        XNode global = new XNode("global");
        global.addAttribute("scope", scope);
        return global;
    }


    private XNode entryNode(String name, String key, String value) {
        XNode entry = new XNode(name);
        entry.addAttribute("key", key);
        entry.addAttribute("value", value);
        return entry;
    }


    private XNode eventNode(XNode yawlEvent, String taskName) {
        XNode eventNode = new XNode("event");
        eventNode.addChild(dateNode("time:timestamp", yawlEvent.getChildText("timestamp")));
        eventNode.addChild(stringNode("concept:name", taskName));
        eventNode.addChild(stringNode("lifecycle:transition",
                translateEvent(yawlEvent.getChildText("descriptor"))));
        return eventNode;
    }


    private void processCaseEvents(XNode yawlEvent, XNode trace) {
        for (XNode netInstance : yawlEvent.getChildren()) {
            for (XNode taskInstance : netInstance.getChildren()) {
                 processTaskEvents(taskInstance, trace);
            }
        }
    }

    private void processTaskEvents(XNode taskInstance, XNode trace) {
        String taskName = taskInstance.getChildText("taskname");
        for (XNode event : taskInstance.getChildren("event")) {
            trace.addChild(eventNode(event, taskName));
        }
    }

}
