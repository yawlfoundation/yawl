package org.yawlfoundation.yawl.procletService.editor.model;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on 19-dec-2009, 22:18:36
 */

import org.yawlfoundation.yawl.procletService.models.procletModel.ProcletBlock;
import org.yawlfoundation.yawl.procletService.models.procletModel.ProcletModel;
import org.yawlfoundation.yawl.procletService.models.procletModel.ProcletModels;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

/**
 *
 * @author Ronny
 */
public class BlockEditFrame extends JDialog {
	
	private static BlockEditFrame instance = null;
	
	// predefined values
	private String blockIDpv = "";
	private ProcletBlock.BlockType blockTypepv = null;
	private boolean isCreatepv = false;
	private int timeoutpv = 0;
	
	private FrmModel frmModel = null;
	
    /** Creates new form NewJFrame */
    public BlockEditFrame(Frame owner) {
    	super(owner, true);
    	//super();
//    	setFocusableWindowState(true);
//    	setFocusable(true);
        initComponents();
    }
    
    public BlockEditFrame(Frame frame,String blockID, ProcletBlock.BlockType bt, boolean isCreate,
    		int timeout) {
    	super(frame,true);
    	this.blockIDpv = blockID;
    	this.blockTypepv = bt;
    	this.isCreatepv = isCreate;
    	this.timeoutpv = timeout;
    	initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
    	
    	 addFocusListener(new java.awt.event.FocusAdapter() {
             public void focusLost(java.awt.event.FocusEvent evt) {
                 formFocusLost(evt);
             }
         });

        jPanel1 = new javax.swing.JPanel();
        finishButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        blockIDtextField = new javax.swing.JTextField();
        if (!this.blockIDpv.equals("")) {
        	blockIDtextField.setText(blockIDpv);
        }
        java.util.List<String> values = new ArrayList<String>();
        values.add("INBOX");
        values.add("OUTBOX");
        values.add("CONFIGURATION");
        jComboBox1 = new javax.swing.JComboBox(values.toArray());
        // convert block type
        String convertedValue = "";
        if (this.blockTypepv != null) {
	        if (this.blockTypepv.toString().equals("FO")) {
	        	convertedValue = "OUTBOX";
	        }
	        else if (this.blockTypepv.toString().equals("PI")) {
	        	convertedValue = "INBOX";
	        }
	        else {
	        	convertedValue = "CONFIGURATION";
	        }
        }
        else {
        	convertedValue = "INBOX";
        }
        jComboBox1.setSelectedItem(convertedValue);
        // add listener
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });
        SpinnerNumberModel myModel = new SpinnerNumberModel(0 /*initial value*/, 0 /*min*/, Integer.MAX_VALUE /*max*/, 1 /*step*/);
        timeOutSpinner = new javax.swing.JSpinner(myModel);
        if (this.timeoutpv != 0) {
        	timeOutSpinner.setValue(timeoutpv);
        }
        createCheckBox = new javax.swing.JCheckBox();
        createCheckBox.setSelected(isCreatepv);
        
        // add listener for the checkbox
        createCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Interaction Point"));

        finishButton.setText("Finish");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Interaction Point ID");

        jLabel2.setText("Interaction Point Type");

        jLabel3.setText("Instantiate Proclet Instance");

        jLabel4.setText("Time Out Value");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(82, 82, 82)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(finishButton)
                        .addComponent(blockIDtextField, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(createCheckBox)
                    .addComponent(timeOutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(blockIDtextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(createCheckBox))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(timeOutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(finishButton)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {
       if (instance != null) {
    	   // adjust the Graph
    	   String blockID = blockIDtextField.getText();
    	   boolean isCreate = createCheckBox.isSelected();
    	   String blockType = (String) jComboBox1.getSelectedItem();
    	   if (blockType.equals("INBOX")) {
    		   blockType = "PI";
    	   }
    	   else if (blockType.equals("OUTBOX")) {
    		   blockType = "FO";
    	   }
    	   else if (blockType.equals("CONFIGURATION")) {
    		   blockType = "CP";
    	   }
    	   ProcletBlock.BlockType bt = ProcletBlock.getBlockTypeFromString(blockType);
    	   int timeout = (Integer) timeOutSpinner.getValue();
    	   // get the new graph
    	   ProcletModels inst = ProcletModels.getInstance();
    	   ProcletModel pmodel = inst.getProcletClass("new");
    	   if (pmodel != null) {
    		   ProcletBlock block = pmodel.getBlock(blockID);
    		   // name might have changed
    		   if (block == null) {
    			   block = pmodel.getBlock(blockIDpv);
    		   }
    		   if (block == null && !blockID.equals("")) {
    			   // commit to graph
    			   ProcletBlock blockNew = new ProcletBlock(blockID,bt,isCreate,timeout);
    			   pmodel.addBlock(blockNew);
    		   }
    		   else if (block != null && this.blockIDpv.equals("")){
    			   // generate warning!
    			   JOptionPane.showMessageDialog(null,
    					    "Block already exists!",
    					    "Error",
    					    JOptionPane.ERROR_MESSAGE);
    		   }
    		   else if (blockID.equals("")) {
    			   JOptionPane.showMessageDialog(null,
   					    "The block has no name! Please provide a name!",
   					    "Error",
   					    JOptionPane.ERROR_MESSAGE);
    		   }
    		   else if (block != null && !this.blockIDpv.equals("")) {
    			   // update the values for this block
    			   block.setBlockID(blockID);
    			   block.setBlockType(bt);
    			   block.setCreate(isCreate);
    			   block.setTimeOut(timeout);
    		   }
    	   }
    	   this.frmModel.redrawGraph();
    	   instance.dispose();
    	   instance.setVisible(false);
    	   instance = null;
       }
    }
    
    public static void invokeBlockEditFrame(FrmModel frmModel) {
    	BlockEditFrame.instance = new BlockEditFrame(null);
    	instance.frmModel = frmModel;
    	instance.setVisible(true);
    }
    
    public static void invokeBlockEditFrameWithSettings(String blockID, ProcletBlock.BlockType bt, boolean isCreate,
    		int timeout, FrmModel frmModel) {
    	BlockEditFrame.instance = new BlockEditFrame(null,blockID, bt, isCreate, timeout);
    	instance.frmModel = frmModel;
    	instance.setVisible(true);
    }
    
    private void formFocusLost(java.awt.event.FocusEvent evt) {
    	System.out.println("focus");
    	requestFocusInWindow();
    }
    
    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
    	JComboBox typeCombo = (JComboBox) evt.getSource();
    	String selectedItem = (String) typeCombo.getSelectedItem();
    	// if type is FO or CP then grey-out timeout field
    	// if type is FO or CP then grey-out instantiate field
    	if (!selectedItem.equals("INBOX")) {
    		timeOutSpinner.setEnabled(false);
    		// set also the value to '0'
			timeoutpv = 0;
			timeOutSpinner.setValue(0);
    		createCheckBox.setEnabled(false);
    		// set also the value to deselected
    		createCheckBox.setSelected(false);
    		isCreatepv = false;
    	}
    	else {
    		timeOutSpinner.setEnabled(true);
    		createCheckBox.setEnabled(true);
    	}
    }
    
    private void checkBoxActionPerformed(java.awt.event.ActionEvent evt) {
    	JCheckBox checkBox = (JCheckBox) evt.getSource();
    	// check the value of the checkbox
    	if (checkBox != null) {
    		if (checkBox.isSelected() == true) {
    			// disable the timeout
    			timeOutSpinner.setEnabled(false);
    			// set also the value to '0'
    			timeoutpv = 0;
    			timeOutSpinner.setValue(0);
    		}
    		else {
    			timeOutSpinner.setEnabled(true);
    		}
    	}
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new BlockEditFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JTextField blockIDtextField;
    private javax.swing.JCheckBox createCheckBox;
    private javax.swing.JButton finishButton;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner timeOutSpinner;
    // End of variables declaration

}
