<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2004-2012 The YAWL Foundation. All rights reserved.
  ~ The YAWL Foundation is a collaboration of individuals and
  ~ organisations who are committed to improving workflow technology.
  ~
  ~ This file is part of YAWL. YAWL is free software: you can
  ~ redistribute it and/or modify it under the terms of the GNU Lesser
  ~ General Public License as published by the Free Software Foundation.
  ~
  ~ YAWL is distributed in the hope that it will be useful, but WITHOUT
  ~ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
  ~ Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with YAWL. If not, see <http://www.gnu.org/licenses/>.
  -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:yawl="http://www.yawlfoundation.org/yawlschema"
           targetNamespace="http://www.yawlfoundation.org/yawlschema"
           xmlns="http://www.yawlfoundation.org/yawlschema"
           elementFormDefault="qualified"
           version="2.0">

    <!--first-level children describe each exception type-->
    <xs:complexType name="exceptionType">
        <xs:sequence>
            <xs:element ref="constraints" minOccurs="0"/>
            <xs:element ref="external" minOccurs="0"/>
            <xs:element name="selection" type="yawl:taskListType" minOccurs="0"/>
            <xs:element name="abort" type="yawl:taskListType" minOccurs="0"/>
            <xs:element name="timeout" type="yawl:taskListType" minOccurs="0"/>
            <xs:element name="resourceUnavailable" type="yawl:taskListType" minOccurs="0"/>
            <xs:element name="violation" type="yawl:taskListType" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <!--a set of related rule nodes-->
    <xs:complexType name="ruleTreeType">
        <xs:sequence>
            <xs:element ref="ruleNode" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!--a list of tasks for a related rule-->
    <xs:complexType name="taskListType">
        <xs:sequence>
            <xs:element name="task" maxOccurs="unbounded" type="yawl:taskType">
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!--a task element-->
    <xs:complexType name="taskType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" ref="ruleNode"/>
        </xs:sequence>
      	<xs:attribute name="name" type="xs:string" use="required"/>
	</xs:complexType>

    <!--allowable conclusion actions-->
    <xs:simpleType name="actionType">
   		<xs:restriction base="xs:string">
   			<xs:enumeration value="continue"/>
   			<xs:enumeration value="suspend"/>
            <xs:enumeration value="remove"/>
            <xs:enumeration value="restart"/>
            <xs:enumeration value="complete"/>
            <xs:enumeration value="fail"/>
            <xs:enumeration value="compensate"/>
            <xs:enumeration value="rollback"/>
            <xs:enumeration value="select"/>
   		</xs:restriction>
   	</xs:simpleType>

    <!--one node's reference to another node in a parent-child relation-->
    <xs:simpleType name="nodeReferenceType">
   		<xs:restriction base="xs:integer">
   			<xs:minInclusive value="-1"/>
   		</xs:restriction>
   	</xs:simpleType>

    <!--a conclusion is a sequence of one or more 'steps' or exlet primitives-->
    <xs:complexType name="conclusionType">
        <xs:sequence>
            <xs:element name="step" type="yawl:conclusionStepType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!--each 'step' represents an exlet primitive-->
    <xs:complexType name="conclusionStepType">
		<xs:sequence>
			<xs:element name="action" type="yawl:actionType"/>
			<xs:element name="target" type="xs:string"/>
		</xs:sequence>
        <xs:attribute name="index" type="xs:positiveInteger" use="required"/>
	</xs:complexType>

    <!--end of type definitions-->

    <!--start of element definitions-->

    <!--the root level element can be called 'spec' or 'process'-->
    <xs:element name="spec" type="yawl:exceptionType"/>
    <xs:element name="process" type="yawl:exceptionType"/>

    <!--there may be case level and/or item level constraints-->
    <xs:element name="constraints">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="case" minOccurs="0"/>
                <xs:element ref="item" minOccurs="0"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <!--a list of pre or post constraint item-level rule trees-->
    <xs:element name="item">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="pre" minOccurs="0" type="yawl:taskListType"/>
                <xs:element name="post" minOccurs="0" type="yawl:taskListType"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <!--a list of pre or post constraint case-level rule trees-->
    <xs:element name="case">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="pre" minOccurs="0" type="yawl:ruleTreeType"/>
                <xs:element name="post" minOccurs="0" type="yawl:ruleTreeType"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <!--there may be case level and/or item level external triggers-->
    <xs:element name="external">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="case" minOccurs="0" type="yawl:ruleTreeType"/>
                <xs:element name="item" minOccurs="0" type="yawl:taskListType"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <!--one node in a rule tree-->
    <xs:element name="ruleNode">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="id" type="xs:nonNegativeInteger"/>
                <xs:element name="parent" type="yawl:nodeReferenceType"/>
                <xs:element name="trueChild" type="yawl:nodeReferenceType"/>
                <xs:element name="falseChild" type="yawl:nodeReferenceType"/>
                <xs:element name="condition" type="xs:string"/>
                <xs:element name="conclusion" type="yawl:conclusionType"/>
                <xs:element name="cornerstone" type="xs:anyType"/>
                <xs:element name="description" type="xs:string"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

</xs:schema>
