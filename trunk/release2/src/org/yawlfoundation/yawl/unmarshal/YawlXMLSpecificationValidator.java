/*
 * This file is made available under the terms of the LGPL licence.
 * This licence can be retrieved from http://www.gnu.org/copyleft/lesser.html.
 * The source remains the property of the YAWL Foundation.  The YAWL Foundation is a collaboration of
 * individuals and organisations who are committed to improving workflow technology.
 *
 */


package org.yawlfoundation.yawl.unmarshal;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;
import org.yawlfoundation.yawl.elements.YSpecification;

import java.io.StringReader;

/**
 * 
 * @author Lachlan Aldred
 * 
 */

public class YawlXMLSpecificationValidator extends DefaultHandler {
    StringBuilder _errorsString = new StringBuilder("");
    private static YawlXMLSpecificationValidator _myInstance;

    private YawlXMLSpecificationValidator() {
    }

    public static YawlXMLSpecificationValidator getInstance() {
        if (_myInstance == null) {
            _myInstance = new YawlXMLSpecificationValidator();
        }
        return _myInstance;
    }


    public void warning(SAXParseException ex) {
        addMessage(ex, "Warning");
    }


    public void error(SAXParseException ex) {
        addMessage(ex, "Invalid");
    }


    public void fatalError(SAXParseException ex) throws SAXException {
        addMessage(ex, "Error");
    }


    private void addMessage(SAXParseException e, String errType) {
        String lineNum = getLineNumber(e);
        _errorsString.append(errType + "#" + lineNum + "# " + e.getMessage() + '\n');
    }


    private String getLineNumber(SAXParseException e) {
        String fileURL = e.getSystemId();
        if (fileURL != null) {
            return
                    //fileURL.substring(fileURL.lastIndexOf("/") + 1) +
                    "[ln: " + e.getLineNumber() + " col: " + e.getColumnNumber() + "]";
        }
        return "";
    }


    public String checkSchema(InputSource input, String version) {
        _errorsString.delete(0, _errorsString.length());
        try {
            XMLReader parser = setUpChecker(version);
            parser.parse(input);
        } catch (SAXParseException e) {
        } catch (Exception e) {
            e.printStackTrace();
        }
        return _errorsString.toString();
    }


    /**
     * Checks the schema agsinst the XML schema for that version.
     * @param specStr the specification xml.
     * @param version the spec version
     * @return a string of error messages generated by XERCES with each error separated by
     * a carriage return.
     */
    public String checkSchema(String specStr, String version) {
        _errorsString.delete(0, _errorsString.length());
        try {
            XMLReader parser = setUpChecker(version);
            parser.parse(new InputSource(new StringReader(specStr)));
        } catch (SAXParseException e) {
        } catch (Exception e) {
            e.printStackTrace();
        }
        return _errorsString.toString();
    }


    /**
     * Sets the checker up for a run.
     * @param version the version of the schema
     * @return a reader configured to do the checking.
     * @throws SAXException
     */
    private XMLReader setUpChecker(String version) throws SAXException {
        XMLReader parser = XMLReaderFactory.createXMLReader(
                "org.apache.xerces.parsers.SAXParser");
        if (YSpecification.Beta2.equals(version)) {
            parser.setProperty("http://apache.org/xml/properties/schema/external-schemaLocation",
                    "http://www.citi.qut.edu.au/yawl " + getClass().getResource("YAWL_Schema.xsd"));
        } else if (YSpecification.Beta3.equals(version)) {
            parser.setProperty("http://apache.org/xml/properties/schema/external-schemaLocation",
                    "http://www.citi.qut.edu.au/yawl " + getClass().getResource("YAWL_SchemaBeta3.xsd"));
        } else if (YSpecification.Beta4.equals(version)) {
            parser.setProperty("http://apache.org/xml/properties/schema/external-schemaLocation",
                    "http://www.citi.qut.edu.au/yawl " + getClass().getResource("YAWL_SchemaBeta4.xsd"));
        } else if (YSpecification.Beta6.equals(version)) {
            parser.setProperty("http://apache.org/xml/properties/schema/external-schemaLocation",
                    "http://www.citi.qut.edu.au/yawl " + getClass().getResource("YAWL_SchemaBeta6.xsd"));
        } else if (YSpecification.Beta7_1.equals(version)) {
            parser.setProperty("http://apache.org/xml/properties/schema/external-schemaLocation",
                    "http://www.citi.qut.edu.au/yawl " + getClass().getResource("YAWL_SchemaBeta7.1.xsd"));
        } else if (YSpecification.Version2_0.equals(version)) {
             parser.setProperty("http://apache.org/xml/properties/schema/external-schemaLocation",
                    "http://www.yawlfoundation.org/yawlschema " +
                    getClass().getResource("YAWL_Schema2.0.xsd"));
        } else {
            throw new RuntimeException("Version [" + version + "] is not valid version.");
        }
        parser.setContentHandler(this);
        parser.setErrorHandler(this);
        parser.setFeature("http://xml.org/sax/features/validation", true);
        parser.setFeature("http://apache.org/xml/features/validation/schema", true);
        parser.setFeature("http://apache.org/xml/features/validation/schema-full-checking", true);
        return parser;
    }
}
