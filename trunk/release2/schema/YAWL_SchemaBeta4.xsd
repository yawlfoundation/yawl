<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2005 sp1 U (http://www.xmlspy.com) by qwerty ytrewq (wert) -->
<!-- edited with XML Spy v4.4 U (http://www.xmlspy.com) by Lachlan Aldred (Queensland University of Technology) -->
<!--
<xs:schema targetNamespace="http://www.citi.qut.edu.au/yawl" xmlns:yawl="http://www.citi.qut.edu.au/yawl" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
-->
<xs:schema targetNamespace="http://www.citi.qut.edu.au/yawl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:yawl="http://www.citi.qut.edu.au/yawl" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<!--	
	##########################################################################################
		DECLARE ROOT ELEMENT - YAWL_Specification
	##########################################################################################
	-->
	<xs:element name="specificationSet" type="yawl:SpecificationSetFactsType">
		<xs:unique name="SpecificationUnique">
			<xs:selector xpath="specification"/>
			<xs:field xpath="@uri"/>
		</xs:unique>
	</xs:element>
	<!--
	################################################################################################
	SIMPLE TYPES FROM VALUE TYPES
	################################################################################################
	-->
	<xs:simpleType name="ControlTypeCodeType">
		<xs:annotation>
			<xs:documentation>Encapsulates the range of relation T-->{AND, OR, XOR}</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="and"/>
			<xs:enumeration value="or"/>
			<xs:enumeration value="xor"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="CreationModeCodeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="static"/>
			<xs:enumeration value="dynamic"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DecompositionIDType">
		<xs:restriction base="xs:NCName"/>
	</xs:simpleType>
	<xs:simpleType name="DocumentationType">
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="LabelType">
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="DirectionModeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="input"/>
			<xs:enumeration value="output"/>
			<xs:enumeration value="both"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="NameType">
		<xs:restriction base="xs:string">
			<xs:minLength value="1"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="NCNameType">
		<xs:restriction base="xs:NCName"/>
	</xs:simpleType>
	<xs:simpleType name="NetElementIDType">
		<xs:restriction base="xs:NMTOKEN"/>
	</xs:simpleType>
	<xs:simpleType name="NullType">
		<xs:restriction base="xs:string">
			<xs:maxLength value="0"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="PositiveIntegerType">
		<xs:restriction base="xs:positiveInteger"/>
	</xs:simpleType>
	<xs:simpleType name="URIType">
		<xs:restriction base="xs:anyURI"/>
	</xs:simpleType>
	<xs:simpleType name="VariableNameType">
		<xs:restriction base="xs:NMTOKEN"/>
	</xs:simpleType>
	<xs:simpleType name="XPathPredicateType">
		<xs:restriction base="xs:string">
			<xs:minLength value="1"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="XQueryType">
		<xs:restriction base="xs:string">
			<xs:minLength value="1"/>
		</xs:restriction>
	</xs:simpleType>
	<!--
	################################################################################################
	COMPLEX TYPES FROM ENTITY TYPES
	################################################################################################
	-->
	<xs:complexType name="ControlTypeType">
		<xs:attribute name="code" type="yawl:ControlTypeCodeType" use="required"/>
	</xs:complexType>
	<xs:complexType name="CreationModeType">
		<xs:attribute name="code" type="yawl:CreationModeCodeType" use="required"/>
	</xs:complexType>
	<xs:complexType name="CustomSchemaNamespaceMappingType">
		<xs:attribute name="ncname" type="yawl:NCNameType" use="required"/>
	</xs:complexType>
	<xs:complexType name="DecompositionType">
		<xs:attribute name="id" type="yawl:DecompositionIDType" use="required"/>
	</xs:complexType>
	<xs:complexType name="DirectionType">
		<xs:attribute name="mode" type="yawl:DirectionModeType" use="required"/>
	</xs:complexType>
	<xs:complexType name="ExpressionType">
		<xs:attribute name="query" type="yawl:XQueryType" use="required"/>
	</xs:complexType>
	<xs:complexType name="ExternalNetElementType">
		<xs:attribute name="id" type="yawl:NetElementIDType" use="required"/>
	</xs:complexType>
	<xs:complexType name="FlowsIntoType">
		<xs:sequence>
			<xs:element name="nextElementRef" type="yawl:ExternalNetElementType"/>
			<xs:element name="predicate" type="yawl:PredicateType" minOccurs="0"/>
			<xs:element name="isDefaultFlow" type="yawl:NullType" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="LocationType">
		<xs:attribute name="uri" type="yawl:URIType"/>
	</xs:complexType>
	<xs:complexType name="NamespacePrefixType">
		<xs:attribute name="ncname" type="yawl:NCNameType" use="required"/>
	</xs:complexType>
	<xs:complexType name="NamespaceURI">
		<xs:attribute name="uri" type="yawl:URIType" use="required"/>
	</xs:complexType>
	<xs:complexType name="PredicateType">
		<xs:simpleContent>
			<xs:extension base="yawl:XPathPredicateType">
				<xs:attribute name="ordering" type="xs:integer"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="TypeNameType">
		<xs:attribute name="ncname" type="yawl:NCNameType"/>
	</xs:complexType>
	<xs:complexType name="TypeType">
		<xs:sequence>
			<xs:element name="namespace" type="yawl:NamespacePrefixType"/>
			<xs:element name="typeName" type="yawl:TypeNameType"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SpecificationType">
		<xs:attribute name="uri" type="yawl:URIType" use="required"/>
	</xs:complexType>
	<xs:complexType name="SpecificationSetType">
		<!--xs:attribute name="uri" type="yawl:URIType" use="required"/-->
	</xs:complexType>
	<!--
	################################################################################################
	COMPLEX TYPES FROM FACT TYPE GROUPINGS
	################################################################################################
	-->
	<!--
	#### TYPE #### CustomSchemaNamespaceMappingFactsType
	-->
	<xs:complexType name="CustomSchemaNamespaceMappingFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:CustomSchemaNamespaceMappingType">
				<xs:sequence>
					<xs:element name="expandsTo" type="yawl:URIType"/>
					<xs:element name="definedAt" type="yawl:URIType"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### DecompositionFactsType
	-->
	<xs:complexType name="DecompositionFactsType" abstract="true">
		<xs:complexContent>
			<xs:extension base="yawl:DecompositionType">
				<xs:sequence>
					<xs:element name="name" type="yawl:NameType" minOccurs="0"/>
					<xs:element name="documentation" type="yawl:DocumentationType" minOccurs="0"/>
					<xs:element name="inputParam" type="yawl:InputParameterFactsType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="outputParam" type="yawl:OutputParameterFactsType" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### ExternalConditionFactsType
	-->
	<xs:complexType name="ExternalConditionFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:ExternalNetElementFactsType"/>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### ExternalNetElementFactsType
	-->
	<xs:complexType name="ExternalNetElementFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:ExternalNetElementType">
				<xs:sequence>
					<xs:element name="name" minOccurs="0"/>
					<xs:element name="documentation" minOccurs="0"/>
					<xs:element name="flowsInto" type="yawl:FlowsIntoType" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### ExternalTaskFactsType extends ExternalNetElementFactsType
	-->
	<xs:complexType name="ExternalTaskFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:ExternalNetElementFactsType">
				<xs:sequence>
					<xs:element name="join" type="yawl:ControlTypeType"/>
					<xs:element name="split" type="yawl:ControlTypeType"/>
					<xs:element name="removesTokens" type="yawl:ExternalNetElementType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="removesTokensFromFlow" type="yawl:RemovesTokensFromFlowType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="startingMappings" type="yawl:VarMappingSetType" minOccurs="0">
						<xs:key name="StartMappingExpressionKey">
							<xs:selector xpath="yawl:mapping/yawl:expression"/>
							<xs:field xpath="@query"/>
						</xs:key>
						<xs:key name="StartMappingMapToKey">
							<xs:selector xpath="yawl:mapping"/>
							<xs:field xpath="yawl:mapsTo"/>
						</xs:key>
					</xs:element>
					<xs:element name="completedMappings" type="yawl:VarMappingSetType" minOccurs="0">
						<xs:key name="CompletedMappingExpressionKey">
							<xs:selector xpath="yawl:mapping/yawl:expression"/>
							<xs:field xpath="@query"/>
						</xs:key>
						<xs:key name="CompletedMappingMapToKey">
							<xs:selector xpath="yawl:mapping"/>
							<xs:field xpath="yawl:mapsTo"/>
						</xs:key>
					</xs:element>
					<xs:element name="decomposesTo" type="yawl:DecompositionType" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### MultipleInstanceExternalTaskFactsType
	-->
	<xs:complexType name="MultipleInstanceExternalTaskFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:ExternalTaskFactsType">
				<xs:sequence>
					<xs:element name="minimum" type="yawl:XQueryType"/>
					<xs:element name="maximum" type="yawl:XQueryType"/>
					<xs:element name="threshold" type="yawl:XQueryType"/>
					<xs:element name="creationMode" type="yawl:CreationModeType"/>
					<xs:element name="miDataInput">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="expression" type="yawl:ExpressionType"/>
								<xs:element name="splittingExpression" type="yawl:ExpressionType"/>
								<xs:element name="formalInputParam" type="yawl:VariableNameType"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="miDataOutput" minOccurs="0">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="formalOutputExpression" type="yawl:ExpressionType"/>
								<xs:element name="outputJoiningExpression" type="yawl:ExpressionType"/>
								<xs:element name="resultAppliedToLocalVariable" type="yawl:VariableNameType"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### NetFactsType
	-->
	<xs:complexType name="NetFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:DecompositionFactsType">
				<xs:sequence>
					<xs:element name="localVariable" type="yawl:VariableFactsType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="processControlElements">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="inputCondition" type="yawl:ExternalConditionFactsType"/>
								<xs:choice maxOccurs="unbounded">
									<xs:element name="task" type="yawl:ExternalTaskFactsType" minOccurs="0" maxOccurs="unbounded"/>
									<xs:element name="condition" type="yawl:ExternalConditionFactsType" minOccurs="0" maxOccurs="unbounded"/>
								</xs:choice>
								<xs:element name="outputCondition" type="yawl:OutputConditionFactsType"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="isRootNet" type="xs:boolean"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### OutputConditionFactsType extends ExternalNetElementType
	-->
	<xs:complexType name="OutputConditionFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:ExternalNetElementType">
				<xs:sequence>
					<xs:element name="name" minOccurs="0"/>
					<xs:element name="documentation" minOccurs="0"/>
				</xs:sequence>
				<!--<xs:attribute name="id" type="yawl:NetElementIDType" use="required"/>-->
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### RemovesTokensFromFlowType
	-->
	<xs:complexType name="RemovesTokensFromFlowType">
		<xs:sequence>
			<xs:element name="flowSource" type="yawl:ExternalNetElementType"/>
			<xs:element name="flowDestination" type="yawl:ExternalNetElementType"/>
		</xs:sequence>
	</xs:complexType>
	<!--
	#### TYPE #### VarMappingAndTransformType
	-->
	<xs:complexType name="VarMappingSetType">
		<xs:sequence>
			<xs:element name="mapping" type="yawl:VarMappingFactsType" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<!--
	#### TYPE #### VarMappingFactsType
	-->
	<xs:complexType name="VarMappingFactsType">
		<xs:sequence>
			<xs:element name="expression" type="yawl:ExpressionType"/>
			<xs:element name="mapsTo" type="yawl:VariableNameType"/>
		</xs:sequence>
	</xs:complexType>
	<!--
	#### TYPE #### WebServiceGatewayFactsType
	-->
	<xs:complexType name="WebServiceGatewayFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:DecompositionFactsType">
				<xs:sequence>
					<xs:element name="yawlService" minOccurs="0">
						<xs:complexType>
							<xs:choice>
								<xs:sequence>
									<xs:element name="wsdlLocation" type="xs:anyURI"/>
									<xs:element name="operationName" type="xs:NMTOKEN"/>
								</xs:sequence>
								<xs:sequence/>
							</xs:choice>
							<xs:attribute name="id" type="yawl:YAWLServiceIDType" use="required"/>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### YAWLServiceType
	-->
	<xs:simpleType name="YAWLServiceIDType">
		<xs:restriction base="yawl:URIType"/>
	</xs:simpleType>
	<!--
	#### TYPE #### YAWLSpecificationFactsType
	-->
	<xs:complexType name="YAWLSpecificationFactsType" final="#all">
		<xs:complexContent>
			<xs:extension base="yawl:SpecificationType">
				<xs:sequence>
					<xs:element name="name" type="yawl:NameType" minOccurs="0"/>
					<xs:element name="documentation" type="yawl:DocumentationType" minOccurs="0"/>
					<xs:element name="metaData" type="yawl:MetaDataType"/>
					<xs:any namespace="http://www.w3.org/2001/XMLSchema" processContents="lax" minOccurs="0"/>
					<xs:element name="decomposition" type="yawl:DecompositionType" maxOccurs="unbounded">
						<xs:key name="DecompositionKey">
							<xs:selector xpath="yawl:decomposition"/>
							<xs:field xpath="@id"/>
						</xs:key>
						<xs:keyref name="DecomposeToForeignKey" refer="yawl:DecompositionKey">
							<xs:selector xpath="*/yawl:processControlElements/*/yawl:decomposesTo"/>
							<xs:field xpath="@id"/>
						</xs:keyref>
						<xs:unique name="VariableUnique">
							<xs:selector xpath="yawl:inputParam | yawl:localVariable"/>
							<xs:field xpath="yawl:name"/>
						</xs:unique>
						<xs:unique name="OutputExpresionUnique">
							<xs:selector xpath="yawl:outputExpression"/>
							<xs:field xpath="@query"/>
						</xs:unique>
						<xs:unique name="OutputParamUnique">
							<xs:selector xpath="yawl:outputParam"/>
							<xs:field xpath="yawl:name"/>
						</xs:unique>
						<xs:key name="NetElementKey_Inner">
							<xs:selector xpath="yawl:processControlElements/*"/>
							<xs:field xpath="@id"/>
						</xs:key>
						<xs:keyref name="Flows_ToInnerKeyRef" refer="yawl:NetElementKey_Inner">
							<xs:selector xpath="yawl:processControlElements/*/yawl:flowsInto/yawl:nextElementRef"/>
							<xs:field xpath="@id"/>
						</xs:keyref>
						<xs:keyref name="RemovesTokensForeignKey" refer="yawl:NetElementKey_Inner">
							<xs:selector xpath="yawl:processControlElements/*/yawl:removesTokens"/>
							<xs:field xpath="@id"/>
						</xs:keyref>
						<xs:keyref name="RemovesTokensFromFlowForeignKey" refer="yawl:NetElementKey_Inner">
							<xs:selector xpath="yawl:processControlElements/*/yawl:removesTokensFromFlow/yawl:flowSource"/>
							<xs:field xpath="@id"/>
						</xs:keyref>
						<xs:keyref name="RemovesTokensFromFlowForeignKey2" refer="yawl:NetElementKey_Inner">
							<xs:selector xpath="yawl:processControlElements/*/yawl:removesTokensFromFlow/yawl:flowDestination"/>
							<xs:field xpath="@id"/>
						</xs:keyref>
						<xs:unique name="YawlServiceUnique">
							<xs:selector xpath="yawl:yawlService"/>
							<xs:field xpath="@id"/>
						</xs:unique>
						<!-- -->
					</xs:element>
					<xs:element name="importedNet" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded"/>
					<!--xs:element name="webServiceGateways" type="WebServiceGatewaysType" maxOccurs="unbounded"/-->
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SpecificationSetFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:SpecificationSetType">
				<xs:sequence>
					<xs:element name="specification" type="yawl:YAWLSpecificationFactsType" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="version" use="required">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="Beta 4"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#################################################################################################
	BEGIN VARIABLE FACTS TYPES
	#################################################################################################
	-->
	<!--
	#### TYPE #### VariableFactsType
	-->
	<xs:complexType name="VariableBaseType">
		<xs:sequence>
			<xs:element name="documentation" type="xs:string" minOccurs="0"/>
			<xs:choice>
				<xs:sequence>
					<xs:element name="name" type="xs:NCName"/>
					<xs:choice>
						<xs:sequence>
							<xs:element name="type" type="xs:NCName"/>
							<xs:element name="namespace" type="xs:anyURI" minOccurs="0"/>
						</xs:sequence>
						<xs:element name="isUntyped"/>
					</xs:choice>
				</xs:sequence>
				<xs:element name="element" type="xs:NCName"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!--
	#### TYPE #### VariableFactsType
	-->
	<xs:complexType name="VariableFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:VariableBaseType">
				<xs:sequence>
					<xs:element name="initialValue" type="xs:string" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### OutputParamaterFactsType
	-->
	<xs:complexType name="OutputParameterFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:VariableBaseType">
				<xs:sequence>
					<xs:element name="mandatory" minOccurs="0"/>
					<xs:element name="isCutThroughParam" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	#### TYPE #### ParamaterFactsType
	-->
	<xs:complexType name="InputParameterFactsType">
		<xs:complexContent>
			<xs:extension base="yawl:VariableBaseType">
				<xs:sequence>
					<xs:choice minOccurs="0">
						<xs:element name="initialValue" type="xs:string" minOccurs="0"/>
						<xs:element name="mandatory" minOccurs="0"/>
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
	################################################################################################
	BEGIN Ancilliary TYPES
	################################################################################################
	-->
	<!--
	#### TYPE #### MetaDataType
	-->
	<xs:complexType name="MetaDataType">
		<xs:annotation>
			<xs:documentation>Uses meta data specification of the dublin core: http://dublincore.org/usage/terms/dc/current-elements/</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="title" type="xs:normalizedString" minOccurs="0"/>
			<xs:element name="creator" type="yawl:IndividualOrOrganisationType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="subject" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="description" type="xs:normalizedString" minOccurs="0"/>
			<xs:element name="publisher" type="yawl:IndividualOrOrganisationType" minOccurs="0"/>
			<xs:element name="contributor" type="yawl:IndividualOrOrganisationType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="coverage" type="xs:string" minOccurs="0"/>
			<xs:element name="rights" type="xs:normalizedString" minOccurs="0"/>
			<xs:element name="replaces" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="modification" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="by" type="yawl:IndividualOrOrganisationType"/>
						<xs:element name="on" type="xs:dateTime"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="validFrom" type="xs:date" minOccurs="0"/>
			<xs:element name="validUntil" type="xs:date" minOccurs="0"/>
			<xs:element name="created" type="xs:date" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<!--
	#### TYPE #### IndividualOrOrganisationType
	-->
	<xs:complexType name="IndividualOrOrganisationType">
		<xs:sequence>
			<xs:element name="name" type="xs:string"/>
			<xs:choice maxOccurs="4">
				<xs:element name="address" type="yawl:AddressType"/>
				<xs:element name="emailAddress" type="xs:anyURI"/>
			</xs:choice>
			<xs:element name="description" type="xs:normalizedString" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<!--
	#### TYPE #### AddressType
	-->
	<xs:complexType name="AddressType">
		<xs:sequence>
			<xs:choice>
				<xs:element name="numAndStreet">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="number">
								<xs:simpleType>
									<xs:restriction base="xs:string">
										<xs:pattern value="\d*(/|-)*\d+"/>
									</xs:restriction>
								</xs:simpleType>
							</xs:element>
							<xs:element name="street">
								<xs:simpleType>
									<xs:restriction base="xs:string">
										<xs:pattern value="\D+\s+[S|s|R|r|A|a|C|c|B|b|o](treet|oad|venue|t|d|ve|rescent|lvd|ther)"/>
									</xs:restriction>
								</xs:simpleType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="GPOBox" type="xs:positiveInteger"/>
			</xs:choice>
			<xs:element name="suburbOrTown" type="xs:string" minOccurs="0"/>
			<xs:element name="postOrZipCode">
				<xs:simpleType>
					<xs:restriction base="xs:positiveInteger">
						<xs:minInclusive value="1000"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="state" type="xs:string" minOccurs="0"/>
			<xs:element name="country" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
	<!-- #### TYPE ####  ImportType for importing Schmeas from other documents -->
	<xs:complexType name="ImportType">
		<xs:attribute name="namespace" type="xs:anyURI"/>
		<xs:attribute name="location" type="xs:anyURI"/>
	</xs:complexType>
	<!-- #### TYPE #### SchemaType for declaring data types to use in YAWL - using XML Schema -->
	<xs:complexType name="SchemaType">
		<xs:sequence>
			<xs:element name="type" maxOccurs="unbounded">
				<xs:complexType>
					<xs:sequence>
						<xs:any namespace="http://www.w3.org/2001/XMLSchema" processContents="lax" maxOccurs="unbounded"/>
					</xs:sequence>
					<xs:attribute name="targetNamespace" type="xs:anyURI"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
