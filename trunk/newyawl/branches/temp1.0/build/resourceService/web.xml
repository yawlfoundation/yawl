<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>

    <!-- General description of your web application -->

    <display-name>YAWL Resource Service</display-name>
    <description>
        This custom YAWL Service handles all workitem resource allocations, based on the
        resource patterns.
        Copyright © 2007 Queensland University of Technology. All rights reserved.
        Author: Michael Adams
        For more information about the YAWL SOFTWARE LICENCE refer to the 'downloads' section under
        http://www.yawlfoundation.org/.
    </description>

    <context-param>
        <param-name>InterfaceB_BackEnd</param-name>
        <param-value>http://localhost:8080/yawl/ib</param-value>
        <description>
            The URL of the engine's interface B.
        </description>
    </context-param>

    <context-param>
        <param-name>InterfaceBWebSideController</param-name>
        <param-value>au.edu.qut.yawl.resourcing.ResourceManager</param-value>
        <description>
            The class name of the Interface B Server implementation.
        </description>
    </context-param>

    <context-param>
        <param-name>UserName</param-name>
        <param-value></param-value>
        <description>
            If you need to invoke a web service and this is deployed behind
            an authenticating proxy server then you ought to set this variable
            appropriately.
        </description>
    </context-param>

    <context-param>
        <param-name>Password</param-name>
        <param-value></param-value>
        <description>
            If you need to invoke a web service and this is deployed behind
            an authenticating proxy server then you ought to set this variable
            appropriately.
        </description>
    </context-param>

    <context-param>
        <param-name>ProxyHost</param-name>
        <param-value></param-value>
        <description>
            If you need to invoke a web service and this is deployed behind
            an authenticating proxy server then you ought to set this variable
            appropriately.
        </description>
    </context-param>

    <context-param>
        <param-name>ProxyPort</param-name>
        <param-value></param-value>
        <description>
            If you need to invoke a web service and this is deployed behind
            an authenticating proxy server then you ought to set this variable
            appropriately.
        </description>
    </context-param>

    <context-param>
	    <param-name>EnablePersistence</param-name>
    	<param-value>false</param-value>
    	<description>
    		'true' to enable persistence and logging
    		'false' to disable
        </description>
    </context-param>

    <context-param>
	    <param-name>OrgDataSource</param-name>
    	<param-value>HibernateImpl</param-value>
    	<description>
    		The name of the class (an extension of 'DataSource') which is used to
            as the 'data translation layer' between the ResourceService and a source
            of organisational data. The default YAWL implementation is the
            'HibernateImpl' class.
        </description>
    </context-param>

    <context-param>
	    <param-name>OrgDataRefreshRate</param-name>
    	<param-value>-1</param-value>
    	<description>
            The number of minutes delay between refreshes of org data from data store.
            That is, every X minutes reload the org data from the data store into the
            ResourceService. If the org data source is updated externally, specify
            how often the data should be refreshed. A setting of -1 disables the
            refresh (this is the default, since the YAWL org data source is not
            modified externally). Common settings: 1440 = 24 hours; 360 = 6 hours;
            10080 = 1 week.
        </description>
    </context-param>



    <!-- Servlet definitions for the servlets that make up
         your web application, including initialization
         parameters.  With Tomcat, you can also send requests
         to servlets not listed here with a request like this:

           http://localhost:8080/{context-path}/servlet/{classname}

         but this usage is not guaranteed to be portable.  It also
         makes relative references to images and other resources
         required by your servlet more complicated, so defining
         all of your servlets (and defining a mapping to them with
         a servlet-mapping element) is recommended.

         Servlet initialization parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletConfig().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of servlets, including zero.
    -->

    <!--servlet>
        <servlet-name>ErrorServlet</servlet-name>
        <description>
            Reports that the URI request found nothing, hence the error report.
        </description>
        <servlet-class>au.edu.qut.yawl.engine.interfce.ErrorServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet-->


    <servlet>
        <servlet-name>InterfaceB_Servlet</servlet-name>
        <description>
            Listens to notification of work items from the engine.
            Shouldn't need to change this.
        </description>
        <servlet-class>au.edu.qut.yawl.engine.interfce.InterfaceB_EnvironmentBasedServer</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>

    <servlet>
		<servlet-name>ErrorServlet</servlet-name>
		<description>
            Reports that the URI request found nothing, hence the error report.
        </description>
		<servlet-class>au.edu.qut.yawl.engine.interfce.ErrorServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

    <servlet>
        <servlet-name>rsGateway</servlet-name>
        <description>
            Gateway to the service
        </description>
        <servlet-class>au.edu.qut.yawl.resourcing.rsInterface.ResourceGateway</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>

    

    <servlet-mapping>
        <servlet-name>InterfaceB_Servlet</servlet-name>
        <url-pattern>/ib</url-pattern>
    </servlet-mapping>

	<servlet-mapping>
		<servlet-name>ErrorServlet</servlet-name>
		<url-pattern>/error</url-pattern>
	</servlet-mapping>

    <servlet-mapping>
        <servlet-name>rsGateway</servlet-name>
        <url-pattern>/gateway</url-pattern>
    </servlet-mapping>


    <!--
        Define the default session timeout for your application,
        in minutes.  From a servlet or JSP page, you can modify
        the timeout for a particular session dynamically by using
        HttpSession.getMaxInactiveInterval().
    -->

    <session-config>
        <session-timeout>60</session-timeout><!-- 60 minutes -->
    </session-config>

    <error-page>
        <error-code>404</error-code>
        <location>/error</location>
    </error-page>

</web-app>
