WORKLETSERVICE CHANGE LOG

SUMMARY OF CHANGES MADE OUTSIDE THE WORKLET SERVICE

Build Files

* \engine\web.xml: added servlet and mapping to exception interface
* \properties\log4j.properties: changed the format of the worklet log output
* \workletService\web.xml: added config for exception service 
* \workletService\welcome & graphics: updated welcome.htm and added images
* \worklist\web.xml: added url for exception service
* \build.xml: additions to worklet service build
 

Engine Side Source

* \engine\InterfaceBClient: added parameter (boolean force) to method header for completeWorkItem (see details below)

* \engine\YAbstractEngine & YEngine: 
   o added imports for interfaceX.InterfaceX_EngineSideClient and util.JDOMUtil (see details below)
   o added variable declaration: InterfaceX_EngineSideClient _exceptionObserver
   o added persistence for case & exception observers
   o in restore method, added lines for if statusForceComplete and if statusFailed 
   o in getInstance method, reworded workletService description and added initialisation of _exceptionObserver variable
   o in startCase method, added event call announceCheckCaseConstraints (for start of case) and set the exceptionObserver variable in the new NetRunner.
   o In cancelCase method, added event call announceCancellationToExceptionService
   o In completeWorkItem method
      * added a boolean force parameter to the method header. If force is true, the workitem gets the status forceCompleted, if false, it gets Completed
      * added test for timed-out workitem – if it is a timeService task, calls event announceTimeOutToExceptionService
      * added force to the setStatusToComplete call
   o at file bottom, added the following methods required for exception handling:
      * TO Exception Service via Interface X:
         * protected announceCheckWorkItemConstraints (called from YNetRunner)
         * protected announceCheckCaseConstraints
         * public announceCancellationToExceptionService
         * public announceTimeOutToExceptionService
      * FROM Exception Service via Interface X:
         * public setExceptionObserver
         * public removeExceptionObserver
         * public updateWorkItemData (updates a workitem’s data after a compensation has run)
         * public updateCaseData (updates a case’s data after a compensation has run)

* \engine\YNetRunner: 
   o added imports for interfaceX.InterfaceX_EngineSideClient and util.JDOMUtil (see details below)
   o added variable declaration: InterfaceX_EngineSideClient _exceptionObserver
   o in kick method, added event call announceCheckCaseConstraints (for end of case)
   o in completeWorkItemInTask method, added event call _engine.announceCheckWorkItemConstraints (for end of workitem)
   o in continueIfPossible method, added event call _engine.announceCheckWorkItemConstraints (for start of workitem)
   o at file bottom, added the following methods:
      * public setExceptionObserver
      * public cancelTask
      * FROM YAbstractEngine.completeWorkItem method:
         * private isTimeServiceTask
         * private getTimeOutTaskSet (returns list of tasks running parallel with TimeService task in spec – passed with the event call to the exception service).
         * private getFlowsIntoTaskID (returns the task id the passed task flows into.

* \engine\YWorkItem:
   o added statuses ForceComplete and Failed 
   o modified setStatusToComplete method to accept force parameter and set the status appropriately
   o added the setStatusToDeleted method

* \engine\interfce\EngineGateway:
   o added parameter (boolean force) to method header for completeWorkItem
   o added method headers for the following (called via InterfaceX):
      * public String setExceptionObserver
      * public String removeExceptionObserver
      * public String updateWorkItemData
      * public String updateCaseData
      * public String restartWorkItem
      * public String cancelWorkItem


* \engine\interfce\EngineGatewayImpl:
   o added implementations of methods listed in EngineGateway above

* \engine\interfce\InterfaceB_EngineBasedClient:
   o added import for util.JDOMUtil (see details below)
   o moved docToString method to JDOMUtil
 
* \engine\interfce\InterfaceB_EngineBasedServer:
   o added value false for force parameter in call to completeWorkItem (from checkin action)

* \engine\interfce\interfaceX\*:
   o added the interfaceX package and created the classes:
      * ExceptionGateway (java interface)
      * InterfaceX_EngineSideClient
      * InterfaceX_EngineSideServer
      * InterfaceX_Service (java interface)
      * InterfaceX_ServiceSideClient
      * InterfaceX_ServiceSideServer

      o     Schematic of Interface X:
                                               |
                                EXCEPTION      |                              INTERFACE X
                                 GATEWAY       |                                SERVICE
                       (implements) |          |                       (implements) |
                                    |          |                                    |
           +==========+ -----> ENGINE-SIDE  ---|-->  SERVICE-SIDE -----> +=============+
           || YAWL   ||          CLIENT        |        SERVER           || EXCEPTION ||
           || ENGINE ||                        |                         ||  SERVICE  ||
           +==========+ <----- ENGINE-SIDE  <--|---  SERVICE-SIDE <----- +=============+
                                 SERVER        |        CLIENT
                                               |


* \swingWorklist\YWorklistModel:
   o in attemptToFinishActiveJob method, added parameter (boolean force) to call to _engineClient.completeWorkItem


* \util\JDOMUtil:
   o added utility class with conversion methods string <----> JDOM:
      * documentToString
      * elementToString
      * fileToDocument
      * stringToElement
      * stringToDocument 
      * documentToFile

* \worklist:
   o Modified the following jsp’s to add exception handling functionality (e.g. raise exception button, reject selection button). These changes are reflected only if the exception service is registered with the engine and worklist:
      * _AvailableWork, _CaseViewer, _CheckedOutWork, _WorkItemProcessor, banner, head
