<?xml version="1.0" encoding="UTF-8"?>
<specificationSet xmlns="http://www.citi.qut.edu.au/yawl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="Beta 4" xsi:schemaLocation="http://www.citi.qut.edu.au/yawl d:/yawl/engine/schema/YAWL_SchemaBeta4.xsd">
	<specification uri="MakeRecordings">
		<name>Cut Records</name>
		<documentation>A lightweight process presenting steps to record some some songs in 
		a studio (for the purposes of demonstrating YAWL).</documentation>
		<metaData/>
		<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified">
			<xs:simpleType name="NonEmptyStringType">
				<xs:restriction base="xs:string">
					<xs:minLength value="1"/>
				</xs:restriction>
			</xs:simpleType>
			<xs:simpleType name="FormatType">
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="lp"/>
					<xs:enumeration value="album"/>
					<xs:enumeration value="double_album"/>
				</xs:restriction>
			</xs:simpleType>
			<xs:complexType name="SonglistType">
				<xs:sequence>
					<xs:element maxOccurs="unbounded" name="song" type="SongType"/>
				</xs:sequence>
			</xs:complexType>
			<xs:complexType name="SongType">
				<xs:sequence>
					<xs:element name="songName" type="NonEmptyStringType"/>
					<xs:element name="songSpecification" type="NonEmptyStringType"/>
					<xs:element name="songLength" nillable="true" type="SonglengthType"/>
					<xs:element name="selected" nillable="true" type="xs:boolean"/>
					<xs:element name="sequenceNumber" type="xs:positiveInteger"/>
				</xs:sequence>
			</xs:complexType>
			<xs:complexType name="SonglengthType">
				<xs:sequence>
					<xs:element name="minutes" type="xs:nonNegativeInteger"/>
					<xs:element name="seconds">
						<xs:simpleType>
							<xs:restriction base="xs:nonNegativeInteger">
								<xs:maxInclusive value="59"/>
								<xs:minInclusive value="0"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:element>
				</xs:sequence>
			</xs:complexType>
			<xs:element name="crewMembers" type="CrewMembersType"/>
			<xs:element name="nameOfArtist" type="NonEmptyStringType"/>
			<xs:element name="nameOfRecord" type="NonEmptyStringType"/>
			<xs:complexType name="CrewMembersType">
				<xs:sequence>
					<xs:element maxOccurs="unbounded" name="memberName" type="NonEmptyStringType"/>
				</xs:sequence>
			</xs:complexType>
		</xs:schema>
		<decomposition id="OverseeMusic" isRootNet="true" xsi:type="NetFactsType">
			<name>Oversee Music</name>
			<inputParam>
				<name>nameOfArtist</name>
				<type>NonEmptyStringType</type>
				<initialValue>fred</initialValue>
			</inputParam>
			<localVariable>
				<name>songlist</name>
				<type>SonglistType</type>
			</localVariable>
			<localVariable>
				<name>proceed</name>
				<type>boolean</type>
				<namespace>http://www.w3.org/2001/XMLSchema</namespace>
				<initialValue>true</initialValue>
			</localVariable>
			<localVariable>
				<name>format</name>
				<type>FormatType</type>
				<initialValue>lp</initialValue>
			</localVariable>
			<localVariable>
				<name>nameOfRecord</name>
				<type>NonEmptyStringType</type>
			</localVariable>
			<processControlElements>
				<inputCondition id="input">
					<flowsInto>
						<nextElementRef id="decideName"/>
					</flowsInto>
				</inputCondition>
				<task id="decideName">
					<flowsInto>
						<nextElementRef id="decideSongs"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="/OverseeMusic/nameOfArtist"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
					</startingMappings>
					<completedMappings>
						<mapping>
							<expression query="/DecideAlbumName/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
					</completedMappings>
					<decomposesTo id="DecideAlbumName"/>
				</task>
				<task id="decideSongs">
					<name>Decide Which Songs to Record</name>
					<documentation>This is where one decides which songs to record.</documentation>
					<flowsInto>
						<nextElementRef id="record"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<removesTokens id="record"/>
					<startingMappings>
						<mapping>
							<expression query="/OverseeMusic/nameOfArtist"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
					</startingMappings>
					<completedMappings>
						<mapping>
							<expression query="/DecideWhichSongsToRecord/songlist"/>
							<mapsTo>songlist</mapsTo>
						</mapping>
					</completedMappings>
					<decomposesTo id="DecideWhichSongsToRecord"/>
				</task>
				<task id="record" xsi:type="MultipleInstanceExternalTaskFactsType">
					<flowsInto>
						<nextElementRef id="selectSongs"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="&lt;nameOfPerformer&gt;{for $d in /OverseeMusic/nameOfArtist return $d/text()}&lt;/nameOfPerformer&gt;"/>
							<mapsTo>nameOfPerformer</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
					</startingMappings>
					<decomposesTo id="RecordSong"/>
					<minimum>1</minimum>
					<maximum>10</maximum>
					<threshold>4</threshold>
					<creationMode code="dynamic"/>
					<miDataInput>
						<expression query="&lt;songlist&gt;{if ( count(/OverseeMusic/songlist/*) &gt; 0) then /OverseeMusic/songlist/* else /OverseeMusic/songList_backup/* }&lt;/songlist&gt;"/>
						<splittingExpression query="for $d in /songlist/* return &lt;songLocal&gt; { for $e in $d/* return $e } &lt;/songLocal&gt;"/>
						<formalInputParam>songLocal</formalInputParam>
					</miDataInput>
					<miDataOutput>
						<formalOutputExpression query="/RecordSong/songLocal"/>
						<outputJoiningExpression query="&lt;songlist&gt;{for $d in /RecordSong/songLocal return &lt;song&gt;{ for $e in $d/* return $e }&lt;/song&gt;}&lt;/songlist&gt;"/>
						<resultAppliedToLocalVariable>songlist</resultAppliedToLocalVariable>
					</miDataOutput>
				</task>
				<task id="selectSongs">
					<flowsInto>
						<nextElementRef id="decideFormat"/>
						<isDefaultFlow/>
					</flowsInto>
					<flowsInto>
						<nextElementRef id="decideSongs"/>
						<predicate ordering="1">/OverseeMusic/proceed = 'false'</predicate>
					</flowsInto>
					<join code="and"/>
					<split code="xor"/>
					<startingMappings>
						<mapping>
							<expression query="/OverseeMusic/nameOfArtist"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/songlist"/>
							<mapsTo>songlist</mapsTo>
						</mapping>
					</startingMappings>
					<completedMappings>
						<mapping>
							<expression query="/SelectSongsForBurning/songlist"/>
							<mapsTo>songlist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/SelectSongsForBurning/proceed"/>
							<mapsTo>proceed</mapsTo>
						</mapping>
					</completedMappings>
					<decomposesTo id="SelectSongsForBurning"/>
				</task>
				<task id="decideFormat">
					<flowsInto>
						<nextElementRef id="decideSequence"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="/OverseeMusic/songlist"/>
							<mapsTo>songlist</mapsTo>
						</mapping>
					</startingMappings>
					<completedMappings>
						<mapping>
							<expression query="/DecideLPorAlbum/format"/>
							<mapsTo>format</mapsTo>
						</mapping>
					</completedMappings>
					<decomposesTo id="DecideLPorAlbum"/>
				</task>
				<task id="decideSequence">
					<flowsInto>
						<nextElementRef id="burnMaster"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="/OverseeMusic/nameOfArtist"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/songlist"/>
							<mapsTo>songlist</mapsTo>
						</mapping>
					</startingMappings>
					<completedMappings>
						<mapping>
							<expression query="/SortSongsIntoAppropriateOrder/songlist"/>
							<mapsTo>songlist</mapsTo>
						</mapping>
					</completedMappings>
					<decomposesTo id="SortSongsIntoAppropriateOrder"/>
				</task>
				<task id="burnMaster">
					<flowsInto>
						<nextElementRef id="designCover"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="/OverseeMusic/nameOfArtist"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/songlist"/>
							<mapsTo>songlist</mapsTo>
						</mapping>
					</startingMappings>
					<decomposesTo id="BurnMasterRecording"/>
				</task>
				<task id="designCover">
					<flowsInto>
						<nextElementRef id="finis"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="/OverseeMusic/nameOfArtist"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
						<mapping>
							<expression query="/OverseeMusic/songlist"/>
							<mapsTo>songlist</mapsTo>
						</mapping>
					</startingMappings>
					<decomposesTo id="DesignTheCover"/>
				</task>
				<outputCondition id="finis">
					<name>Finished case</name>
					<documentation>When a token arrives here the case is done, because this net has proper completion.</documentation>
				</outputCondition>
			</processControlElements>
		</decomposition>
		<decomposition id="RecordSong" xsi:type="NetFactsType">
			<name>Record Song</name>
			<documentation>The only decomposed net.</documentation>
			<inputParam>
				<name>songLocal</name>
				<type>SongType</type>
				<mandatory/>
			</inputParam>
			<inputParam>
				<name>nameOfPerformer</name>
				<type>NonEmptyStringType</type>
			</inputParam>
			<inputParam>
				<name>nameOfRecord</name>
				<type>NonEmptyStringType</type>
			</inputParam>
			<outputParam>
				<name>songLocal</name>
				<type>SongType</type>
				<mandatory/>
			</outputParam>
			<localVariable>
				<element>crewMembers</element>
			</localVariable>
			<localVariable>
				<name>crewMembersBackup</name>
				<type>CrewMembersType</type>
				<initialValue>&lt;crewMembersBackup&gt;&lt;memberName&gt;fred&lt;/memberName&gt;&lt;/crewMembersBackup&gt;</initialValue>
			</localVariable>
			<localVariable>
				<name>ok</name>
				<type>boolean</type>
				<namespace>http://www.w3.org/2001/XMLSchema</namespace>
			</localVariable>
			<processControlElements>
				<inputCondition id="inputMakeSong">
					<name>Input</name>
					<documentation>The input condition of the decomposed net!</documentation>
					<flowsInto>
						<nextElementRef id="prepare"/>
					</flowsInto>
				</inputCondition>
				<task id="prepare">
					<flowsInto>
						<nextElementRef id="recordTracks"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<removesTokens id="recordTracks"/>
					<removesTokens id="mix"/>
					<startingMappings>
						<mapping>
							<expression query="&lt;nameOfArtist&gt; { /RecordSong/nameOfPerformer/text() } &lt;/nameOfArtist&gt;"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/RecordSong/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;song&gt; { /RecordSong/songLocal/* } &lt;/song&gt;"/>
							<mapsTo>song</mapsTo>
						</mapping>
					</startingMappings>
					<completedMappings>
						<mapping>
							<expression query="&lt;crewMembers&gt;{ /Prepare/crewMembers/* }&lt;/crewMembers&gt;"/>
							<mapsTo>crewMembers</mapsTo>
						</mapping>
					</completedMappings>
					<decomposesTo id="Prepare"/>
				</task>
				<task id="recordTracks">
					<flowsInto>
						<nextElementRef id="mix"/>
					</flowsInto>
					<join code="and"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="&lt;nameOfArtist&gt; { /RecordSong/nameOfPerformer/text() } &lt;/nameOfArtist&gt;"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/RecordSong/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;song&gt; { /RecordSong/songLocal/* } &lt;/song&gt;"/>
							<mapsTo>song</mapsTo>
						</mapping>
					</startingMappings>
					<decomposesTo id="RecordTracks"/>
				</task>
				<task id="mix">
					<flowsInto>
						<nextElementRef id="evaluateMix"/>
					</flowsInto>
					<join code="xor"/>
					<split code="and"/>
					<startingMappings>
						<mapping>
							<expression query="&lt;nameOfArtist&gt; { /RecordSong/nameOfPerformer/text() } &lt;/nameOfArtist&gt;"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/RecordSong/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;song&gt; { /RecordSong/songLocal/* } &lt;/song&gt;"/>
							<mapsTo>song</mapsTo>
						</mapping>
					</startingMappings>
					<decomposesTo id="PerformTheMix"/>
				</task>
				<task id="evaluateMix">
					<flowsInto>
						<nextElementRef id="mix"/>
						<predicate ordering="2">average rating &lt; 3 out of 5</predicate>
					</flowsInto>
					<flowsInto>
						<nextElementRef id="finishedRecordSong"/>
						<isDefaultFlow/>
					</flowsInto>
					<join code="and"/>
					<split code="xor"/>
					<startingMappings>
						<mapping>
							<expression query="&lt;nameOfArtist&gt; { /RecordSong/nameOfPerformer/text() } &lt;/nameOfArtist&gt;"/>
							<mapsTo>nameOfArtist</mapsTo>
						</mapping>
						<mapping>
							<expression query="/RecordSong/nameOfRecord"/>
							<mapsTo>nameOfRecord</mapsTo>
						</mapping>
						<mapping>
							<expression query="&lt;song&gt; { /RecordSong/songLocal/* } &lt;/song&gt;"/>
							<mapsTo>song</mapsTo>
						</mapping>
					</startingMappings>
					<completedMappings>
						<mapping>
							<expression query="/EvaluateMix/ok"/>
							<mapsTo>ok</mapsTo>
						</mapping>
					</completedMappings>
					<decomposesTo id="EvaluateMix"/>
				</task>
				<outputCondition id="finishedRecordSong"/>
			</processControlElements>
		</decomposition>
		<decomposition id="DecideAlbumName" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
				<mandatory/>
			</inputParam>
			<outputParam>
				<element>nameOfRecord</element>
				<mandatory/>
			</outputParam>
		</decomposition>
		<decomposition id="DecideWhichSongsToRecord" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
			</inputParam>
			<inputParam>
				<element>nameOfRecord</element>
			</inputParam>
			<outputParam>
				<name>songlist</name>
				<type>SonglistType</type>
				<mandatory/>
			</outputParam>
		</decomposition>
		<decomposition id="SelectSongsForBurning" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
			</inputParam>
			<inputParam>
				<element>nameOfRecord</element>
			</inputParam>
			<inputParam>
				<name>songlist</name>
				<type>SonglistType</type>
			</inputParam>
			<outputParam>
				<name>songlist</name>
				<type>SonglistType</type>
				<mandatory/>
			</outputParam>
			<outputParam>
				<name>proceed</name>
				<type>boolean</type>
				<namespace>http://www.w3.org/2001/XMLSchema</namespace>
			</outputParam>
		</decomposition>
		<decomposition id="DecideLPorAlbum" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<name>songlist</name>
				<type>SonglistType</type>
			</inputParam>
			<outputParam>
				<name>format</name>
				<type>FormatType</type>
				<mandatory/>
			</outputParam>
		</decomposition>
		<decomposition id="SortSongsIntoAppropriateOrder" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
			</inputParam>
			<inputParam>
				<element>nameOfRecord</element>
			</inputParam>
			<inputParam>
				<name>songlist</name>
				<type>SonglistType</type>
			</inputParam>
			<outputParam>
				<name>songlist</name>
				<type>SonglistType</type>
			</outputParam>
		</decomposition>
		<decomposition id="BurnMasterRecording" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
			</inputParam>
			<inputParam>
				<element>nameOfRecord</element>
			</inputParam>
			<inputParam>
				<name>songlist</name>
				<type>SonglistType</type>
			</inputParam>
		</decomposition>
		<decomposition id="DesignTheCover" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
			</inputParam>
			<inputParam>
				<element>nameOfRecord</element>
			</inputParam>
			<inputParam>
				<name>songlist</name>
				<type>SonglistType</type>
			</inputParam>
		</decomposition>
		<decomposition id="Prepare" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
			</inputParam>
			<inputParam>
				<element>nameOfRecord</element>
			</inputParam>
			<inputParam>
				<name>song</name>
				<type>SongType</type>
			</inputParam>
			<outputParam>
				<element>crewMembers</element>
			</outputParam>
		</decomposition>
		<decomposition id="RecordTracks" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
			</inputParam>
			<inputParam>
				<element>nameOfRecord</element>
			</inputParam>
			<inputParam>
				<name>song</name>
				<type>SongType</type>
			</inputParam>
		</decomposition>
		<decomposition id="PerformTheMix" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
			</inputParam>
			<inputParam>
				<element>nameOfRecord</element>
			</inputParam>
			<inputParam>
				<name>song</name>
				<type>SongType</type>
			</inputParam>
		</decomposition>
		<decomposition id="EvaluateMix" xsi:type="WebServiceGatewayFactsType">
			<inputParam>
				<element>nameOfArtist</element>
			</inputParam>
			<inputParam>
				<element>nameOfRecord</element>
			</inputParam>
			<inputParam>
				<name>song</name>
				<type>SongType</type>
			</inputParam>
			<outputParam>
				<name>ok</name>
				<type>boolean</type>
				<namespace>http://www.w3.org/2001/XMLSchema</namespace>
			</outputParam>
		</decomposition>
	</specification>
</specificationSet>
