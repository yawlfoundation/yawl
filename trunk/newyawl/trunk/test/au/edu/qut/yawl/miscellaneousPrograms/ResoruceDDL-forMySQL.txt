# YAWL Organisational Model Database Definition and Initialisation Script
# by Lachlan Aldred for use with the MySQL database system.


#-- Create yawlResources database.
create database yawlResources;  
use yawlResources;


#-- Create new table ResourceCapability.
#-- ResourceCapability : Resource has Capability
#-- 	ResourceName : Resource has Capability
#-- 	ComplexAttributeName : Resource has Capability
#-- 		ComplexAttribute is a Capability
#-- 		Role two (ComplexAttributename) of fact: ComplexAttribute is identified by {ComplexAttributename}.  
create table ResourceCapability ( 
	ResourceName CHAR(30) not null,
	CapabilityAttribute CHAR(30) not null, constraint ResourceCapability_PK primary key (ResourceName, CapabilityAttribute) )  ;

#-- Create new table PositionParticipatesRole.
#-- PositionParticipatesRole : Position participates in Role
#-- 	PositionTitle : Position participates in Role
#-- 	RoleName : Position participates in Role  
create table PositionParticipatesRole (
 	PositionTitle CHAR(30) not null,
	RoleName CHAR(30) not null, constraint PositionParticipatesRole_PK primary key (PositionTitle, RoleName) )  ;

#-- Create new table HumanResourceOccupiesPosition.
#-- HumanResourceOccupiesPosition : HumanResource occupies Position
#-- 	ResourceName : HumanResource occupies Position
#-- 		Resource is a HumanResource
#-- 		Role two (Resourcename) of fact: Resource is identified by {Resourcename}.
#-- 	PositionTitle : HumanResource occupies Position  
create table HumanResourceOccupiesPosition ( 
	PersonName CHAR(30) not null,
	PositionTitle CHAR(30) not null, constraint HumanResourceOccupiesPosition_PK primary key (PersonName, PositionTitle) )  ;

#-- Create new table OrgGroupingPartOrgGrouping.
#-- OrgGroupingPartOrgGrouping : OrgGrouping is part of OrgGrouping
#-- 	OrgGroupingPartOfOrgGroupingName : OrgGrouping is part of OrgGrouping
#-- 	PartOrgGroupingOrgGroupingName : OrgGrouping is part of OrgGrouping  
create table OrgSubgrouping ( 
	OrgGrouping CHAR(30) not null,
	OrgSubgrouping CHAR(30) not null, constraint OrgGroupingPartOrgGrouping_PK primary key (OrgGrouping, OrgSubgrouping) )  ;

#-- Create new table PositionPossessesPrivilege.
#-- PositionPossessesPrivilege : Position possesses Privilege
#-- 	PositionTitle : Position possesses Privilege
#-- 	PrivilegeDesc : Position possesses Privilege  
create table PositionPossessesPrivilege ( 
	PositionTitle CHAR(30) not null,
	PrivilegeDesc CHAR(30) not null, constraint PositionPossessesPrivilege_PK primary key (PositionTitle, PrivilegeDesc) )  ;

#-- Create new table RoleIncorporatesRole.
#-- RoleIncorporatesRole : Role incorporates Role
#-- 	RoleIncorporatesRoleName : Role incorporates Role
#-- 	IncorporatesRoleRoleName : Role incorporates Role  
create table RoleIncorporatesRole ( 
	IncorporatingRole CHAR(30) not null,
	IncorporatedRole CHAR(30) not null, constraint RoleIncorporatesRole_PK primary key (IncorporatingRole, IncorporatedRole) )  ;

#-- Create new table PositionSubstitutePositionFromDateDate.
#-- PositionSubstitutePositionFromDateDate :  Position has substitute Position from Date to Date
#-- 	PositionSubstitutePositionTitle : Role one (Position) of fact:  {Position} has substitute Position from Date to Date.
#-- 	SubstitutePositionFromPositionTitle : Role two (Position) of fact:  Position has substitute {Position} from Date to Date.
#-- 	FromDate : Role three (Date) of fact:  Position has substitute Position from {Date} to Date.
#-- 	Date : Role four (Date) of fact:  Position has substitute Position from Date to {Date}.  
create table PositionSubstitutions ( 
	Position CHAR(30) not null,
	SubstituteToPosition CHAR(30) not null,
	FromDate DATE not null,
	ToDate DATE not null, constraint PositionSubstitutePositionFromDateDate_PK primary key (Position, FromDate, ToDate) )  ;

#-- Create new table PositionDelegateWorkItemsPosition.
#-- PositionDelegateWorkItemsPosition : Position can delegate work items to Position
#-- 	PositionDelegateWorkItemsToPositionTitle : Position can delegate work items to Position
#-- 	DelegateWorkItemsPositionPositionTitle : Position can delegate work items to Position  
create table PositionDelegateWorkItems ( 
	PositionDelegateFrom CHAR(30) not null,
	PositionDelegateTo CHAR(30) not null, constraint PositionDelegateWorkItemsPosition_PK primary key (PositionDelegateFrom, PositionDelegateTo) )  ;

#-- Create new table ConsumableResourceCapacity.
#-- ConsumableResourceCapacity : Consumable Resource has Capacity
#-- 	ResourceName : Consumable Resource has Capacity
#-- 		Non-Human Resource is a Consumable Resource
#-- 		Resource is a Non-Human Resource
#-- 		Role two (Resourcename) of fact: Resource is identified by {Resourcename}.
#-- 	InvolvingUnit : Consumable Resource has Capacity
#-- 	Qty : Consumable Resource has Capacity  
create table ConsumableResourceCapacity ( 
	ResourceName CHAR(30) not null,
	InvolvingUnit CHAR(30) not null,
	Qty CHAR(30) not null, constraint ConsumableResourceCapacity_PK primary key (ResourceName, InvolvingUnit, Qty) )  ;

#-- Create new table ResourceFeature.
#-- ResourceFeature : Resource has Feature
#-- 	ResourceName : Resource has Feature
#-- 	ComplexAttributeName : Resource has Feature
#-- 		ComplexAttribute is a Feature
#-- 		Role two (ComplexAttributename) of fact: ComplexAttribute is identified by {ComplexAttributename}.  
create table ResourceFeature ( 
	ResourceName CHAR(30) not null,
	FeatureAttribute CHAR(30) not null, constraint ResourceFeature_PK primary key (ResourceName, FeatureAttribute) )  ;

#-- Create new table ComplexAttributeComprisedAttribute.
#-- ComplexAttributeComprisedAttribute : ComplexAttribute is comprised of Attribute / Attribute is of ComplexAttribute
#-- 	ComplexAttributeName : ComplexAttribute is comprised of Attribute
#-- 	AttributeName : Attribute is of ComplexAttribute  
create table ComplexAttributeComposedOf ( 
	ComplexAttributeName CHAR(30) not null,
	AttributeName CHAR(30) not null, constraint ComplexAttributeComprisedAttribute_PK primary key (ComplexAttributeName, AttributeName) )  ;

#-- Create new table Resource.
#-- Resource : Table of Resource
#-- 	ResourceName : Resource is identified by Resourcename
#-- 	PerHourRateAmount$ : Resource has per hour rate Amount
#-- 	PerJobCostAmount$ : Resource has per job cost Amount
#-- 	RateUsagePerUnit : Consumable Resource has Rate of Usage
#-- 	RateUsageInvolvingUnit : Consumable Resource has Rate of Usage
#-- 	RateUsageQty : Consumable Resource has Rate of Usage
#-- 	BasisUsageType : Non-Human Resource has Basis of Usage
#-- 	ResourceTypeIndicator : Resource is of ResourceType  
create table Resource ( 
	ResourceName CHAR(30) not null,
	PerHourRateAmount$ CHAR(10) null,
	PerJobCostAmount$ CHAR(10) null,
	RateUsagePerUnit CHAR(30) null,
	RateUsageInvolvingUnit CHAR(30) null,
	RateUsageQty CHAR(30) null,
	BasisUsageType enum('Durable','Consumable') null,
	ResourceTypeIndicator enum('Human','Non-Human') not null, constraint Resource_PK primary key (ResourceName) )  ;

#-- Create new table Position.
#-- Position : Table of Position
#-- 	PositionTitle : Position is identified by Positiontitle
#-- 	DirectReportPositionTitle : Position has subordinates Position
#-- 	MemberOrgGroupingName : Position is a member of OrgGrouping  
create table Position ( 
	PositionTitle CHAR(30) not null,
	ReportsDirectlyToPosition CHAR(30) null,
	MemberOrgGroupingName CHAR(30) null, constraint Position_PK primary key (PositionTitle) )  ;

#-- Create new table OrgGrouping.
#-- OrgGrouping : Table of OrgGrouping
#-- 	OrgGroupingName : OrgGrouping is identified by OrgGroupingname
#-- 	OrgGroupTypeName : OrgGrouping is of OrgGroupType  
create table OrgGrouping ( 
	OrgGroupingName CHAR(30) not null,
	OrgGroupTypeName enum ('Group','Unit','Team','Branch','Division','Organisation') not null, constraint OrgGrouping_PK primary key (OrgGroupingName) )  ;

#-- Create new table Entry.
#-- Entry : Table of Entry
#-- 	ResultAction : Entry has result Action
#-- 	WorkItemId : Entry relates to WorkItem
#-- 		Role two (WorkItem) of fact: Entry relates to {WorkItem}.
#-- 		Role two (WorkItemid) of fact: WorkItem is identified by {WorkItemid}.
#-- 	PointInTimeDateTime : Entry occurred at PointInTime
#-- 		Role two (PointInTime) of fact: Entry occurred at {PointInTime}.
#-- 		Role two (dateTime) of fact: PointInTime is identified by {dateTime}.
#-- 	HumanResourceHistoryResourceName : HumanResource has history Entry
#-- 		Resource is a HumanResource
#-- 		Role two (Resourcename) of fact: Resource is identified by {Resourcename}.  
create table Entry ( 
	ResultAction enum ('commenced','completed','failed','suspended','resumed','cancelled') not null,
	WorkItemId CHAR(50) not null,
	PointInTime DATETIME not null,
	InvolvesPerson CHAR(30) not null, constraint Entry_PK primary key (ResultAction, WorkItemId, PointInTime) )  ;

#-- Create new table ComplexAttribute.
#-- ComplexAttribute : Table of ComplexAttribute
#-- 	ComplexAttributeName : ComplexAttribute is identified by ComplexAttributename
#-- 	CorrectAsDateTimeTimepoint : Feature correct as at DateTime
#-- 	AttributeKindType : AttributeKind is of ComplexAttribute  
create table ComplexAttribute ( 
	ComplexAttributeName CHAR(30) not null,
	AttributeKindType enum ('Feature','Capability') not null,
	FeatureValidAt DATETIME null, constraint ComplexAttribute_PK primary key (ComplexAttributeName));

#-- Create new table AttributeResourceValue.
#-- AttributeResourceValue : Table of AttributeResourceValue
#-- 	AttributeName : Role one (Attribute) of fact:  {Attribute} belongs to Resource has Value.
#-- 		Role one (Attribute) of fact:  {Attribute} belongs to Resource has Value.
#-- 		Role two (Attributename) of fact: Attribute is identified by {Attributename}.
#-- 	ResourceName : Role two (Resource) of fact:  Attribute belongs to {Resource} has Value.
#-- 		Role two (Resource) of fact:  Attribute belongs to {Resource} has Value.
#-- 		Role two (Resourcename) of fact: Resource is identified by {Resourcename}.
#-- 	HasValue : Role three (Value) of fact:  Attribute belongs to Resource has {Value}.
#-- 	EndTimeDateTimeTimepoint : DateTime is of AttributeResourceValue
#-- 	BeginTimeDateTimeTimepoint : DateTime is of AttributeResourceValue  
create table AttributeResourceValue ( 
	AttributeName VARCHAR(50) not null,
	ResourceName CHAR(30) not null,
	HasValue VARCHAR(50) not null,
	EndTime DATETIME null,
	BeginTime DATETIME null, constraint AttributeResourceValue_PK primary key (AttributeName, ResourceName, HasValue) )  ;

#-- Create new table Attribute.
#-- Attribute : Table of Attribute
#-- 	AttributeName : Attribute is identified by Attributename
#-- 	RepresentsDataTypeTypedef : DataType is of Attribute  
create table Attribute ( 
	AttributeName VARCHAR(50) not null,
	RepresentsDataType TEXT not null, constraint Attribute_PK primary key (AttributeName) )  ;

#-- Create new table Appointment.
#-- Appointment : Table of Appointment
#-- 	StartsPointInTimePointInTimeDateTime : Appointment starts at PointInTime
#-- 		Role two (PointInTime) of fact: Appointment starts at {PointInTime}.
#-- 		Role two (dateTime) of fact: PointInTime is identified by {dateTime}.
#-- 	FinishesPointInTimePointInTimeDateTime : Appointment finishes at PointInTime
#-- 		Role two (PointInTime) of fact: Appointment finishes at {PointInTime}.
#-- 		Role two (dateTime) of fact: PointInTime is identified by {dateTime}.
#-- 	WorkItemId : Appointment relates to WorkItem
#-- 		Role two (WorkItem) of fact: Appointment relates to {WorkItem}.
#-- 		Role two (WorkItemid) of fact: WorkItem is identified by {WorkItemid}.
#-- 	HumanResourceScheduledResourceName : HumanResource has scheduled Appointment
#-- 		Resource is a HumanResource
#-- 		Role two (Resourcename) of fact: Resource is identified by {Resourcename}.  
create table Appointment ( 
	StartsAt DATETIME not null,
	FinishesAt DATETIME not null,
	WorkItemId CHAR(50) not null,
	ByPerson CHAR(30) not null, constraint Appointment_PK primary key (StartsAt, FinishesAt, WorkItemId) )  ;

#-- Add foreign key constraints to table ResourceCapability.
alter table ResourceCapability
	add constraint Resource_ResourceCapability_FK1 foreign key (
		ResourceName)
	 references Resource (
		ResourceName)  ;

alter table ResourceCapability
	add constraint ComplexAttribute_ResourceCapability_FK1 foreign key (
		CapabilityAttribute)
	 references ComplexAttribute (
		ComplexAttributeName)  ;

#-- Add foreign key constraints to table HumanResourceOccupiesPosition.
alter table HumanResourceOccupiesPosition
	add constraint Resource_HumanResourceOccupiesPosition_FK1 foreign key (
		PersonName)
	 references Resource (
		ResourceName)  ;

#-- Add foreign key constraints to table OrgGroupingPartOrgGrouping.
alter table OrgSubgrouping
	add constraint OrgGrouping_OrgGroupingPartOrgGrouping_FK1 foreign key (
		OrgGrouping)
	 references OrgGrouping (
		OrgGroupingName)  ;

alter table OrgSubgrouping
	add constraint OrgGrouping_OrgGroupingPartOrgGrouping_FK2 foreign key (
		OrgSubgrouping)
	 references OrgGrouping (
		OrgGroupingName)  ;

#-- Add foreign key constraints to table ConsumableResourceCapacity.
alter table ConsumableResourceCapacity
	add constraint Resource_ConsumableResourceCapacity_FK1 foreign key (
		ResourceName)
	 references Resource (
		ResourceName)  ;

#-- Add foreign key constraints to table ResourceFeature.
alter table ResourceFeature
	add constraint Resource_ResourceFeature_FK1 foreign key (
		ResourceName)
	 references Resource (
		ResourceName)  ;

alter table ResourceFeature
	add constraint ComplexAttribute_ResourceFeature_FK1 foreign key (
		FeatureAttribute)
	 references ComplexAttribute (
		ComplexAttributeName)  ;

#-- Add foreign key constraints to table ComplexAttributeComprisedAttribute.
alter table ComplexAttributeComposedOf
	add constraint ComplexAttribute_ComplexAttributeComprisedAttribute_FK1 foreign key (
		ComplexAttributeName)
	 references ComplexAttribute (
		ComplexAttributeName)  ;

alter table ComplexAttributeComposedOf
	add constraint Attribute_ComplexAttributeComprisedAttribute_FK1 foreign key (
		AttributeName)
	 references Attribute (
		AttributeName)  ;

#-- Add foreign key constraints to table Position.
alter table Position
	add constraint OrgGrouping_Position_FK1 foreign key (
		MemberOrgGroupingName)
	 references OrgGrouping (
		OrgGroupingName)  ;

#-- Add foreign key constraints to table Entry.
alter table Entry
	add constraint Resource_Entry_FK1 foreign key (
		InvolvesPerson)
	 references Resource (
		ResourceName)  ;

#-- Add foreign key constraints to table AttributeResourceValue.
alter table AttributeResourceValue
	add constraint Attribute_AttributeResourceValue_FK1 foreign key (
		AttributeName)
	 references Attribute (
		AttributeName)  ;

alter table AttributeResourceValue
	add constraint Resource_AttributeResourceValue_FK1 foreign key (
		ResourceName)
	 references Resource (
		ResourceName)  ;

#-- Add foreign key constraints to table Appointment.
alter table Appointment
	add constraint Resource_Appointment_FK1 foreign key (
		ByPerson)
	 references Resource (
		ResourceName)  ;

#-- Add procedures and rules implied by various constraints.
#-- The constraint:
#--      No Resource that has per job cost some Amount has per hour rate some Amount.
#-- is enforced by the following DDL.

alter table Resource
	add constraint Resource_excl1
	 check ((PerJobCostAmount$ is null) or
                (PerHourRateAmount$ is null)) ;

####################################################################################
# Now to populate the database with some "standard" data
####################################################################################

INSERT into table complexattribute values
('GPSLocation', 'Feature', NULL);

#INSERT into table 




