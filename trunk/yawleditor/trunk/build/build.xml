<project name="YAWLEditor" default="buildJars" basedir="./..">

    <!--
	YAWL Editor Ant build script. Requires Ant v1.7+

	As a convention, only those targets normally run directly are given a
	description attribute. Targets are split into categories and listed in
	a rough 'top-down' order for ease of understanding
    -->


	<!-- =========INITIAL PROPERTIES, FILTERS, FILESETS & CHECKS=========== -->

    <!--
    	Load properties from file
    -->
	<property name="build.dir" value="build" />
    <property file="${build.dir}/build.properties" />

    <property name="version" value="${editor.release.number}"/>

    <!--
    	Current editor and engine version numbers (from properties file)
    -->
    <filter token="EditorReleaseNumber" value="${editor.release.number}" />
    <filter token="CompatibleEngineReleaseNumber" value="${compatible.engine.release.number}" />

    <!--
    	Define root class name, path and directories
    -->
    <property name="root.class.name" value="YAWLEditor" />
    <property name="root.launcher.name" value="YLauncher" />
    <property name="root.source.file" value="${root.launcher.name}.java" />
    <property name="package.base.dir" value="org/yawlfoundation/yawl" />
    <property name="package.dir" value="${package.base.dir}/editor" />
    <property name="root.classpath"
              value="org.yawlfoundation.yawl.editor.ui.${root.class.name}" />
    <property name="root.launcher"
              value="org.yawlfoundation.yawl.editor.ui.${root.launcher.name}" />
    <property name="root.source.file.path" value="${package.dir}/ui/${root.source.file}" />
    <property name="java.target.version" value="1.6" />

    <!--
    	Define input & output directories
    -->
	<property name="tempBuild.dir" value="temp" />
    <property name="source.dir" value="source" />
    <property name="classes.dir" value="classes" />
    <property name="output.dir" value="output" />
    <property name="library.dir" value="lib" />
    <property name="tools.dir" value="tools" />
    <property name="manual.dir" value="manual" />
    <property name="javadoc.dir" value="${output.dir}/javadoc" />
    <property name="analyzer.dir" value="${build.dir}/analyzer" />

    <!--
    	Define output file names
    -->
    <property name="source.zip"
              value="${root.class.name}${editor.release.number}Source.zip" />
    <property name="release.zip"
              value="${root.class.name}${editor.release.number}.zip" />
    <property name="ui.jar.name"
              value="${root.class.name}${editor.release.number}.jar" />
    <property name="core.jar.name"
              value="${root.class.name}-core-${editor.release.number}.jar" />
    <property name="analyser.jar.name"
              value="${root.class.name}-analyser-${editor.release.number}.jar" />
    <property name="configuration.plugin.jar.name"
              value="${root.class.name}-configuration-${editor.release.number}.jar" />
    <property name="decoratortoolbar.plugin.jar.name"
              value="${root.class.name}-decobar-${editor.release.number}.jar" />
    <property name="icons.jar.name"
              value="${root.class.name}-icons.jar" />
    <property name="jgraph.jar.name"
              value="jgraph4yawl-${editor.release.number}.jar" />

	<!--
		Define all Editor code dependencies. Since the Editor makes use of
		YAWL services code, there are runtime dependencies to libraries
		YAWL services code uses (and some of these libraries, such as log4j, are
		also used by Editor code and *not* stored in the Editor source tree to
		avoid compatibility and maintenance issues).

		Compiled YAWL services code and its dependencies are referenced by
		the properties file compatible.engine.* entries. We therefore define
        here:
			Editor-only dependencies (stored in the Editor source tree);
			any YAWL Services dependencies we know we *don't* need;
			the full set of required packages for the Complete build
	-->
    <property name="automaton" value="automaton.jar"/>
    <property name="bounce" value="bounce-0.18.jar"/>
    <property name="forms" value="forms_rt.jar"/>
    <property name="imgscalr" value="imgscalr-lib-4.2.jar"/>
    <property name="jcal" value="jcalendar-1.4.jar"/>
    <property name="goodies-common" value="jgoodies-common-1.6.0.jar"/>
    <property name="goodies-looks" value="jgoodies-looks-2.5.3.jar"/>
    <property name="l2fprod" value="l2fprod-common-all.jar"/>
    <property name="macify" value="macify-1.4.jar"/>
    <property name="servlet" value="servlet-api.jar"/>
	<property name="junit" value="junit-4.4.jar"/>

	<fileset id="editorOnlyDeps" dir="${library.dir}"
			 includes="${jcal} ${servlet} ${forms} ${bounce} ${imgscalr} ${macify}
			           ${goodies-common} ${goodies-looks} ${l2fprod} ${automaton}" />

	<fileset id="junitDeps" file="${tools.dir}/${junit}" />


    <!-- this set ensures only those engine libraries required are included -->
	<fileset id="neededEngineDeps"
			 dir="../${compatible.engine.depsLib}"
	    	 includes="commons-codec*.jar commons-lang*.jar dom4j*.jar jaxen*.jar
	    	           jdom*.jar log4j*.jar saxon9*.jar xercesImpl.jar"
	    	 excludes="saxon9-jdom.jar" />


	<!--
		Check YAWL Services dependencies are where we expect they are
	-->
	<fail message="Parent-relative Engine path ${compatible.engine.libJAR.path} not found">
		<condition>
			<available file="${compatible.engine.libJAR.path}" type="file" />
		</condition>
	</fail>
    
	<fail message="Parent-relative Engine path ${compatible.engine.depsLib} not found">
		<condition>
			<available file="${compatible.engine.depsLib}" type="dir" />
		</condition>
	</fail>


    <taskdef name="checkSums"
             classname="org.yawlfoundation.yawl.util.CheckSumTask"
             classpath="../${compatible.engine.libJAR.path}"/>


	<!-- ==================MAIN EDITOR BUILD TARGETS======================= -->

	<!--
		Build Editor with all dependencies in external JARs, which must
	    remain in a lib folder relative to the Editor JARs location (as set up
	    in the output directory). All dependencies are added explicitly to the
	    manifest's Class-Path, so the Editor can be run simply as java -jar ...
	-->
    <target name="buildUIJar"
            depends="compile"
  	        description="Build the Editor UI jar (the main jar)">

        <property name="manifestFile" value="${root.class.name}.mf" />

    	<manifestclasspath property="manifest_cp"
    					   jarfile="${output.dir}/${ui.jar.name}">
    		<classpath>
    			<fileset dir="${output.dir}/lib" includes="*.jar" />
    		</classpath>
    	</manifestclasspath>

        <manifest file="${manifestFile}">
            <attribute name="Main-Class" value="${root.launcher}" />
        	<attribute name="Class-Path" value="${manifest_cp}" />
            <attribute name="SplashScreen-Image"
                       value="${package.dir}/ui/resources/yawlSplashScreen.jpg" />
        </manifest>

        <propertyfile file="${build.dir}/version.properties">
            <entry key="Version" value="${editor.release.number}"/>
            <entry key="BuiltBy" value="${user.name}"/>
            <entry key="BuildDate" type="date" value="now"/>
            <entry key="BuildNumber" default="0" type="int" operation="+" value="1"/>
            <entry key="JavaVersion" value="${java.version}"/>
            <entry key="OS" value="${os.name}"/>
            <entry key="OSVersion" value="${os.version}"/>
        </propertyfile>
        <copy file="${build.dir}/version.properties"
              tofile="${classes.dir}/version.properties"/>

        <jar jarfile="${output.dir}/${ui.jar.name}"
             basedir="${classes.dir}"
             manifest="${manifestFile}"
             includes="${package.dir}/ui/** version.properties"
             excludes="**/Test*.class ${package.dir}/ui/resources/taskicons/**" />
        <checksum file="${output.dir}/${ui.jar.name}"/>
        <delete file="${manifestFile}" />
    </target>


    <target name="buildAnalyserJar"
            depends="compile,copyLibs"
  	        description="Build the Analyser library">

        <jar jarfile="${output.dir}/lib/${analyser.jar.name}"
             basedir="${classes.dir}"
             includes="${package.base.dir}/analyser/**"
             excludes="**/Test*.class" />
        <checksum file="${output.dir}/lib/${analyser.jar.name}"
                  toDir="${output.dir}"/>
    </target>


    <target name="buildConfigurationPluginJar"
            depends="compileConfigurationPlugin, copyLibs"
  	        description="Build the Configuration plugin">

        <mkdir dir="${output.dir}/plugins" />

        <manifestclasspath property="config_manifest_cp"
     			jarfile="${output.dir}/plugins/${configuration.plugin.jar.name}">
     		<classpath>
     			<fileset dir="${output.dir}/lib" includes="*.jar" />
                <fileset dir="${output.dir}" includes="${ui.jar.name}"/>
     		</classpath>
     	</manifestclasspath>
        <manifest file="config.mf">
         	<attribute name="Class-Path" value="${config_manifest_cp}" />
        </manifest>

        <copy toDir="${classes.dir}/${package.base.dir}/configuration/menu/icon">
            <fileset dir="${source.dir}/${package.base.dir}/configuration/menu/icon"/>
        </copy>

        <jar jarfile="${output.dir}/plugins/${configuration.plugin.jar.name}"
             basedir="${classes.dir}"
             manifest="config.mf"
             includes="${package.base.dir}/configuration/**"
             excludes="**/Test*.class" />
        <checksum file="${output.dir}/plugins/${configuration.plugin.jar.name}"
                  toDir="${output.dir}"/>
        <delete file="config.mf"/>
    </target>


    <target name="buildDecoratorToolBarPluginJar"
            depends="compileDecoratorToolBarPlugin, copyLibs"
  	        description="Build the Decorator ToolBar plugin">

        <mkdir dir="${output.dir}/plugins" />

        <manifestclasspath property="decobar_manifest_cp"
     			jarfile="${output.dir}/plugins/${decoratortoolbar.plugin.jar.name}">
     		<classpath>
     			<fileset dir="${output.dir}/lib" includes="*.jar" />
                <fileset dir="${output.dir}" includes="${ui.jar.name}"/>
     		</classpath>
     	</manifestclasspath>
        <manifest file="config.mf">
         	<attribute name="Class-Path" value="${decobar_manifest_cp}" />
        </manifest>

        <copy toDir="${classes.dir}/${package.base.dir}/decobar/icon">
            <fileset dir="${source.dir}/${package.base.dir}/decobar/icon"/>
        </copy>

        <jar jarfile="${output.dir}/plugins/${decoratortoolbar.plugin.jar.name}"
             basedir="${classes.dir}"
             manifest="config.mf"
             includes="${package.base.dir}/decobar/**" />
        <checksum file="${output.dir}/plugins/${decoratortoolbar.plugin.jar.name}"
                  toDir="${output.dir}"/>
        <delete file="config.mf"/>
    </target>


    <target name="buildResourcesJar"
            depends="copyLibs"
  	        description="Build the Resources library">

        <jar jarfile="${output.dir}/lib/${icons.jar.name}"
             basedir="${classes.dir}"
             includes="${package.dir}/ui/resources/taskicons/**"/>
        <checksum file="${output.dir}/lib/${icons.jar.name}"
                  toDir="${output.dir}"/>
    </target>


    <target name="buildCoreJar"
            depends="compile,copyLibs"
  	        description="Build the Editor Core library">

        <jar jarfile="${output.dir}/lib/${core.jar.name}"
             basedir="${classes.dir}"
             includes="${package.dir}/core/**"
             excludes="**/Test*.class" />
        <checksum file="${output.dir}/lib/${core.jar.name}"
                  toDir="${output.dir}"/>
    </target>


    <target name="buildJGraphJar"
            depends="compile,copyLibs"
  	        description="Build the Editor's modified JGraph library">

        <jar jarfile="${output.dir}/lib/${jgraph.jar.name}"
             basedir="${classes.dir}"
             includes="org/jgraph/**"
             excludes="**/Test*.class" />
        <checksum file="${output.dir}/lib/${jgraph.jar.name}"
                  toDir="${output.dir}"/>
    </target>


    <target name="copyLibs"
            depends="compile"
  	        description="Creates lib folder and copies in required jar libraries">

    	<mkdir dir="${output.dir}/lib" />
    	<copy todir="${output.dir}/lib">
    		<fileset refid="editorOnlyDeps" />
    		<fileset refid="neededEngineDeps" />
    		<fileset file="../${compatible.engine.libJAR.path}" />
    	</copy>
    </target>


    <target name="buildJars"
            depends="buildAnalyserJar,buildCoreJar,buildJGraphJar,buildResourcesJar,
                    buildUIJar,buildDecoratorToolBarPluginJar,buildConfigurationPluginJar"
            description="Builds all jars and copies required libraries"/>

    <!--
   		Create ZIP of source code (for release)
   	-->
   	<target name="zipRelease"
   	        depends="buildJars"
   	        description="Generate ZIP file of the editor jar and lib dir (for release)">

        <!-- increment build number -->
        <propertyfile file="${build.dir}/build.properties">
            <entry key="build.number" type="int" default="0" operation="+"/>
            <entry key="build.date" type="date" value="now" pattern="yyyy-MM-dd HH.mm.ss"/>
        </propertyfile>

        <!-- build checksums.xml for future update comparisons -->
        <checkSums rootdir="../${output.dir}" todir="../${output.dir}/lib"
                   includes="*.jar *.pdf"/>

   		<zip destfile="${output.dir}/${release.zip}">
            <zipfileset dir="${output.dir}" includes="${ui.jar.name}"/>
   	  	    <zipfileset dir="${output.dir}/lib" prefix="lib"/>
            <zipfileset dir="${output.dir}/plugins" prefix="plugins"/>
            <zipfileset dir="${manual.dir}" prefix="manual"/>
   		</zip>
    </target>


	<!--
		Generate javadoc for all non-test code (unlike javac, we have to
	    specify all source explicitly). Can be run separately, or as part of
	    a full build
	-->
    <target name="document"
            depends="initialize"
            description="Generate Javadocs for the source-code">

        <mkdir dir="${javadoc.dir}" />
        <javadoc packagenames="org.yawlfoundation.yawl.editor.*"
                 source="${java.target.version}"
                 destdir="${javadoc.dir}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="YAWLEditor ${editor.release.number} API">

        	<arg value="-J-Dhttp.proxyHost=${proxy.host}"/>
        	<arg value="-J-Dhttp.proxyPort=${proxy.port}"/>

        	<fileset dir="${source.dir}" defaultexcludes="yes">
        		<include name="**/*.java" />
        		<exclude name="**/Test*.java" />
        	</fileset>
        	<classpath>
        		<pathelement location="../${compatible.engine.libJAR.path}" />
        		<fileset refid="editorOnlyDeps" />
        		<fileset refid="neededEngineDeps" />
        	</classpath>
	        <doctitle>
	            <![CDATA[<h1>YAWLEditor ${editor.release.number} API</h1>]]>
	        </doctitle>
            <link offline="false" href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        </javadoc>
    </target>

	<!--
		Create ZIP of source code (for release)
	-->
	<target name="zipSourceCode"
	        depends="initialize"
	        description="Generate ZIP file of the source (for release)">
    
		<zip destfile="${output.dir}/${source.zip}">
            <zipfileset dir="${source.dir}" prefix="source"/>
	  	    <zipfileset dir="${library.dir}" prefix="lib"/>
		    <zipfileset dir="${tools.dir}" prefix="tools" />
            <zipfileset dir="${build.dir}" prefix="build" />
		</zip>
        <checksum file="${output.dir}/${source.zip}" />

        <copy todir="${output.dir}" filtering="true">
            <fileset file="${source.dir}/ReleaseNotes.txt"/>
            <fileset file="${source.dir}/ChangeLog.txt"/>
        </copy>
    </target>

	<!--
		Environment clean/initialisation tasks.
	-->
    <target name="clean">
        <echo message="Cleaning..."/>
        <delete dir="${classes.dir}" />
        <delete dir="${javadoc.dir}" />
        <delete dir="${output.dir}" />
    </target>


    <target name="initialize" depends="clean" unless="initialized">

        <!-- Create the time stamp & filter token for 'about' box -->
        <tstamp>
            <format property="buildDate" pattern="yyyy.MM.dd HH:mm:ss"/>
        </tstamp>
        <filter token="BuildDate" value="${buildDate}" />

        <!-- Create the distribution dir if it doesn't already exist -->
        <mkdir dir="${output.dir}" />
        <mkdir dir="${classes.dir}" />
        <property name="initialized" value="true"/>
    </target>

	<!--
		Compile non-test code, filtering source code first to complete
	     tokenized values (using build.properties supplied values)
	-->
    <target name="compile" depends="initialize">
        <copy todir="${classes.dir}/${package.dir}/ui/resources">
            <fileset dir="${source.dir}/${package.dir}/ui/resources">
                <include name="**/*" />
                <include name="**/*.*" />
            </fileset>
        </copy>

        <echo message="Compiling: ${root.source.file.path}" />
        <javac fork="yes"
               debug="yes"
               source="${java.target.version}"
               srcdir="${source.dir}"
               destdir="${classes.dir}">
            <include name="${root.source.file.path}" />
            <include name="${package.dir}/ui/plugin/YEditorPluginAdapter.java" />
            <classpath>
            	<pathelement location="../${compatible.engine.libJAR.path}" />
        		<fileset refid="editorOnlyDeps" />
            	<fileset refid="neededEngineDeps" />
            </classpath>
        </javac>
    </target>


    <target name="compileConfigurationPlugin" depends="initialize">
        <property name="base.file.configuration"
                  value="${package.base.dir}/configuration/ConfigurationPlugin.java"/>

        <echo message="Compiling: ${base.file.configuration}" />
        <javac fork="yes"
               debug="yes"
               source="${java.target.version}"
               srcdir="${source.dir}"
               destdir="${classes.dir}">
            <include name="${base.file.configuration}" />
            <classpath>
            	<pathelement location="../${compatible.engine.libJAR.path}" />
        		<fileset refid="editorOnlyDeps" />
            	<fileset refid="neededEngineDeps" />
            </classpath>
        </javac>
    </target>

    <target name="compileDecoratorToolBarPlugin" depends="initialize">
        <property name="base.file.decorator"
                  value="${package.base.dir}/decobar/DecoratorToolbarPlugin.java"/>

        <echo message="Compiling: ${base.file.decorator}" />
        <javac fork="yes"
               debug="yes"
               source="${java.target.version}"
               srcdir="${source.dir}"
               destdir="${classes.dir}">
            <include name="${base.file.decorator}" />
            <classpath>
            	<pathelement location="../${compatible.engine.libJAR.path}" />
        		<fileset refid="editorOnlyDeps" />
            	<fileset refid="neededEngineDeps" />
            </classpath>
        </javac>
    </target>


    <target name="analyze" depends="buildJars">
        <taskdef name="jaranalyzer"
                 classname="com.kirkk.analyzer.textui.JarAnalyzerTask">
            <classpath>
                <pathelement path="${analyzer.dir}/jaranalyzer-1.2.jar"/>
                <pathelement path="${analyzer.dir}/lib/bcel-5.2.jar"/>
                <pathelement path="${analyzer.dir}/lib/jakarta-regexp-1.3.jar"/>
                <pathelement path="${analyzer.dir}/lib"/>
            </classpath>
        </taskdef>

        <copy file="${output.dir}/${ui.jar.name}"
              tofile="${output.dir}/lib/${ui.jar.name}"/>

        <jaranalyzer srcdir="${output.dir}/lib"
                     destfile="${analyzer.dir}/dependencies.xml"
                     summaryclass="com.kirkk.analyzer.textui.XMLUISummary"
                     packageFilter="java.*;javax.*;" />

        <xslt in="${analyzer.dir}/dependencies.xml" out="${analyzer.dir}/dependencies.html"
               style="${analyzer.dir}/jaranalyzer.xsl"/>
    </target>

	<!--
		Run all tests
	-->
    <target name="runTests"
            depends="compileTestFiles"
            description="Build and run all unit tests">

        <junit printsummary="true">
            <formatter type="plain" usefile="false" />
            <test name="org.yawlfoundation.yawl.editor.Test${root.class.name}" />
            <classpath>
                <pathelement location="${classes.dir}" />
                <fileset refid="junitDeps" />
            	<fileset refid="editorOnlyDeps" />
                <pathelement location="../${compatible.engine.libJAR.path}" />
            	<fileset refid="neededEngineDeps" />
           </classpath>
        </junit>
    </target>

	<!--
		Compile test-only source
	-->
    <target name="compileTestFiles"
            depends="compile"
            description="Compile test files from source">

        <echo message="Compiling Test: ${package.dir}/Test${root.source.file}" />
        <javac fork="yes"
               debug="yes"
               source="${java.target.version}"
               srcdir="${source.dir}"
               destdir="${classes.dir}">

            <include name="${package.dir}/Test${root.source.file}" />
            <classpath>
                <fileset refid="junitDeps" />
            </classpath>
        </javac>
    </target>

</project>