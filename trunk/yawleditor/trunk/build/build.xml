<project name="YAWLEditor" default="buildJars" basedir="./..">

    <!--
	YAWL Editor Ant build script. Requires Ant v1.7+

	As a convention, only those targets normally run directly are given a
	description attribute. Targets are split into categories and listed in
	a rough 'top-down' order for ease of understanding
    -->

	<!-- =========INITIAL PROPERTIES, FILTERS, FILESETS & CHECKS=========== -->

    <!--
    	Load properties from properties file
    -->
    <property file="build/build.properties" />

    <!--
    	Define root class name, path and directories
    -->
    <property name="root.class.name" value="YAWLEditor" />
    <property name="root.launcher.name" value="YLauncher" />
    <property name="root.source.file" value="${root.launcher.name}.java" />
    <property name="package.base.dir" value="org/yawlfoundation/yawl" />
    <property name="package.dir" value="${package.base.dir}/editor" />
    <property name="root.classpath"
              value="org.yawlfoundation.yawl.editor.ui.${root.class.name}" />
    <property name="root.launcher"
              value="org.yawlfoundation.yawl.editor.ui.${root.launcher.name}" />
    <property name="root.source.file.path" value="${package.dir}/ui/${root.source.file}" />

    <!--
    	Define java and release versions
    -->
    <property name="java.target.version" value="1.6" />
    <property name="version" value="${editor.release.version}"/>

    <!--
    	Define input & output directories
    -->
    <property name="build.dir" value="build" />
    <property name="source.dir" value="source" />
    <property name="classes.dir" value="classes" />
    <property name="output.dir" value="output" />
    <property name="library.dir" value="lib" />
    <property name="tools.dir" value="tools" />
    <property name="manual.dir" value="manual" />
    <property name="deploy.dir" value="deploy" />
    <property name="javadoc.dir" value="${output.dir}/javadoc" />
    <property name="analyzer.dir" value="${build.dir}/analyzer" />

    <!--
    	Define output file names
    -->
    <property name="source.zip"
              value="${root.class.name}${version}Source.zip" />
    <property name="release.zip"
              value="${root.class.name}${version}.zip" />
    <property name="ui.jar.name"
              value="${root.class.name}${version}.jar" />
    <property name="core.jar.name"
              value="${root.class.name}-core-${version}.jar" />
    <property name="analyser.jar.name"
              value="${root.class.name}-analyser-${version}.jar" />
    <property name="configuration.plugin.jar.name"
              value="${root.class.name}-configuration-${version}.jar" />
    <property name="decoratortoolbar.plugin.jar.name"
              value="${root.class.name}-decobar-${version}.jar" />
    <property name="worklet.plugin.jar.name"
              value="${root.class.name}-worklet-${version}.jar" />
    <property name="icons.jar.name"
              value="${root.class.name}-icons.jar" />
    <property name="jgraph.jar.name"
              value="jgraph4yawl-${version}.jar" />
    <property name="bounce.jar.name"
              value="xmleditorkit.jar" />

	<!--
		Define all Editor code dependencies. The Editor makes use of many
		YAWL classes, and there are runtime dependencies to some YAWL engine
		libraries, which are *not* stored in the Editor source tree to
		avoid compatibility and maintenance issues.
	-->
    <property name="automaton" value="automaton.jar"/>
    <property name="forms" value="forms_rt.jar"/>
    <property name="imgscalr" value="imgscalr-lib-4.2.jar"/>
    <property name="jcal" value="jcalendar-1.4.jar"/>
    <property name="goodies-common" value="jgoodies-common-1.8.1.jar"/>
    <property name="goodies-looks" value="jgoodies-looks-2.7.0.jar"/>
    <property name="l2fprod" value="l2fprod-common-all.jar"/>
    <property name="macify" value="macify-1.4.jar"/>
    <property name="servlet" value="servlet-api.jar"/>
	<property name="junit" value="junit-4.4.jar"/>

	<fileset id="editorOnlyDeps" dir="${library.dir}"
			 includes="${automaton} ${forms} ${imgscalr} ${jcal}
			           ${goodies-common} ${goodies-looks} ${l2fprod}
			           ${macify} ${servlet}" />

	<fileset id="junitDeps" file="${tools.dir}/${junit}" />

    <!--
        This set ensures only those engine libraries required are included
    -->
	<fileset id="neededEngineDeps" dir="../${engine.lib.path}"
	    	 includes="commons-codec*.jar commons-lang*.jar dom4j*.jar jaxen*.jar
	    	           jdom*.jar log4j*.jar saxon9*.jar xercesImpl.jar"
	    	 excludes="saxon9-jdom.jar" />

	<!--
		Check YAWL Services dependencies are where we expect they are
	-->
	<fail message="Parent-relative Engine path ${engine.lib.jar.path} not found">
		<condition>
			<available file="${engine.lib.jar.path}" type="file" />
		</condition>
	</fail>
    
	<fail message="Parent-relative Engine path ${engine.lib.path} not found">
		<condition>
			<available file="${engine.lib.path}" type="dir" />
		</condition>
	</fail>

    <!--
        This custom task writes checksum data for all files in a release build,
        from where it is used for auto updating
    -->
    <taskdef name="checkSums"
             classname="org.yawlfoundation.yawl.editor.ui.util.CheckSumTask">
        <classpath>
            <pathelement path="${classes.dir}"/>
            <pathelement path="../${engine.lib.jar.path}"/>
        </classpath>
    </taskdef>

	<!-- ==================MAIN EDITOR BUILD TARGETS======================= -->

	<!--
		Build Editor UI jar with all dependencies in external jars, which must
	    remain in a lib sub-folder relative to the Editor jar's location (as set up
	    in the output directory). All dependencies are added explicitly to the
	    manifest's Class-Path, so the Editor can be run simply as java -jar ...
	-->
    <target name="check.ui">
        <uptodate property="ui.uptodate"
                  targetfile="${output.dir}/${ui.jar.name}" >
            <srcfiles dir="${source.dir}/${package.dir}/ui"
                      includes="**/*" excludes="resources/taskicons/**.*"/>
        </uptodate>
        <echo message="UI jar is up to date: ${ui.uptodate}"/>
    </target>

    <target name="buildUIJar"
            depends="compile, check.ui" unless="ui.uptodate"
  	        description="Build the Editor UI jar (the main jar)">

        <echo message="Building jar: ${ui.jar.name}"/>
        <copy todir="${classes.dir}/${package.dir}/ui/resources">
            <fileset dir="${source.dir}/${package.dir}/ui/resources">
                <include name="**/*" />
                <include name="**/*.*" />
                <exclude name="taskicons/**"/>
            </fileset>
        </copy>

        <property name="manifestFile" value="${root.class.name}.mf" />
    	<manifestclasspath property="manifest.cp"
    					   jarfile="${output.dir}/${ui.jar.name}">
    		<classpath>
    			<fileset dir="${output.dir}/lib" includes="*.jar" />
    		</classpath>
    	</manifestclasspath>
        <manifest file="${manifestFile}">
            <attribute name="Main-Class" value="${root.launcher}" />
        	<attribute name="Class-Path" value="${manifest.cp}" />
            <attribute name="SplashScreen-Image"
                       value="${package.dir}/ui/resources/yawlSplashScreen.jpg" />
        </manifest>

        <jar jarfile="${output.dir}/${ui.jar.name}"
             basedir="${classes.dir}"
             manifest="${manifestFile}"
             includes="${package.dir}/ui/** version.properties"
             excludes="**/Test*.class ${package.dir}/ui/resources/taskicons/**" />

        <copy file="${output.dir}/${ui.jar.name}" todir="${deploy.dir}"/>
        <delete file="${manifestFile}" />
    </target>


    <!--
   		Builds the configuration toolbar plugin jar and copies it
   		to the output plugins dir
   	-->
    <target name="check.configuration">
        <uptodate property="configuration.uptodate"
                  targetfile="${output.dir}/plugins/${configuration.plugin.jar.name}" >
            <srcfiles dir="${source.dir}/${package.base.dir}/configuration/"
                      includes="**/*"/>
        </uptodate>
        <echo message="Configuration jar is up to date: ${configuration.uptodate}"/>
    </target>

    <target name="buildConfigurationPluginJar"
            depends="compile, check.configuration"
            unless="configuration.uptodate"
  	        description="Build the Configuration plugin">

        <echo message="Building jar: ${configuration.plugin.jar.name}"/>
        <mkdir dir="${output.dir}/plugins" />

        <manifestclasspath property="config.manifest.cp"
     			jarfile="${output.dir}/plugins/${configuration.plugin.jar.name}">
     		<classpath>
     			<fileset dir="${output.dir}/lib" includes="*.jar" />
                <fileset dir="${output.dir}" includes="${ui.jar.name}"/>
     		</classpath>
     	</manifestclasspath>
        <manifest file="config.mf">
         	<attribute name="Class-Path" value="${config.manifest.cp}" />
        </manifest>

        <copy toDir="${classes.dir}/${package.base.dir}/configuration/menu/icon">
            <fileset dir="${source.dir}/${package.base.dir}/configuration/menu/icon"/>
        </copy>

        <jar jarfile="${output.dir}/plugins/${configuration.plugin.jar.name}"
             basedir="${classes.dir}"
             manifest="config.mf"
             includes="${package.base.dir}/configuration/**"
             excludes="**/Test*.class" />
        <copy file="${output.dir}/plugins/${configuration.plugin.jar.name}"
              todir="${deploy.dir}"/>
        <delete file="config.mf"/>
    </target>


    <!--
   		Builds the decorator toolbar plugin jar and copies it to the output plugins dir
   	-->
    <target name="check.decobar">
        <uptodate property="decobar.uptodate"
                  targetfile="${output.dir}/plugins/${decoratortoolbar.plugin.jar.name}">
            <srcfiles dir="${source.dir}/${package.base.dir}/decobar/"
                      includes="**/*"/>
        </uptodate>
        <echo message="Decoration toolbar jar is up to date: ${decobar.uptodate}"/>
    </target>

    <target name="buildDecoratorToolBarPluginJar"
            depends="compile, check.decobar"
            unless="decobar.uptodate"
  	        description="Build the Decorator ToolBar plugin">

        <echo message="Building jar: ${decoratortoolbar.plugin.jar.name}"/>
        <mkdir dir="${output.dir}/plugins" />

        <manifestclasspath property="decobar.manifest.cp"
     			jarfile="${output.dir}/plugins/${decoratortoolbar.plugin.jar.name}">
     		<classpath>
     			<fileset dir="${output.dir}/lib" includes="*.jar" />
                <fileset dir="${output.dir}" includes="${ui.jar.name}"/>
     		</classpath>
     	</manifestclasspath>
        <manifest file="decobar.mf">
         	<attribute name="Class-Path" value="${decobar.manifest.cp}" />
        </manifest>

        <copy toDir="${classes.dir}/${package.base.dir}/decobar/icon">
            <fileset dir="${source.dir}/${package.base.dir}/decobar/icon"/>
        </copy>

        <jar jarfile="${output.dir}/plugins/${decoratortoolbar.plugin.jar.name}"
             basedir="${classes.dir}"
             manifest="decobar.mf"
             includes="${package.base.dir}/decobar/**" />
        <copy file="${output.dir}/plugins/${decoratortoolbar.plugin.jar.name}"
              todir="${deploy.dir}"/>
        <delete file="decobar.mf"/>
    </target>


    <!--
   		Builds the decorator toolbar plugin jar and copies it to the output plugins dir
   	-->
    <target name="check.workletPlugin">
        <uptodate property="workletPlugin.uptodate"
                  targetfile="${output.dir}/plugins/${worklet.plugin.jar.name}">
            <srcfiles dir="${source.dir}/${package.base.dir}/worklet/"
                      includes="**/*"/>
        </uptodate>
        <echo message="Worklet plugin jar is up to date: ${decobar.uptodate}"/>
    </target>

    <target name="buildWorkletPluginJar"
            depends="compile, check.workletPlugin"
            unless="workletPlugin.uptodate"
  	        description="Build the worklet plugin">

        <echo message="Building jar: ${worklet.plugin.jar.name}"/>
        <mkdir dir="${output.dir}/plugins" />

        <manifestclasspath property="worklet.manifest.cp"
     			jarfile="${output.dir}/plugins/${worklet.plugin.jar.name}">
     		<classpath>
     			<fileset dir="${output.dir}/lib" includes="*.jar" />
                <fileset dir="${output.dir}" includes="${ui.jar.name}"/>
     		</classpath>
     	</manifestclasspath>
        <manifest file="worklet.mf">
         	<attribute name="Class-Path" value="${worklet.manifest.cp}" />
        </manifest>

        <copy toDir="${classes.dir}/${package.base.dir}/worklet/menu/icon">
            <fileset dir="${source.dir}/${package.base.dir}/worklet/menu/icon"/>
        </copy>

        <jar jarfile="${output.dir}/plugins/${worklet.plugin.jar.name}"
             basedir="${classes.dir}"
             manifest="worklet.mf"
             includes="${package.base.dir}/worklet/**" />
        <copy file="${output.dir}/plugins/${worklet.plugin.jar.name}"
              todir="${deploy.dir}"/>
        <delete file="worklet.mf"/>
    </target>

    <!--
   		Builds the editor analyser jar and copies it to the output lib dir
   	-->
    <target name="check.analyser">
        <uptodate property="analyser.uptodate"
                  targetfile="${output.dir}/lib/${analyser.jar.name}" >
            <srcfiles dir="${source.dir}/${package.base.dir}/analyser/"
                      includes="**/*.java"/>
        </uptodate>
        <echo message="Analyser jar is up to date: ${analyser.uptodate}"/>
    </target>

    <target name="buildAnalyserJar"
            depends="compile, check.analyser" unless="analyser.uptodate"
  	        description="Build the Analyser library">

        <echo message="Building jar: ${analyser.jar.name}"/>
        <jar jarfile="${output.dir}/lib/${analyser.jar.name}"
             basedir="${classes.dir}"
             includes="${package.base.dir}/analyser/**"
             excludes="**/Test*.class" />
        <copy file="${output.dir}/lib/${analyser.jar.name}" todir="${deploy.dir}"/>
    </target>


    <!--
   		Builds the editor resources jar and copies it to the output lib dir
   	-->
    <target name="check.resources">
        <uptodate property="resources.uptodate"
                  targetfile="${output.dir}/lib/${icons.jar.name}" >
            <srcfiles dir="${source.dir}/${package.dir}/ui/resources/taskicons/"
                      includes="**/*.png"/>
        </uptodate>
        <echo message="Resources jar is up to date: ${resources.uptodate}"/>
    </target>

    <target name="buildResourcesJar"
            depends="initialize, check.resources" unless="resources.uptodate"
  	        description="Build the Resources library">

        <echo message="Building jar: ${icons.jar.name}"/>
        <jar jarfile="${output.dir}/lib/${icons.jar.name}"
             basedir="${source.dir}"
             includes="${package.dir}/ui/resources/taskicons/**"/>
        <copy file="${output.dir}/lib/${icons.jar.name}" todir="${deploy.dir}"/>
    </target>


    <!--
   		Builds the editor core jar and copies it to the output lib dir
   	-->
    <target name="check.core">
        <uptodate property="core.uptodate"
                  targetfile="${output.dir}/lib/${core.jar.name}" >
            <srcfiles dir="${source.dir}/${package.dir}/core/"
                      includes="**/*"/>
        </uptodate>
        <echo message="Core jar is up to date: ${core.uptodate}"/>
    </target>

    <target name="buildCoreJar"
            depends="compile, check.core" unless="core.uptodate"
  	        description="Build the Editor Core library">

        <echo message="Building jar: ${core.jar.name}"/>
        <jar jarfile="${output.dir}/lib/${core.jar.name}"
             basedir="${classes.dir}"
             includes="${package.dir}/core/**"
             excludes="**/Test*.class" />
        <copy file="${output.dir}/lib/${core.jar.name}" todir="${deploy.dir}"/>
    </target>


    <!--
   		Builds the modified jgraph jar and copies it to the output lib dir
   	-->
    <target name="check.jgraph">
        <uptodate property="jgraph.uptodate"
                  targetfile="${output.dir}/lib/${jgraph.jar.name}">
            <srcfiles dir="${source.dir}/org/jgraph"
                      includes="**/*"/>
        </uptodate>
        <echo message="JGraph jar is up to date: ${jgraph.uptodate}"/>
    </target>

    <target name="buildJGraphJar"
            depends="compile, check.jgraph" unless="jgraph.uptodate"
  	        description="Build the Editor's modified JGraph library">

        <echo message="Building jar: ${jgraph.jar.name}"/>
        <jar jarfile="${output.dir}/lib/${jgraph.jar.name}"
             basedir="${classes.dir}"
             includes="org/jgraph/**"
             excludes="**/Test*.class" />
        <copy file="${output.dir}/lib/${jgraph.jar.name}" todir="${deploy.dir}"/>
    </target>

    <!--
   		Builds the bounce xml editorkit jar and copies it to the output lib dir
   	-->
    <target name="check.bounce">
        <uptodate property="bounce.uptodate"
                  targetfile="${output.dir}/lib/${bounce.jar.name}">
            <srcfiles dir="${source.dir}/org/bounce"
                      includes="**/*"/>
        </uptodate>
        <echo message="Bounce XML EditorKit jar is up to date: ${bounce.uptodate}"/>
    </target>

    <target name="buildBounceJar"
            depends="compile, check.bounce" unless="bounce.uptodate"
  	        description="Build the Editor's modified XML EditorKit library">

        <echo message="Building jar: ${bounce.jar.name}"/>
        <jar jarfile="${output.dir}/lib/${bounce.jar.name}"
             basedir="${classes.dir}"
             includes="org/bounce/**" />
        <copy file="${output.dir}/lib/${bounce.jar.name}" todir="${deploy.dir}"/>
    </target>


    <!--
   		Copies all required library jars to the output lib dir
   	-->
    <target name="copyLibs" depends="initialize">
    	<copy todir="${output.dir}/lib">
    		<fileset refid="editorOnlyDeps" />
    		<fileset refid="neededEngineDeps" />
    		<fileset file="../${engine.lib.jar.path}" />
    	</copy>
    </target>


    <!--
    	Builds all the project's jars (if needed)
    -->
    <target name="buildJars"
            depends="buildAnalyserJar, buildCoreJar, buildJGraphJar, buildBounceJar,
                     buildResourcesJar, buildUIJar, buildDecoratorToolBarPluginJar,
                     buildConfigurationPluginJar, buildWorkletPluginJar"
            description="Builds all jars and copies required libraries"/>

    <!--
   		Create ZIP of source code (for release)
   	-->
   	<target name="zipRelease"
   	        depends="buildJars"
   	        description="Generate ZIP file of the editor jar and lib dir (for release)">

        <!-- increment build number & date -->
        <propertyfile file="${build.dir}/build.properties">
            <entry key="build.number" type="int" default="0" operation="+" pattern="000"/>
            <entry key="build.date" type="date" value="now" pattern="yyyy-MM-dd HH.mm.ss"/>
        </propertyfile>

        <antcall target="checksums"/>

   		<zip destfile="${output.dir}/${release.zip}">
            <zipfileset dir="${output.dir}" includes="${ui.jar.name}"/>
   	  	    <zipfileset dir="${output.dir}/lib" prefix="lib"/>
            <zipfileset dir="${output.dir}/plugins" prefix="plugins"/>
            <zipfileset dir="${manual.dir}" prefix="manual"/>
   		</zip>
        <copy file="${output.dir}/lib/checksums.xml" todir="${deploy.dir}"/>
        <copy file="${output.dir}/${release.zip}" todir="${deploy.dir}"/>
    </target>


	<!--
		Generate javadoc for all non-test code (unlike javac, we have to
	    specify all source explicitly). Can be run separately, or as part of
	    a full build
	-->
    <target name="document"
            depends="initialize"
            description="Generate Javadocs for the source-code">

        <mkdir dir="${javadoc.dir}" />
        <javadoc packagenames="org.yawlfoundation.yawl.*"
                 source="${java.target.version}"
                 destdir="${javadoc.dir}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="YAWLEditor ${editor.release.version} API">

        	<arg value="-J-Dhttp.proxyHost=${proxy.host}"/>
        	<arg value="-J-Dhttp.proxyPort=${proxy.port}"/>

            <!-- custom tags -->
            <tag name="date" scope="all" description="Created/Last Date:"/>
            <tag name="pre" scope="all" description="Precondition:"/>
            <tag name="post" scope="all" description="Postcondition:"/>

        	<fileset dir="${source.dir}" defaultexcludes="yes">
        		<include name="**/*.java" />
        		<exclude name="**/Test*.java" />
                <exclude name="**/CheckSumTask.java"/>
        	</fileset>
        	<classpath>

        		<pathelement location="../${engine.lib.jar.path}" />
        		<fileset refid="editorOnlyDeps" />
        		<fileset refid="neededEngineDeps" />
        	</classpath>
	        <doctitle>
	            <![CDATA[<h1>YAWLEditor ${editor.release.number} API</h1>]]>
	        </doctitle>
            <link offline="false" href="http://docs.oracle.com/javase/6/docs/api/"/>
        </javadoc>
    </target>

	<!--
		Create ZIP of source code (for release)
	-->
	<target name="zipSourceCode"
	        depends="initialize"
	        description="Generate ZIP file of the source (for release)">
    
		<zip destfile="${output.dir}/${source.zip}">
            <zipfileset dir="${source.dir}" prefix="source"/>
	  	    <zipfileset dir="${library.dir}" prefix="lib"/>
		    <zipfileset dir="${tools.dir}" prefix="tools" />
            <zipfileset dir="${build.dir}" prefix="build" />
		</zip>
    </target>

	<!--
		Pre-compile initialisation tasks
	-->
    <target name="clean">
        <echo message="Initialising..."/>
        <delete includeemptydirs="true">
            <fileset dir="${classes.dir}" includes="**/*"/>
        </delete>
        <delete dir="${javadoc.dir}" />
    </target>


    <target name="initialize">
        <mkdir dir="${output.dir}" />
        <mkdir dir="${output.dir}/lib" />
        <mkdir dir="${deploy.dir}" />
    </target>

	<!--
		Compile all UI and core code
	-->
    <target name="compile" depends="clean, copyLibs">
        <echo message="Compiling: ${root.source.file.path}" />
        <javac fork="yes"
               debug="yes"
               source="${java.target.version}"
               srcdir="${source.dir}"
               destdir="${classes.dir}">
            <include name="${root.source.file.path}"/>
            <include name="${package.dir}/ui/plugin/YEditorPluginAdapter.java"/>
            <include name="${package.dir}/ui/util/CheckSumTask.java"/>
            <include name="${package.base.dir}/configuration/ConfigurationPlugin.java"/>
            <include name="${package.base.dir}/decobar/DecoratorToolbarPlugin.java"/>
            <include name="${package.base.dir}/worklet/WorkletRulesPlugin.java"/>
            <classpath>
            	<pathelement location="../${engine.lib.jar.path}" />
        		<fileset refid="editorOnlyDeps" />
            	<fileset refid="neededEngineDeps" />
            </classpath>
        </javac>
    </target>


    <!--
   		Compile configuration plugin code
   	-->
    <target name="compileConfigurationPlugin" depends="copyLibs">
        <property name="configuration.base.file"
                  value="${package.base.dir}/configuration/ConfigurationPlugin.java"/>

        <echo message="Compiling: ${configuration.base.file}" />
        <javac fork="yes"
               debug="yes"
               source="${java.target.version}"
               srcdir="${source.dir}"
               destdir="${classes.dir}">
            <include name="${configuration.base.file}" />
            <classpath>
            	<pathelement location="../${engine.lib.jar.path}" />
        		<fileset refid="editorOnlyDeps" />
            	<fileset refid="neededEngineDeps" />
            </classpath>
        </javac>
    </target>


    <!--
   		Compile decorator toolbar code
   	-->
    <target name="compileDecoratorToolBarPlugin" depends="copyLibs">
        <property name="decorator.base.file"
                  value="${package.base.dir}/decobar/DecoratorToolbarPlugin.java"/>

        <echo message="Compiling: ${decorator.base.file}" />
        <javac fork="yes"
               debug="yes"
               source="${java.target.version}"
               srcdir="${source.dir}"
               destdir="${classes.dir}">
            <include name="${decorator.base.file}" />
            <classpath>
            	<pathelement location="../${engine.lib.jar.path}" />
        		<fileset refid="editorOnlyDeps" />
            	<fileset refid="neededEngineDeps" />
            </classpath>
        </javac>
    </target>


    <target name="analyze" depends="buildJars">
        <taskdef name="jaranalyzer"
                 classname="com.kirkk.analyzer.textui.JarAnalyzerTask">
            <classpath>
                <pathelement path="${analyzer.dir}/jaranalyzer-1.2.jar"/>
                <pathelement path="${analyzer.dir}/lib/bcel-5.2.jar"/>
                <pathelement path="${analyzer.dir}/lib/jakarta-regexp-1.3.jar"/>
                <pathelement path="${analyzer.dir}/lib"/>
            </classpath>
        </taskdef>

        <copy file="${output.dir}/${ui.jar.name}"
              tofile="${output.dir}/lib/${ui.jar.name}"/>

        <jaranalyzer srcdir="${output.dir}/lib"
                     destfile="${analyzer.dir}/dependencies.xml"
                     summaryclass="com.kirkk.analyzer.textui.XMLUISummary"
                     packageFilter="java.*;javax.*;" />

        <xslt in="${analyzer.dir}/dependencies.xml" out="${analyzer.dir}/dependencies.html"
               style="${analyzer.dir}/jaranalyzer.xsl"/>
    </target>


    <!-- build checksums.xml for future update comparisons -->
    <target name="checksums">
        <checkSums rootdir="../${output.dir}" todir="../${output.dir}/lib"
                   includes="*.jar *.pdf"/>
    </target>

	<!--
		Run all tests
	-->
    <target name="runTests"
            depends="compileTestFiles"
            description="Build and run all unit tests">

        <junit printsummary="true">
            <formatter type="plain" usefile="false" />
            <test name="org.yawlfoundation.yawl.editor.Test${root.class.name}" />
            <classpath>
                <pathelement location="${classes.dir}" />
                <fileset refid="junitDeps" />
            	<fileset refid="editorOnlyDeps" />
                <pathelement location="../${engine.lib.jar.path}" />
            	<fileset refid="neededEngineDeps" />
           </classpath>
        </junit>
    </target>

	<!--
		Compile test-only source
	-->
    <target name="compileTestFiles"
            depends="compile"
            description="Compile test files from source">

        <echo message="Compiling Test: ${package.dir}/Test${root.source.file}" />
        <javac fork="yes"
               debug="yes"
               source="${java.target.version}"
               srcdir="${source.dir}"
               destdir="${classes.dir}">

            <include name="${package.dir}/Test${root.source.file}" />
            <classpath>
                <fileset refid="junitDeps" />
            </classpath>
        </javac>
    </target>

</project>