/*
 * Copyright (c) 2004-2013 The YAWL Foundation. All rights reserved.
 * The YAWL Foundation is a collaboration of individuals and
 * organisations who are committed to improving workflow technology.
 *
 * This file is part of YAWL. YAWL is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation.
 *
 * YAWL is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with YAWL. If not, see <http://www.gnu.org/licenses/>.
 */

package org.yawlfoundation.yawl.editor.core.repository;

import org.yawlfoundation.yawl.elements.*;
import org.yawlfoundation.yawl.exceptions.YSyntaxException;
import org.yawlfoundation.yawl.unmarshal.YMarshal;
import org.yawlfoundation.yawl.util.StringUtil;
import org.yawlfoundation.yawl.util.XNode;
import org.yawlfoundation.yawl.util.XNodeParser;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * @author Michael Adams
 * @date 6/08/13
 */
public class NetRepository extends DecompositionRepoMap {

    protected NetRepository() {
        super("netDecompositions");
    }

    protected NetRepository(String baseDir) {
        super(baseDir, "netDecompositions");
    }

    /**
     * Adds a net decomposition to the repository
     * @param name a reference name for the net decomposition
     * @param description a description of it
     * @param net the net decomposition to add
     * @param layoutXML net layout information (may be null)
     * @return whether the add was successful
     */
    public String add(String name, String description, YNet net, String layoutXML) {
        String uniqueName = super.add(name, description, net);
        Set<String> containedIds = addContainedDecompositions(net);
        if (! containedIds.isEmpty()) {
            addDecompositionIdMappings(uniqueName, containedIds);
        }
        if (layoutXML != null) {
            addLayout(uniqueName, layoutXML);
        }
        if (! (containedIds.isEmpty() && layoutXML == null)) {
            save();   // updates
        }
        return uniqueName;
    }


    /**
     * Adds a net decomposition to the repository
     * @param name a reference name for the net decomposition
     * @param description a description of it
     * @param net the net decomposition to add
     * @return whether the add was successful
     */
    public String add(String name, String description, YNet net) {
        return add(name, description, net, null);
    }


    /**
     * Gets a net decomposition from the repository
     * @param name a reference name for the net decomposition
     * @return the referenced net decomposition, or null if not found
     */
    public Set<YDecomposition> getNetAndDecompositions(String name) throws YSyntaxException {
        RepoRecord record = getRecord(name);
        return record != null ? parseRecord(record.getValue()) :
                Collections.<YDecomposition>emptySet();
    }


    public XNode getLayout(String name) throws YSyntaxException {
        RepoRecord record = getRecord(name);
        if (record != null) {
            XNode rootNode = parseNetRecord(record.getValue());
            return rootNode != null ? rootNode.getChild("layout") : null;
        }
        return null;
    }


    /**
     * Gets a decomposition from the repository
     * @param name a reference name for the decomposition
     * @return the referenced decomposition, or null if not found
     */
    public YNet get(String name) throws YSyntaxException {
        return (YNet) super.get(name);
    }


    /**
     * Removes a net decomposition from the repository
     * @param name a reference name for the net decomposition
     * @return whether the removal was successful
     */
    public YNet remove(String name) {
        return (YNet) super.remove(name);
    }


    /**
     * Gets a sorted list of descriptors for all stored net decompositions
     * @return A sorted list of RepoDescriptors (String pairs - name, description)
     */
    public List<RepoDescriptor> getDescriptors() {
        return super.getDescriptors();
    }


    // Writes a net decomposition to xml. Since a specification adds some xml to that
    // generated by a decomposition, we have to replicate it here
    protected String toXML(YDecomposition decomposition) {
        YNet net = (YNet) decomposition;
        XNode netNode = new XNode("decomposition");
        netNode.addAttribute("id", net.getID());
        netNode.addContent(net.toXML());
        return netNode.toString();
    }


    protected void addXsiAttribute(XNode decompositionNode) {
        decompositionNode.addAttribute("xsi:type", "NetFactsType");
    }


    protected boolean addDecompositionIdMappings(String name, Set<String> ids) {
        RepoRecord record = getRecord(name);
        if (record != null) {
            record.setValue(convertToXML(ids) + record.getValue());
        }
        return record != null;
    }


    protected boolean addLayout(String name, String layoutXML) {
        RepoRecord record = getRecord(name);
        if (record != null) {
            record.setValue(record.getValue() + StringUtil.wrap(layoutXML, "layout"));
        }
        return record != null;
    }


    protected Set<String> addContainedDecompositions(YNet net) {
        Set<String> idSet = new HashSet<String>();
        String description = "Stored as required by storage of " + net.getID();
        for (YTask task : net.getNetTasks()) {
            YDecomposition decomposition = task.getDecompositionPrototype();
            if (decomposition == null) continue;

            String currentID = decomposition.getID();
            String uniqueID = null;
            if (decomposition instanceof YAWLServiceGateway) {
                uniqueID = YRepository.getInstance().getTaskDecompositionRepository().add(
                        currentID, description, (YAWLServiceGateway) decomposition);
            }
            else if (decomposition instanceof YNet) {
                addContainedDecompositions((YNet) decomposition);     // sub-net recurse
                uniqueID = add(decomposition.getID(), description, (YNet) decomposition);
            }
            idSet.add(uniqueID);
        }
        return idSet;
    }


    protected XNode parseNetRecord(String xml) throws YSyntaxException {
        if (xml == null) return null;
        if (parser == null) parser = new XNodeParser();
        xml = StringUtil.wrap(xml, "temp");
        XNode rootNode = parser.parse(xml);
        if (rootNode == null) {
            throw new YSyntaxException("Invalid repository record structure.");
        }
        return rootNode;
    }

    /**
     * Creates a decomposition from its XML description
     * @param xml the XML to parse
     * @return the populated task decomposition
     */
    protected Set<YDecomposition> parseRecord(String xml) throws YSyntaxException {
        XNode rootNode = parseNetRecord(xml);
        XNode netNode = rootNode.getChild("decomposition");
        XNode taskDecompositionsNode = rootNode.getChild("taskDecompositions");
        return netNode == null ? null :
                unmarshalNet(netNode, taskDecompositionsNode);
    }


    protected Set<YDecomposition> unmarshalNet(XNode netNode,
                                               XNode taskDecompositionsNode)
            throws YSyntaxException {
        if (shellSpecification == null) shellSpecification = createShellSpecification();
        XNode specNode = shellSpecification.getChild("specification");
        if (specNode == null) {
            throw new YSyntaxException("Invalid repository record structure.");
        }
        addXsiAttribute(netNode);
        specNode.addChild(netNode);
        Set<XNode> addedNodes = new HashSet<XNode>();
        for (String xml : getTaskDecompositionXMLSet(taskDecompositionsNode)) {
            XNode decompositionNode = parser.parse(xml);
            if (decompositionNode != null) {
                decompositionNode.addAttribute("xsi:type", "WebServiceGatewayFactsType");
                addedNodes.add(specNode.addChild(decompositionNode));
            }
        }
        YSpecification specification = YMarshal.unmarshalSpecifications(
                shellSpecification.toString(true), false).get(0);
        specNode.removeChild(netNode);
        for (XNode node : addedNodes) specNode.removeChild(node);

        Set<YDecomposition> decompositions = new HashSet<YDecomposition>();
        for (YDecomposition decomposition : specification.getDecompositions()) {
            if (! decomposition.getID().equals("rootNet")) {
                decompositions.add(decomposition);
            }
        }
        return decompositions;
    }


    private String convertToXML(Set<String> ids) {
        XNode node = new XNode("taskDecompositions");
        for (String id : ids) {
            node.addChild("id", id);
        }
        return node.toPrettyString();
    }


    private Set<String> getTaskDecompositionXMLSet(XNode node) {
        if (node == null) return Collections.emptySet();

        Set<String> nameSet = new HashSet<String>();
        for (XNode child : node.getChildren()) {
             nameSet.add(child.getText());
        }
        return YRepository.getInstance().getTaskDecompositionRepository()
                .getValues(nameSet);
    }

}
