<project name="YAWLEditor" default="full" basedir="../">

    <!-- properties file with editable values -->
    <property file="source/build.properties" />

    <!-- global filters (read from build properties -->
    <filter token="EditorReleaseNumber" value="${editor.release.number}" />
    <filter token="EditorContributors" value="${editor.contributors}" />
    <filter token="CompatibleEngineReleaseNumber" value="${compatible.engine.release.number}" />
    <filter token="CompatibleEngineJarName" value="${compatible.engine.jar.name}" />
    <filter token="CompatibleJavaReleaseNumber" value="${compatible.java.release.number}" />
    <filter token="JGraphReleaseNumber" value="${jgraph.release.number}" />
    <filter token="WofYawlReleaseNumber" value="${wofyawl.release.number}" />
    <filter token="WendyReleaseNumber" value="${wendy.release.number}" />
    <filter token="JCalendarReleaseNumber" value="${jcalendar.release.number}" />

    <!-- define root class name, path and directories -->
    <property name="root.class.name" value="YAWLEditor" />
    <property name="root.source.file" value="${root.class.name}.java" />
    <property name="package.base.dir" value="org/yawlfoundation/yawl" />
    <property name="package.dir" value="${package.base.dir}/editor" />
    <property name="root.classpath"
              value="org.yawlfoundation.yawl.editor.${root.class.name}" />
    <property name="source.file" value="${package.dir}/${root.source.file}" />
    <property name="source.release" value="1.5" />

    <!-- the various input & output directories -->
    <property name="source.dir" value="${basedir}/source" />
    <property name="build.dir" value="${basedir}/classFiles/${root.class.name}" />
    <property name="distribution.dir" value="${basedir}/distribution" />
    <property name="library.dir" value="${basedir}/lib" />
    <property name="tool.dir" value="${basedir}/tools" />
    <property name="javadoc.dir" value="${basedir}/javadoc" />
    <property name="filtered.source.dir" value="${basedir}/filtered/source" />
    <property name="enumeratedLibraries.dir" value="${basedir}/enumerated3rdPartyLibraries"/>

    <!-- output file names & paths -->
    <property name="source.zip"
              value="${distribution.dir}/${root.class.name}${editor.release.number}Source.zip" />
    <property name="editor.jar.file"
              value="${distribution.dir}/${root.class.name}${editor.release.number}.jar" />
    <property name="lite.editor.jar.file"
              value="${distribution.dir}/${root.class.name}Lite${editor.release.number}.jar" />

    <!-- external libaries -->
    <property name="engine.jar.file" value="${library.dir}/${compatible.engine.jar.name}" />
    <property name="jcal.jar.file" value="${library.dir}/jcalendar-1.3.2.jar"/>
    <property name="servlet.jar.file" value="${library.dir}/servlet-api.jar"/>
    <property name="forms.jar.file" value="${library.dir}/forms_rt.jar"/>
    <property name="junit.jar.file" value="${tool.dir}/junit-4.4.jar"/>
    <property name="browser.jar.file" value="${library.dir}/BrowserLauncher2-1_3.jar"/>
    <property name="grouplayout.jar.file" value="${library.dir}/swing-layout-1.0.4.jar"/>
    <property name="swingworker.jar.file" value="${library.dir}/swing-worker-1.2.jar"/>

    <!-- TARGETS -->
    <target name="initialize"
            description="Initialisation of properties and directories.">

        <!-- Create the time stamp & filter token for 'about' box -->
        <tstamp>
            <format property="buildDate" pattern="yyyy.MM.dd HH:mm:ss"/>
        </tstamp>
        <filter token="BuildDate" value="${buildDate}" />

        <!-- Create the distribution dir if it doesn't already exist -->
        <mkdir dir="${distribution.dir}" />
    </target>


    <target name="clean"
            description="Remove any output and library files from previous builds.">

        <delete dir="${build.dir}" />
        <delete dir="${javadoc.dir}" />
        <delete dir="${enumeratedLibraries.dir}"/>
        <delete file="${editor.jar.file}" />
        <delete file="${lite.editor.jar.file}" />
        <delete file="${distribution.dir}/${compatible.engine.jar.name}" />
        <delete file="${source.zip}" />
    </target>


    <target name="compile"
            depends="initialize"
            description="Compile the source code.">

        <!-- filter source files with filter tokens declared to fill in values-->
        <mkdir dir="${filtered.source.dir}" />       
        <copy todir="${filtered.source.dir}" filtering="true">
            <fileset dir="${source.dir}"/>
        </copy>

        <mkdir dir="${build.dir}" />
        <copy todir="${build.dir}/${package.dir}/resources">
            <fileset dir="${source.dir}/${package.dir}/resources">
                <include name="**/*" />
                <include name="**/*.*" />
            </fileset>
        </copy>

        <echo message="Compiling: ${source.file}" />
        <javac fork="yes"
               debug="yes"
               source="${source.release}"
               srcdir="${filtered.source.dir}"
               destdir="${build.dir}">
            <include name="${source.file}" />
            <classpath>
                <pathelement location="${engine.jar.file}" />
                <pathelement location="${jcal.jar.file}" />
                <pathelement location="${servlet.jar.file}" />
                <pathelement location="${forms.jar.file}" />
                <pathelement location="${browser.jar.file}" />
                <pathelement location="${grouplayout.jar.file}" />
                <pathelement location="${swingworker.jar.file}" />
            </classpath>
        </javac>
    
        <delete dir="${filtered.source.dir}" />
    </target>


    <target name="compileTestFiles"
            depends="compile"
            description="Compile test files from source">

        <echo message="Compiling Test: ${package.dir}/Test${root.source.file}" />
        <javac fork="yes"
               debug="yes"
               source="${source.release}"
               srcdir="${source.dir}"
               destdir="${build.dir}">

            <include name="${package.dir}/Test${root.source.file}" />
            <classpath>
                <pathelement location="${junit.jar.file}" />
            </classpath>
        </javac>
    </target>

    <target name="runTests"
            depends="compileTestFiles"
            description="Unit Testing of compiled source.">

        <junit printsummary="true">
            <formatter type="plain" usefile="false" />
            <test name="org.yawlfoundation.yawl.editor.Test${root.class.name}" />
            <classpath>
                <pathelement location="${build.dir}" />
                <pathelement location="${junit.jar.file}" />
                <pathelement location="${engine.jar.file}" />
                <pathelement location="${jcal.jar.file}" />
                <pathelement location="${servlet.jar.file}" />
                <pathelement location="${forms.jar.file}" />
                <pathelement location="${browser.jar.file}" />
                <pathelement location="${grouplayout.jar.file}" />
                <pathelement location="${swingworker.jar.file}" />
           </classpath>
        </junit>
    </target>


    <target name="buildEditorLite"
            depends="compile"
  	        description="Packaging of compiled source into editor lite jar file.">

        <property name="manifestFile" value="${root.class.name}.mf" />

        <manifest file="${manifestFile}">
            <attribute name="Main-Class" value="${root.classpath}" />
            <attribute name="Class-Path" value="${compatible.engine.jar.name}" />
        </manifest>

        <jar jarfile="${lite.editor.jar.file}"
             basedir="${build.dir}"
             manifest="${manifestFile}"
             excludes="**/Test*.class" />
        <checksum file="${lite.editor.jar.file}"/>
        <delete file="${manifestFile}" />
    </target>


    <target name="checkEnumeratedLibraries">
        <available filepath="${enumeratedLibraries.dir}/${package.base.dir}/engine/"
                   file="YEngine.class"
                   property="enumdir.present"/>
        <antcall target="enumerateLibraries"/>
    </target>


    <target name="enumerateLibraries" unless="enumdir.present">
        <mkdir dir="${enumeratedLibraries.dir}"/>
        <unzip dest="${enumeratedLibraries.dir}">
            <fileset file="${engine.jar.file}"/>
            <fileset file="${jcal.jar.file}"/>
            <fileset file="${servlet.jar.file}"/>
            <fileset file="${forms.jar.file}"/>
            <fileset file="${browser.jar.file}"/>
            <fileset file="${grouplayout.jar.file}"/>
            <fileset file="${swingworker.jar.file}" />
        </unzip>
    </target>


    <target name="buildEditorComplete"
            depends="compile"
            description="Packaging of compiled source and required libraries into editor jar file.">

        <antcall target="checkEnumeratedLibraries"/>

        <jar destfile="${editor.jar.file}" duplicate="fail">
            <fileset dir="${build.dir}"/>
            <fileset dir="${enumeratedLibraries.dir}"
                     includes="com/toedter/** javax/** net/sf/saxon/** org/apache/**
                               org/dom4j/** org/jdom/** org/eclipse/** com/intellij/**
                               at/jta/** edu/stanford/** net/sf/wraplog/** org/jdesktop/**
                               org/hibernate/HibernateException.class
                               ${package.base.dir}/authentication/*Client.class
                               ${package.base.dir}/elements/**
                               ${package.base.dir}/engine/**
                               ${package.base.dir}/exceptions/**                              
                               ${package.base.dir}/logging/**                              
                               ${package.base.dir}/resourcing/**
                               ${package.base.dir}/schema/**
                               ${package.base.dir}/unmarshal/**
                               ${package.base.dir}/util/**"
                     excludes="**/*.hbm.xml ${package.base.dir}/**/*.jpg
                               ${package.base.dir}/**/*.gif"/>
            <manifest>
                <attribute name="Created-By" value="The YAWL Foundation"/>
                <attribute name="Main-Class" value="${root.classpath}"/>
            </manifest>
        </jar>
        <checksum file="${editor.jar.file}"/>

    </target>
      

    <target name="document"
            depends="initialize"
            description="Generate Javadocs for the source-code">

        <mkdir dir="${javadoc.dir}" />
        <javadoc packagenames="org.yawlfoundation.yawl.editor.*"
                 sourcepath="${source.dir}"
                 source="${source.release}"
                 classpath="${engine.jar.file}"
                 defaultexcludes="yes"
                 destdir="${javadoc.dir}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="YAWLEditor ${editor.release.number} API">
	        <doctitle>
	            <![CDATA[<h1>YAWLEditor ${editor.release.number} API</h1>]]>
	        </doctitle>
            <link offline="false" href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        </javadoc>
    </target>


	<target name="zipSourceCode"
	        depends="initialize"
	        description="Generate a zipfile of the source">
    
		<zip destfile="${source.zip}">
        <zipfileset dir="${source.dir}" prefix="source"/>
	  	    <zipfileset dir="${library.dir}" prefix="lib"/>
		    <zipfileset dir="${tool.dir}" prefix="tools" />
		</zip>
        <checksum file="${source.zip}"/>

        <copy todir="${distribution.dir}" filtering="true">
            <fileset file="${source.dir}/ReleaseNotes.txt"/>
            <fileset file="${source.dir}/ChangeLog.txt"/>
        </copy>
    </target>

	<target name="release"
	        depends="buildEditorLite,buildEditorComplete,zipSourceCode,document"
	        description="Complete build of everything" />
    <target name="full"
            depends="clean,buildEditorLite,buildEditorComplete,zipSourceCode,document"
            description="Complete reset, clean and build of everything (may take a while)" />
</project>