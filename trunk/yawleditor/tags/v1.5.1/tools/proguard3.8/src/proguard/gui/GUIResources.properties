# ProGuard -- shrinking, optimization, and obfuscation of Java class files.
# Copyright (c) 2002-2007 Eric Lafortune (eric@graphics.cornell.edu)

#
# Tab names.
#
proGuardTab     = ProGuard
inputOutputTab  = Input/Output
shrinkingTab    = Shrinking
obfuscationTab  = Obfuscation
optimizationTab = Optimization
informationTab  = Information
processTab      = Process
reTraceTab      = ReTrace

#
# Splash text.
#
developed    = Developed by Eric Lafortune
shrinking    = Shrinking
optimization = Optimization
obfuscation  = Obfuscation

#
# Panel titles.
#
welcome                       = Welcome to ProGuard, version 3.8
options                       = Options
keepAdditional                = Keep additional classes and class members
keepNamesAdditional           = Keep additional class names and class member names
assumeNoSideEffectsAdditional = Assume no side effects for additional methods
whyAreYouKeeping              = Why are you keeping
consistencyAndCorrectness     = Consistency and correctness
processingConsole             = Processing console
reTraceSettings               = ReTrace settings

mappingFile            = Mapping file
obfuscatedStackTrace   = Obfuscated stack trace
deobfuscatedStackTrace = De-obfuscated stack trace

#
# Info texts.
#
proGuardInfo = \
  ProGuard is a free class file shrinker, optimizer, and obfuscator.\
  \n\n\
  With this GUI, you can create, load, modify, and save ProGuard configurations. \
  \n\
  You can then process your code right away, or you can run ProGuard from the \
  command line using your saved configuration. \
  \n\n\
  With the ReTrace part of this GUI you can de-obfuscate your stack traces.\
  \n\n\
  ProGuard and ReTrace are written and maintained by Eric Lafortune.\
  \n\n\
  Based on class file IO code by Mark Welsh.\
  \n\n\
  Distributed under the GNU General Public License.\
  \n\
  Copyright (c) 1999-2007.

processingInfo = \
  You can now start processing your code, \
  or you can run ProGuard from the command line using your saved configuration.\
  \n\n\
  It's always a good idea to save your configuration first.

reTraceInfo = \
  If you had ProGuard write out a mapping file, \
  you can de-obfuscate your obfuscated stack traces with ReTrace!\
  \n\n\
  You can load an obfuscated stack trace from a file, \
  or you can paste it straight into the text area above.

#
# Titles and labels corresponding to common ProGuard options.
#
programJars = Program jars, wars, ears, zips, and directories
libraryJars = Library jars, wars, ears, zips, and directories
outputJars  = Output jars, wars, ears, zips, and directories

printSeeds                       = Print seeds
shrink                           = Shrink
printUsage                       = Print usage

optimize                         = Optimize
allowAccessModification          = Allow access modification

obfuscate                        = Obfuscate
printMapping                     = Print mapping
applyMapping                     = Apply mapping
obfuscationDictionary            = Obfuscation dictionary
overloadAggressively             = Overload aggressively
useUniqueClassMemberNames        = Use unique class member names
defaultPackage                   = Default package
useMixedCaseClassNames           = Use mixed-case class names
keepAttributes                   = Keep attributes
renameSourceFileAttribute        = Rename SourceFile attribute

verbose                          = Verbose
note                             = Note Class.forName invocations with variable arguments
warn                             = Warn about missing libraries
ignoreWarnings                   = Ignore warnings about missing libraries
skipNonPublicLibraryClasses      = Skip non-public library classes
skipNonPublicLibraryClassMembers = Skip non-public library class members

#
# Panel titles and labels for boilerplate keep options.
#
boilerplate_keep                = Keep
boilerplate_applications        = Applications
boilerplate_applets             = Applets
boilerplate_servlets            = Servlets
boilerplate_midlets             = Midlets
boilerplate_xlets               = Xlets
boilerplate_library             = Library

boilerplate_also_keep           = Also keep
boilerplate_enumerations        = Enumerations
boilerplate_serialization_code  = Serialization code
boilerplate_beaninfo_classes    = BeanInfo classes
boilerplate_bean_classes        = Bean classes
boilerplate_database_drivers    = Database drivers
boilerplate_swing_ui_l&f        = Swing UI L&F
boilerplate_rmi_interfaces      = RMI interfaces
boilerplate_rmi_implementations = RMI implementations

#
# Panel titles and labels for boilerplate keep names options.
#
boilerplate_keep_names          = Keep names
boilerplate_native_method_names = Native method names
boilerplate__class_method_names = .class method names

#
# Labels for boilerplate "no side effect methods" options.
#
boilerplate_remove                          = Remove
boilerplate_system_method_calls             = System method calls without side effects
boilerplate_math_method_calls               = Math method calls without side effects
boilerplate_number_method_calls             = Number method calls without side effects
boilerplate_string_method_calls             = String method calls without side effects
boilerplate_stringbuffer_method_calls       = StringBuffer method calls without side effects
boilerplate_stringbuilder_method_calls      = StringBuilder method calls without side effects

boilerplate_remove_debugging                = Remove debugging
boilerplate_throwable_printstacktrace_calls = Throwable.printStackTrace() calls
boilerplate_thread_dumpstack_calls          = Thread.dumpStack() calls
boilerplate_all_logging_api_calls           = All logging API calls
boilerplate_all_log4j_api_calls             = All Log4j API calls

#
# Titles and labels corresponding to ProGuard keep options.
#
keepTitle = Keep

keep                   = Keep classes and class members
keepClassMembers       = Keep class members only
keepClassesWithMembers = Keep classes and class members, if members are present

#
# Further keep titles and labels.
#
comments               = Comments
access                 = Access
required               = Required
not                    = Not
dontCare               = Don't care
class                  = Class
extendsImplementsClass = Extends/implements class
classMembers           = Class members

extensionsOf = Extensions of
specificationNumber = Specification #

type       = Type
returnType = Return type
name       = Name
arguments  = Arguments

#
# File selection titles.
#
selectConfigurationFile         = Select a configuration file...
saveConfigurationFile           = Save configuration...
selectSeedsFile                 = Select a seeds output file...
selectUsageFile                 = Select a usage output file...
selectPrintMappingFile          = Select an output mapping file...
selectApplyMappingFile          = Select an input mapping file...
selectObfuscationDictionaryFile = Select an obfuscation dictionary...
selectStackTraceFile            = Select a stack trace file...

cantOpenConfigurationFile  = Can''t open the configuration file [{0}]
cantParseConfigurationFile = Can''t parse the configuration file [{0}]
cantSaveConfigurationFile  = Can''t save the configuration file [{0}]
cantOpenStackTraceFile     = Can''t open the stack trace file [{0}]

jarWarEarZipExtensions = *.jar, *.war, *.ear, *.zip (archives and directories)
proExtension           = *.pro (ProGuard configurations)

addJars     = Add one or more jars or directories...
chooseJars  = Choose different jars or directories...
enterFilter = \
  You can enter optional filters for the file names contained in the selected entries. \
  The filters are comma-separated lists of relative file names, supporting ?, * and ** wildcards, and ! negators. \

filters       = Filters
nameFilter    = File name filter
jarNameFilter = Jar name filter
warNameFilter = War name filter
earNameFilter = Ear name filter
zipNameFilter = Zip name filter

#
# Simple button texts.
#
previous = Previous
next     = Next
browse   = Browse...
ok       = Ok
cancel   = Cancel

add       = Add...
addInput  = Add input...
addOutput = Add output...
edit      = Edit...
filter    = Filter...
remove    = Remove
moveUp    = Move up
moveDown  = Move down

moveToLibraries = Move to libraries
moveToProgram   = Move to program

addField  = Add field...
addMethod = Add method...

loadConfiguration = Load configuration...
viewConfiguration = View configuration
saveConfiguration = Save configuration...
loadStackTrace    = Load stack trace...
process           = Process!
reTrace           = ReTrace!

#
# Progress messages and error messages.
#
warning         = Warning
outOfMemory     = Out of memory
outOfMemoryInfo = \n\
  You should run the ProGuard GUI with a larger java heap size, \
  with a command like\
  \n\n\t\
  java -Xms128m -Xmx192m -jar proguardgui.jar {0}\
  \n\n\
  or you can try running ProGuard from the command line. \
  with a command like\
  \n\n\t\
  java -jar proguard.jar @{0}
sampleConfigurationFileName = configuration.pro
errorProcessing = Error during processing
errorReTracing  = Error during retracing
