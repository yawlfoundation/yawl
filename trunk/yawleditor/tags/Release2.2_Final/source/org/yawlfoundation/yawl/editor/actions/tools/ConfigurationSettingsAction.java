/**
 * Created By Jingxin XU
 */

package org.yawlfoundation.yawl.editor.actions.tools;

import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;
import org.yawlfoundation.yawl.editor.YAWLEditor;
import org.yawlfoundation.yawl.editor.swing.menu.MenuUtilities;
import org.yawlfoundation.yawl.editor.specification.SpecificationFileModelListener;
import org.yawlfoundation.yawl.editor.specification.SpecificationFileModel;
import org.yawlfoundation.yawl.editor.actions.YAWLBaseAction;
import org.yawlfoundation.yawl.editor.net.NetGraph;

import javax.swing.*;
import java.awt.event.ActionEvent;

public class ConfigurationSettingsAction extends YAWLBaseAction
        implements SpecificationFileModelListener {

    private final SpecificationFileModel fileModel =
      SpecificationFileModel.getInstance();

    {
      fileModel.subscribe(this);
    }


	private static final long serialVersionUID = 1L;

	{
	    putValue(Action.SHORT_DESCRIPTION, "Process Configuration Settings");
	    putValue(Action.NAME, "Process Configuration...");
	    putValue(Action.LONG_DESCRIPTION, "Process Configuration Settings");
      putValue(Action.SMALL_ICON, getPNGIcon("wrench"));
      putValue(Action.MNEMONIC_KEY, new Integer(java.awt.event.KeyEvent.VK_P));
      putValue(Action.ACCELERATOR_KEY, MenuUtilities.getAcceleratorKeyStroke("shift C"));
	  }
	
	
	public void actionPerformed(ActionEvent event) {
		final NetGraph net = this.getGraph();
		 net.getNetModel().beginUpdate();
		 java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
	                ConfigurationReferenceJDialog dialog = new ConfigurationReferenceJDialog(new javax.swing.JFrame(), true, net);
	                dialog.setLocationRelativeTo(YAWLEditor.getInstance());
	                dialog.setVisible(true);
	            }
	        });
		 net.getNetModel().endUpdate();
	}


  public void specificationFileModelStateChanged(int state) {
      setEnabled(state == SpecificationFileModel.EDITING);
  }
	
	/**
	 *
	 * @author jingxin
	 */
	private class ConfigurationReferenceJDialog extends javax.swing.JDialog {
		
		private NetGraph net;

	    /** Creates new form ConfigurationReferenceJDialog */
	    public ConfigurationReferenceJDialog(java.awt.Frame parent, boolean modal, NetGraph net) {
	        super(parent, modal);
	        this.net = net;
	        initComponents();
	    }

	    /** This method is called from within the constructor to
	     * initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is
	     * always regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">
	    private void initComponents() {

	        newElementConfig = new java.awt.Checkbox();
	        AotGreyOut = new java.awt.Checkbox();
	        denyblocking = new java.awt.Checkbox();
	        changDefault = new java.awt.Checkbox();
	        okButton = new javax.swing.JButton();

	        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
	        setTitle("Process Configuration Settings");

	        newElementConfig.setLabel("Set new elements configurable");

	        AotGreyOut.setLabel("Preview process automatically");

	        denyblocking.setLabel("Deny blocking input ports");

	        changDefault.setLabel("Allow changing default configurations");

	        okButton.setText("OK");
	        okButton.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                okButtonActionPerformed(evt);
	            }
	        });

	        GroupLayout layout = new GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(GroupLayout.LEADING)
	            .add(layout.createSequentialGroup()
	                .add(layout.createParallelGroup(GroupLayout.LEADING)
	                    .add(layout.createSequentialGroup()
	                        .addContainerGap()
	                        .add(layout.createParallelGroup(GroupLayout.LEADING)
	                            .add(denyblocking, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                            .add(newElementConfig, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                            .add(AotGreyOut, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                            .add(changDefault, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
	                    .add(layout.createSequentialGroup()
	                        .add(105, 105, 105)
	                        .add(okButton, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)))
	                .addContainerGap(19, Short.MAX_VALUE))
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(GroupLayout.LEADING)
	            .add(layout.createSequentialGroup()
	                .addContainerGap()
	                .add(newElementConfig, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(LayoutStyle.RELATED)
	                .add(AotGreyOut, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(LayoutStyle.RELATED)
	                .add(denyblocking, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(LayoutStyle.RELATED)
	                .add(changDefault, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(LayoutStyle.RELATED, 24, Short.MAX_VALUE)
	                .add(okButton)
	                .addContainerGap())
	        );
	        
	        if(!this.net.getConfigurationSettings().isAllowBlockingInputPorts()){
	        	this.denyblocking.setState(true);
	        }
	        
	        if(this.net.getConfigurationSettings().isApplyAutoGreyOut()){
	        	this.AotGreyOut.setState(true);
	        }
	        
	        if(this.net.getConfigurationSettings().isNewElementsConfigurable()){
	        	this.newElementConfig.setState(true);
	        }
	        
	        if(this.net.getConfigurationSettings().isAllowChangingDefaultConfiguration()){
	        	this.changDefault.setState(true);
	        }
	        pack();
          setResizable(false);
	    }// </editor-fold>

	    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
	    		this.net.getConfigurationSettings().setApplyAutoGreyOut(this.AotGreyOut.getState());
	    		this.net.getConfigurationSettings().setAllowBlockingInputPorts(!this.denyblocking.getState());
	    		this.net.getConfigurationSettings().setNewElementsConfigurable(this.newElementConfig.getState());
	    		this.net.getConfigurationSettings().setAllowChangingDefaultConfiguration(this.changDefault.getState());
	    		this.setVisible(false);
	    }

	   
	    // Variables declaration - do not modify
	    private java.awt.Checkbox AotGreyOut;
	    private java.awt.Checkbox changDefault;
	    private java.awt.Checkbox denyblocking;
	    private java.awt.Checkbox newElementConfig;
	    private javax.swing.JButton okButton;
	    // End of variables declaration

	}

}
