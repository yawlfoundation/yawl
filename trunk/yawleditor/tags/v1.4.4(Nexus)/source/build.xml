<project name="YAWLEditor" default="full" basedir="../">

  <!-- global properties -->
  
  <property file="source/build.properties" />

  <property name="root.class.name" value="YAWLEditor" />
  <property name="root.source.file" value="${root.class.name}.java" />
  <property name="root.class.directory" value="au/edu/qut/yawl/editor" />
  <property name="source.file.class.path"
            value="au.edu.qut.yawl.editor.${root.class.name}" />

  <property name="source.directory" value="${basedir}/source" />
  <property name="source.file"
            value="${root.class.directory}/${root.source.file}" />

  <property name="build.directory"
            value="${basedir}/classFiles/${root.class.name}" />
  <property name="distribution.directory" value="${basedir}/distribution" />

  <property name="library.directory" value="${basedir}/lib" />
  <property name="tool.directory" value="${basedir}/tools" />

  <property name="source.archive.root" value="${root.class.name}${editor.release.number}source.zip" />
  <property name="source.archive"
            value="${distribution.directory}/${source.archive.root}" />
  <property name="javadoc.directory" value="${basedir}/javadoc" />

  <property name="source.release" value="1.5" />


  <property name="editor.jar.file.base"
            value="${distribution.directory}/${root.class.name}${editor.release.number}" />
  <property name="editor.jar.file" value="${editor.jar.file.base}.jar" />

   <property name="lite.editor.jar.file.base"
              value="${distribution.directory}/${root.class.name}Lite${editor.release.number}" />
   <property name="lite.editor.jar.file"
            value="${lite.editor.jar.file.base}.jar" />
  
  <property name="temporary.editor.jar.file"
            value="${editor.jar.file.base}_tmp.jar" />

  <taskdef resource="proguard/ant/task.properties"
           classpath="${tool.directory}/proguard3.7/lib/proguard.jar" />
  
  <!-- global filters -->
  
  <filter token="EditorReleaseNumber" value="${editor.release.number}" />
  <filter token="EditorContributors" value="${editor.contributors}" />
  <filter token="CompatibleEngineReleaseNumber" value="${compatible.engine.release.number}" />
  <filter token="CompatibleEngineJarName" value="${compatible.engine.jar.name}" />
  
  <filter token="CompatibleJavaReleaseNumber" value="${compatible.java.release.number}" />
  <filter token="JGraphReleaseNumber" value="${jgraph.release.number}" />
  <filter token="ProguardReleaseNumber" value="${proguard.release.number}" />
  <filter token="WofYawlReleaseNumber" value="${wofyawl.release.number}" />
 
  <property name="base.engine.name" value="yawl" />
  <property name="engine.jar.file"
            value="${library.directory}/${compatible.engine.jar.name}" />
 
  <target name="initialize"
          description="Initialisation of properties and directories.">
    <!-- Create the time stamp -->
    <tstamp />

    <!-- Create the distribution directory -->
    <mkdir dir="${distribution.directory}" />
  </target>

  <target name="clean" description="Resetting environment to source-only.">
    <delete dir="${build.directory}" />
    <delete dir="${javadoc.directory}" />
    <delete file="${editor.jar.file}" />
    <delete file="${lite.editor.jar.file}" />
    <delete file="${distribution.directory}/${compatible.engine.jar.name}" />
    <delete file="${source.archive}" />
    <delete file="${web.page.archive}" />
  </target>

  <target name="compile"  
          depends="initialize"
          description="Compilation of Source.">
    <!-- Compile the java code from ${srcDir} into ${build.directory} -->

    <delete dir="${build.directory}" />
    <mkdir dir="${build.directory}" />
    
    <property name="filtered.source.directory" value="${basedir}/filtered/source" />
    
     <copy todir="${filtered.source.directory}" filtering="true">
       <fileset dir="${source.directory}"/>
     </copy>

    <copy todir="${build.directory}/${root.class.directory}/resources">
      <fileset dir="${source.directory}/${root.class.directory}/resources">
        <include name="**/*.*" />
      </fileset>
    </copy>

    <echo message="Compiling: ${source.file}" />

    <javac fork="yes"
           debug="yes" 
           source="${source.release}"
           srcdir="${filtered.source.directory}"
           destdir="${build.directory}">
      <include name="${source.file}" />
      <classpath>
        <pathelement location="${engine.jar.file}" />
      </classpath>
    </javac>
    
    <delete dir="${basedir}/filtered" />

  </target>

  <target name="compile.test"
          depends="compile"
          description="Compilation of Test off Source">

    <echo message="Compiling Test: ${root.class.directory}/Test${root.source.file}" />

    <javac fork="yes"
           debug="yes"  
           source="${source.release}"
           srcdir="${source.directory}"
           destdir="${build.directory}">
      <include name="${root.class.directory}/Test${root.source.file}" />
      <classpath>
        <pathelement path="${enginePath}" />
      </classpath>
    </javac>
  </target>

  <target name="test"
          depends="compile.test"
          description="Unit Testing of compiled source.">
    <junit printsummary="true">
      <formatter type="plain" usefile="false" />
      <test name="${root.class.directory}/Test${root.class.name}" />
      <classpath>
        <pathelement location="${build.directory}" />
        <pathelement location="${engine.jar.file}" />
      </classpath>
    </junit>
  </target>

  <target name="package"
          depends="compile"
  	      description="Packaging of compiled source into Jar file.">
    <!-- Put everything in ${build} into the ${jarName}.jar file -->
    <property name="manifestFile" value="${root.class.name}.mf" />

    <manifest file="${manifestFile}">
      <attribute name="Main-Class" value="${source.file.class.path}" />
      <attribute name="Class-Path" value="${compatible.engine.jar.name}" />
    </manifest>

    <jar jarfile="${lite.editor.jar.file}"
         basedir="${build.directory}"
         manifest="${manifestFile}"
         excludes="**/Test*.class" />
 
    <delete file="${manifestFile}" />
    <available file="${lite.editor.jar.file}"
               property="lite.editor.jar.exists" />
  </target>

  <target name="optimise"
          depends="package"
  	      description="Optimisation of the editor">
    <proguard optimize="true" obfuscate="false" shrink="true" note="false" overloadaggressively="false" defaultpackage="">
      <libraryjar file="${java.home}/lib/rt.jar"/>
      <libraryjar file="${engine.jar.file}"/> 
      <injar  file="${lite.editor.jar.file}"/>
      <outjar file="${temporary.editor.jar.file}"/> 

      <!--  Keep Bootstap class and its main() method.  -->

      <keepclasseswithmembers name="${source.file.class.path}">
        <method access="public static" type="void" name="main" parameters="java.lang.String[]"/> 
      </keepclasseswithmembers>

      <!-- Basic - Library. Keep all externally accessible classes, fields, and methods. -->
      
      <keep access="public">
        <field access="public protected"/>
      	<method access="public protected"/>
      </keep>
      
      <!-- Keep Serialization code. -->
     
      <keepclassmembers type="class" name="*" extends="java.io.Serializable">
        <field access="static final" type="long" name="serialVersionUID"/>
        <method access="private" type="void" name="writeObject" parameters="java.io.ObjectOutputStream"/>
        <method access="private" type="void" name="readObject" parameters="java.io.ObjectInputStream"/>
        <method type="java.lang.Object" name="writeReplace" parameters=""/>
        <method type="java.lang.Object" name="readResolve" parameters=""/>
      </keepclassmembers>

      <!-- Keep Clone code. -->
      
      <keepclassmembers type="class" name="*" extends="Cloneable">
        <method access="public" name="clone" />
      </keepclassmembers>
      
    </proguard>
    <move file="${temporary.editor.jar.file}"
          tofile="${lite.editor.jar.file}" />
  </target>

  <target name="fuse.engine"
          depends="optimise"
          description="Fuses the editor with requisite engine classes">
    <echo message="Fusing ${editor.jar.file} with required engine classes." />
   
    <!-- Engine treatment breaks the final result in ways that are hard/time-consuming
         to resolve. Have  switched off optimisation/shrinking for the time being -->  
    
   <!-- Update 06/10/2006: shrinking seems to work for Progard 3.6 with the 7.2.1 engine -->
    
    <proguard optimize="false" obfuscate="false" shrink="true" ignorewarnings="true">
      <libraryjar file="${java.home}/lib/rt.jar"/>
      <injar  file="${lite.editor.jar.file}"/>
      <injar  file="${engine.jar.file}"/> 
      <outjar file="${temporary.editor.jar.file}"/> 
     
      <!--  Keep Bootstap class and its main() method.  -->

      <keepclasseswithmembers name="${source.file.class.path}">
        <method access="public static" type="void" name="main" parameters="java.lang.String[]"/> 
      </keepclasseswithmembers>

      <!-- Basic - Library. Keep all externally accessible classes, fields, and methods. -->
      
      <keep access="public">
        <field access="public protected"/>
        <method access="public protected"/>
      </keep>
      
      <!-- Keep Serialization code. -->
     
      <keepclassmembers type="class" name="*" extends="java.io.Serializable">
        <field access="static final" type="long" name="serialVersionUID"/>
        <method access="private" type="void" name="writeObject" parameters="java.io.ObjectOutputStream"/>
        <method access="private" type="void" name="readObject" parameters="java.io.ObjectInputStream"/>
        <method type="java.lang.Object" name="writeReplace" parameters=""/>
        <method type="java.lang.Object" name="readResolve" parameters=""/>
      </keepclassmembers>

      <!-- Keep Clone code. -->
      
      <keepclassmembers type="class" name="*" extends="Cloneable">
        <method access="public" name="clone" />
      </keepclassmembers>
      
    </proguard>
    <move file="${temporary.editor.jar.file}" tofile="${editor.jar.file}" />
  </target>

  <target name="document"
          depends="initialize"
          description="Generate Javadocs for the source-code">
    <mkdir dir="${javadoc.directory}" />
    <javadoc packagenames="au.edu.qut.yawl.editor.*"
             sourcepath="${source.directory}"
             source="${source.release}"
             classpath="${engine.jar.file}"
             defaultexcludes="yes"
             destdir="${javadoc.directory}"
             author="true"
             version="true"
             use="true"
             windowtitle="YAWLEditor ${editor.release.number} API">
	    <doctitle>
	      <![CDATA[<h1>YAWLEditor ${editor.release.number} API</h1>]]>
	    </doctitle>
      <link offline="false" href="http://java.sun.com/j2se/1.4.2/docs/api/"/> 
    </javadoc>
  </target>

	<target name="zip.source"
	        depends="initialize"
	        description="Generate a zipfile of the source">
    
		<zip destfile="${source.archive}">
      <zipfileset dir="${source.directory}" prefix="source"/>
		  <zipfileset dir="${library.directory}" prefix="lib"/>
		  <zipfileset dir="${tool.directory}" prefix="tools" />
		</zip>
   
    <property name="filtered.source.directory" value="${basedir}/filtered/source" />
    
    <copy todir="${distribution.directory}" filtering="true">
      <fileset file="${source.directory}/ReleaseNotes.txt"/>
      <fileset file="${source.directory}/ChangeLog.txt"/>
    </copy>

  </target>
	
	<target name="clean.fusion"
	        depends="clean,fuse.engine"
	        description="Complete reset, rebuild and fusion with engine JAR." />
	<target name="full"
	        depends="clean,fuse.engine,zip.source,document"
	        description="Complete reset and rebuild of everytthing" />
	<target name="clean.test"
	        depends="clean,test"
	        description="Complete reset and retest" />
	<target name="clean.package"
	        depends="clean,package"
	        description="Complete reset and retest" />
	<target name="clean.optimise"
	        depends="clean,optimise"
	        description="Complete reset, rebuild and optimisation " />
</project>